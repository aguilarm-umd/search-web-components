{
  "schemaVersion": "1.0.0",
  "readme": "",
  "modules": [
    {
      "kind": "javascript-module",
      "path": "src/BaseDropdownElement.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "DropdownMixinInterface",
          "members": [
            {
              "kind": "field",
              "name": "htmlSelectLabel",
              "type": {
                "text": "string"
              },
              "description": "The label to display in the input box."
            },
            {
              "kind": "field",
              "name": "multipleSelect",
              "type": {
                "text": "boolean"
              },
              "description": "If a user can select multiple options."
            },
            {
              "kind": "field",
              "name": "dropdownOpen",
              "type": {
                "text": "boolean"
              },
              "description": "Indicates if the dropdown is open or closed."
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "description": "Indicates if the user must select a option."
            },
            {
              "kind": "field",
              "name": "focusedOption",
              "type": {
                "text": "HTMLElement | null"
              },
              "description": "The currently focused HTML element."
            },
            {
              "kind": "method",
              "name": "getHtmlLabel",
              "return": {
                "type": {
                  "text": "string | TemplateResult"
                }
              },
              "description": "The label that appears above the field."
            },
            {
              "kind": "method",
              "name": "getOptionId",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "option",
                  "type": {
                    "text": "unknown"
                  }
                }
              ],
              "description": "Returns the id for an option."
            },
            {
              "kind": "method",
              "name": "getOptionKey",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "option",
                  "type": {
                    "text": "unknown"
                  }
                }
              ],
              "description": "Returns the key for an option."
            },
            {
              "kind": "method",
              "name": "getOptionValue",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "option",
                  "type": {
                    "text": "unknown"
                  }
                }
              ],
              "description": "Returns the value for an option."
            },
            {
              "kind": "method",
              "name": "getOptionLabel",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "option",
                  "type": {
                    "text": "unknown"
                  }
                }
              ],
              "description": "Returns the label for an option."
            },
            {
              "kind": "method",
              "name": "getAllOptions",
              "return": {
                "type": {
                  "text": "unknown[]"
                }
              },
              "description": "Returns all available options."
            },
            {
              "kind": "method",
              "name": "isOptionSelected",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "option",
                  "type": {
                    "text": "unknown"
                  }
                }
              ],
              "description": "Determine if an option is currently selected."
            },
            {
              "kind": "method",
              "name": "hasSelectedOptions",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "description": "Determine if there are any selected options."
            },
            {
              "kind": "method",
              "name": "getHtmlSelectLabel",
              "return": {
                "type": {
                  "text": "string | TemplateResult"
                }
              },
              "description": "Get the html label that will appear inside the select field."
            },
            {
              "kind": "method",
              "name": "optionMouseDown",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "MouseEvent"
                  }
                },
                {
                  "name": "option",
                  "type": {
                    "text": "unknown"
                  }
                }
              ],
              "description": "The action to take when a user clicks on an option."
            },
            {
              "kind": "method",
              "name": "clearSelection",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ],
              "description": "Clear the currently selected option(s)."
            },
            {
              "kind": "method",
              "name": "applySelection",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ],
              "description": "Apple a selection from a keyboard event."
            },
            {
              "kind": "method",
              "name": "getSelectedOptions",
              "return": {
                "type": {
                  "text": "unknown[]"
                }
              },
              "description": "Get all the currently selected options."
            },
            {
              "kind": "method",
              "name": "filterOptions",
              "return": {
                "type": {
                  "text": "unknown[]"
                }
              },
              "parameters": [
                {
                  "name": "searchString",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Returns options that match the provided filter string."
            },
            {
              "kind": "method",
              "name": "close",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Close the dropdown."
            },
            {
              "kind": "method",
              "name": "_getHtmlLabelElement",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "description": "The HTML element for the label above the field."
            },
            {
              "kind": "method",
              "name": "_getHtmlSelectLabelElement",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "description": "The HTML element for the label/current value inside the select field."
            },
            {
              "kind": "method",
              "name": "_getHtmlSelectElement",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "description": "The HTML element for the list of options."
            }
          ]
        },
        {
          "kind": "mixin",
          "description": "",
          "name": "DropdownMixin",
          "members": [
            {
              "kind": "field",
              "name": "htmlSelectLabel",
              "type": {
                "text": "string"
              },
              "default": "'Choose an option'",
              "description": "The label to display in the input box.",
              "attribute": "htmlSelectLabel"
            },
            {
              "kind": "field",
              "name": "multipleSelect",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "If a user can select multiple options.",
              "attribute": "multipleSelect"
            },
            {
              "kind": "field",
              "name": "dropdownOpen",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "If the dropdown is open."
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicates if the user must select a option.",
              "attribute": "required"
            },
            {
              "kind": "field",
              "name": "focusedOption",
              "type": {
                "text": "HTMLElement | null"
              },
              "default": "null",
              "description": "Private: The current option that is focused."
            },
            {
              "kind": "field",
              "name": "focusOnOpen",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "description": "Private: If focus should be applied to the focusedOption when the dropdown is next opened."
            },
            {
              "kind": "field",
              "name": "searchTimeout",
              "type": {
                "text": "number | undefined"
              },
              "privacy": "private",
              "description": "Private: The type search timeout."
            },
            {
              "kind": "field",
              "name": "searchTerm",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "default": "''",
              "description": "Private: The type search string."
            },
            {
              "kind": "field",
              "name": "inputRef",
              "privacy": "private",
              "description": "Private: A ref to the element that displays the current value."
            },
            {
              "kind": "field",
              "name": "listboxRef",
              "privacy": "private",
              "description": "Private: A Ref to the listbox element containing the available options."
            },
            {
              "kind": "field",
              "name": "selectActions",
              "type": {
                "text": "object"
              },
              "privacy": "private",
              "default": "{\n      Close: 0,\n      CloseSelect: 1,\n      First: 2,\n      Last: 3,\n      Next: 4,\n      Open: 5,\n      PageDown: 6,\n      PageUp: 7,\n      Previous: 8,\n      Select: 9,\n      Type: 10,\n    }",
              "description": "Private: A mapping of actions to the applicable key input code."
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Map<string, any>"
                  }
                }
              ],
              "description": "Ensure the focusElement is focused when the dropdown is opened."
            },
            {
              "kind": "method",
              "name": "getHtmlLabel",
              "return": {
                "type": {
                  "text": "string | TemplateResult"
                }
              },
              "description": "HELPERS"
            },
            {
              "kind": "method",
              "name": "getOptionId",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "option",
                  "type": {
                    "text": "unknown"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getOptionKey",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "_option",
                  "type": {
                    "text": "unknown"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getOptionValue",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "_option",
                  "type": {
                    "text": "unknown"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getOptionLabel",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "_option",
                  "type": {
                    "text": "unknown"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getAllOptions",
              "return": {
                "type": {
                  "text": "unknown[]"
                }
              }
            },
            {
              "kind": "method",
              "name": "isOptionSelected",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "_option",
                  "type": {
                    "text": "unknown"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "hasSelectedOptions",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "getHtmlSelectLabel",
              "return": {
                "type": {
                  "text": "TemplateResult | string"
                }
              },
              "description": "Get the select field label."
            },
            {
              "kind": "method",
              "name": "optionMouseDown",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "MouseEvent"
                  }
                },
                {
                  "name": "_option",
                  "type": {
                    "text": "unknown"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "clearSelection",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "applySelection",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "_event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getSelectedOptions",
              "return": {
                "type": {
                  "text": "unknown[]"
                }
              }
            },
            {
              "kind": "method",
              "name": "filterOptions",
              "return": {
                "type": {
                  "text": "unknown[]"
                }
              },
              "parameters": [
                {
                  "name": "_searchString",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_getHtmlLabelElement",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "description": "The label element for the field."
            },
            {
              "kind": "method",
              "name": "_getOptionElement",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "parameters": [
                {
                  "name": "option",
                  "type": {
                    "text": "unknown"
                  },
                  "description": "The option data to render."
                }
              ],
              "description": "Render a single dropdown option."
            },
            {
              "kind": "method",
              "name": "_getAllOptionsElements",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "description": "Get all the option elements."
            },
            {
              "kind": "method",
              "name": "_getHtmlSelectLabelElement",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "description": "Get the select field label element."
            },
            {
              "kind": "method",
              "name": "_getHtmlSelectElement",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "description": "Get the select field element."
            },
            {
              "kind": "method",
              "name": "close",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Close the dropdown."
            },
            {
              "kind": "method",
              "name": "_getActionFromKey",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ],
              "description": "Map a key press to an action."
            },
            {
              "kind": "method",
              "name": "onSelectKeyDown",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ],
              "description": "Map a key press to an action and update element."
            },
            {
              "kind": "method",
              "name": "toggleDropdown",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Toggle the dropdown open or closed."
            },
            {
              "kind": "method",
              "name": "_typeSearch",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "letter",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Search available options based on the entered string."
            },
            {
              "kind": "method",
              "name": "_searchOptions",
              "return": {
                "type": {
                  "text": "string | undefined"
                }
              },
              "parameters": [
                {
                  "name": "searchTerm",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Search the options by the given search term. If the search term repeats the same letter\nit will cycle through options starting with that letter."
            },
            {
              "kind": "method",
              "name": "_getNextOption",
              "parameters": [
                {
                  "name": "action",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "Get the next option to focus on based on the given action."
            },
            {
              "kind": "method",
              "name": "_getSearchTerm",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "char",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Get the search term input"
            },
            {
              "kind": "method",
              "name": "_elementInView",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "id",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Determine if an DOM element is visible on the screen."
            },
            {
              "kind": "method",
              "name": "_isScrollable",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "description": "Determine if the options listbox is scrollable."
            },
            {
              "kind": "method",
              "name": "_maintainScrollVisibility",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "id",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Scroll to the given element."
            },
            {
              "kind": "method",
              "name": "_setOptionFocus",
              "parameters": [
                {
                  "name": "id",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Focus on an option in the listbox and remove focus from all other options."
            }
          ],
          "attributes": [
            {
              "name": "htmlSelectLabel",
              "type": {
                "text": "string"
              },
              "default": "'Choose an option'",
              "description": "The label to display in the input box.",
              "fieldName": "htmlSelectLabel"
            },
            {
              "name": "multipleSelect",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "If a user can select multiple options.",
              "fieldName": "multipleSelect"
            },
            {
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicates if the user must select a option.",
              "fieldName": "required"
            }
          ],
          "parameters": [
            {
              "name": "superClass",
              "type": {
                "text": "T"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "DropdownMixinInterface",
          "declaration": {
            "name": "DropdownMixinInterface",
            "module": "src/BaseDropdownElement.ts"
          }
        },
        {
          "kind": "js",
          "name": "DropdownMixin",
          "declaration": {
            "name": "DropdownMixin",
            "module": "src/BaseDropdownElement.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/BaseFacetElement.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "BaseFacetElement",
          "members": [
            {
              "kind": "field",
              "name": "key",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The machine name of the facet to render options for.",
              "attribute": "key"
            },
            {
              "kind": "field",
              "name": "overrideLabel",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Replace the default facet label with this text.",
              "attribute": "overrideLabel"
            },
            {
              "kind": "field",
              "name": "showLabel",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "If the facet's label should be shown.",
              "attribute": "showLabel"
            },
            {
              "kind": "field",
              "name": "showCount",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "If counts should be shown next to facet options.",
              "attribute": "showCount"
            },
            {
              "kind": "field",
              "name": "showReset",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "If a reset button should be shown for this facet.",
              "attribute": "showReset"
            },
            {
              "kind": "field",
              "name": "resetText",
              "default": "`Reset (@count)`",
              "description": "The label to use for the reset/clear facet selection button. `@count` can be used as a token that will be replaced with the number of selected options.",
              "attribute": "resetText"
            },
            {
              "kind": "field",
              "name": "collapsible",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Make the facet options collapsible.",
              "attribute": "collapsible"
            },
            {
              "kind": "field",
              "name": "closed",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Default a collapsible facet to closed.",
              "attribute": "closed"
            },
            {
              "kind": "field",
              "name": "showCountInCollapseLabel",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Show the applied options count in a collapsible facet label.",
              "attribute": "showCountInCollapseLabel"
            },
            {
              "kind": "field",
              "name": "preferAttributes",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "When set settings for this facet from the api are ignored.",
              "attribute": "preferAttributes"
            },
            {
              "kind": "field",
              "name": "urlAlias",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The key used for this facet in the url and api calls."
            },
            {
              "kind": "field",
              "name": "softLimit",
              "type": {
                "text": "number | undefined"
              },
              "description": "The initial number of top level options to display.",
              "attribute": "softLimit"
            },
            {
              "kind": "field",
              "name": "softLimitLessLabel",
              "type": {
                "text": "string | undefined"
              },
              "description": "The label to 'Show Less' options.",
              "attribute": "softLimitLessLabel"
            },
            {
              "kind": "field",
              "name": "softLimitMoreLabel",
              "type": {
                "text": "string | undefined"
              },
              "description": "The label to 'Show More' options.",
              "attribute": "softLimitMoreLabel"
            },
            {
              "kind": "field",
              "name": "optionsOpen",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "If a collapsible facet is open or closed."
            },
            {
              "kind": "field",
              "name": "facetConfigLoaded",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "facet",
              "type": {
                "text": "SearchFacetsType | undefined"
              }
            },
            {
              "kind": "field",
              "name": "showMoreOpen",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "method",
              "name": "_configOrAttribute",
              "parameters": [
                {
                  "name": "config",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "attribute",
                  "type": {
                    "text": "any"
                  }
                }
              ],
              "description": "Get the correct value for a property based on config and attributes."
            },
            {
              "kind": "method",
              "name": "_getOptionId",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_getFacetData",
              "return": {
                "type": {
                  "text": "SearchFacetsType"
                }
              },
              "description": "Get the facet value and configuration for the given key."
            },
            {
              "kind": "method",
              "name": "_getLabelElement",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "description": "Returns the html for the facet's label."
            },
            {
              "kind": "method",
              "name": "_getCollapsibleLabelElement",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "description": "Returns the html for the facet's label."
            },
            {
              "kind": "method",
              "name": "_getSoftLimitElement",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "description": "Returns the html for the button to toggle the soft limit."
            },
            {
              "kind": "method",
              "name": "wrapCollapsible",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "parameters": [
                {
                  "name": "label",
                  "type": {
                    "text": "TemplateResult"
                  }
                },
                {
                  "name": "options",
                  "type": {
                    "text": "TemplateResult"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_getResetElement",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "description": "Returns the html for the facet reset button."
            },
            {
              "kind": "method",
              "name": "shouldRender"
            }
          ],
          "attributes": [
            {
              "name": "key",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The machine name of the facet to render options for.",
              "fieldName": "key"
            },
            {
              "name": "overrideLabel",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Replace the default facet label with this text.",
              "fieldName": "overrideLabel"
            },
            {
              "name": "showLabel",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "If the facet's label should be shown.",
              "fieldName": "showLabel"
            },
            {
              "name": "showCount",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "If counts should be shown next to facet options.",
              "fieldName": "showCount"
            },
            {
              "name": "showReset",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "If a reset button should be shown for this facet.",
              "fieldName": "showReset"
            },
            {
              "name": "resetText",
              "default": "`Reset (@count)`",
              "description": "The label to use for the reset/clear facet selection button. `@count` can be used as a token that will be replaced with the number of selected options.",
              "fieldName": "resetText"
            },
            {
              "name": "collapsible",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Make the facet options collapsible.",
              "fieldName": "collapsible"
            },
            {
              "name": "closed",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Default a collapsible facet to closed.",
              "fieldName": "closed"
            },
            {
              "name": "showCountInCollapseLabel",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Show the applied options count in a collapsible facet label.",
              "fieldName": "showCountInCollapseLabel"
            },
            {
              "name": "preferAttributes",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "When set settings for this facet from the api are ignored.",
              "fieldName": "preferAttributes"
            },
            {
              "name": "softLimit",
              "type": {
                "text": "number | undefined"
              },
              "description": "The initial number of top level options to display.",
              "fieldName": "softLimit"
            },
            {
              "name": "softLimitLessLabel",
              "type": {
                "text": "string | undefined"
              },
              "description": "The label to 'Show Less' options.",
              "fieldName": "softLimitLessLabel"
            },
            {
              "name": "softLimitMoreLabel",
              "type": {
                "text": "string | undefined"
              },
              "description": "The label to 'Show More' options.",
              "fieldName": "softLimitMoreLabel"
            }
          ],
          "superclass": {
            "name": "BaseSearchElement",
            "module": "/src/BaseSearchElement"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "BaseFacetElement",
            "module": "src/BaseFacetElement.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/MockData.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "MockData",
          "type": {
            "text": "object"
          },
          "default": "{\n  query: '',\n  url: '/mock/api/search/mock-index',\n  data: {\n    search_results: [\n      {\n        rendered_item:\n          '\\n\\n\\u003Carticle class=\\u0022node node--type-recipe node--promoted node--view-mode-search-index\\u0022\\u003E\\n\\n  \\n            \\u003Ch2\\u003E\\n        \\u003Ca href=\\u0022/en/recipes/borscht-with-pork-ribs\\u0022 rel=\\u0022bookmark\\u0022\\u003E\\u003Cspan class=\\u0022field field--name-title field--type-string field--label-hidden\\u0022\\u003EBorscht with pork ribs\\u003C/span\\u003E\\n\\u003C/a\\u003E\\n      \\u003C/h2\\u003E\\n        \\n\\n  \\n  \\u003Cdiv class=\\u0022node__content\\u0022\\u003E\\n    \\n            \\u003Cdiv class=\\u0022clearfix text-formatted field field--name-field-summary field--type-text-long field--label-hidden field__item\\u0022\\u003E\\u003Cp\\u003EEvery Ukrainian family has a modification; with beans, without cabbage, etc. They are all valid though, there\\u2019s no unified \\u2018correct\\u2019 recipe. The one you are about to read and cook is borscht with pork ribs. You\\u2019ll appreciate its taste and flavor. You\\u2019ll connect and feel a true Ukrainian soul while savoring!\\u003C/p\\u003E\\n\\u003C/div\\u003E\\n      \\n      \\u003Cdiv class=\\u0022label-items field field--name-field-recipe-category field--type-entity-reference field--label-hidden field__items\\u0022\\u003E\\n              \\u003Cdiv class=\\u0022field__item\\u0022\\u003E\\u003Ca href=\\u0022/en/recipe-category/main-courses\\u0022 hreflang=\\u0022en\\u0022\\u003EMain courses\\u003C/a\\u003E\\u003C/div\\u003E\\n          \\u003C/div\\u003E\\n  \\n      \\u003Cdiv class=\\u0022label-items field field--name-field-tags field--type-entity-reference field--label-hidden field__items\\u0022\\u003E\\n              \\u003Cdiv class=\\u0022field__item\\u0022\\u003E\\u003Ca href=\\u0022/en/tags/soup\\u0022 hreflang=\\u0022en\\u0022\\u003ESoup\\u003C/a\\u003E\\u003C/div\\u003E\\n          \\u003C/div\\u003E\\n  \\n            \\u003Cdiv class=\\u0022field field--name-field-media-image field--type-entity-reference field--label-hidden field__item\\u0022\\u003E\\u003Carticle class=\\u0022media media--type-image media--view-mode-responsive-3x2\\u0022\\u003E\\n  \\n      \\n            \\u003Cdiv class=\\u0022field field--name-field-media-image field--type-image field--label-hidden field__item\\u0022\\u003E    \\u003Cimg loading=\\u0022lazy\\u0022 srcset=\\u0022/sites/default/files/styles/medium_3_2_600x400/public/borscht-with-pork-ribs-umami.jpg?itok=B3_cfLwL 600w, /sites/default/files/styles/large_3_2_768x512/public/borscht-with-pork-ribs-umami.jpg?itok=AD5K_eBC 768w, /sites/default/files/styles/medium_3_2_2x/public/borscht-with-pork-ribs-umami.jpg?itok=tZeRAHO4 1200w, /sites/default/files/styles/large_3_2_2x/public/borscht-with-pork-ribs-umami.jpg?itok=jVYKtVcP 1536w\\u0022 sizes=\\u0022100vw\\u0022 width=\\u0022600\\u0022 height=\\u0022400\\u0022 src=\\u0022/sites/default/files/styles/large_3_2_768x512/public/borscht-with-pork-ribs-umami.jpg?itok=AD5K_eBC\\u0022 alt=\\u0022Traditional Ukrainian soup with beets, tomatoes, and pork ribs\\u0022 /\\u003E\\n\\n\\n\\u003C/div\\u003E\\n      \\n  \\u003C/article\\u003E\\n\\u003C/div\\u003E\\n      \\n            \\u003Cdiv content=\\u002230\\u0022 class=\\u0022field field--name-field-preparation-time field--type-integer field--label-hidden field__item\\u0022\\u003E30 minutes\\u003C/div\\u003E\\n      \\n            \\u003Cdiv content=\\u002260\\u0022 class=\\u0022field field--name-field-cooking-time field--type-integer field--label-hidden field__item\\u0022\\u003E60 minutes\\u003C/div\\u003E\\n      \\n            \\u003Cdiv class=\\u0022field field--name-field-number-of-servings field--type-integer field--label-hidden field__item\\u0022\\u003E8\\u003C/div\\u003E\\n      \\n            \\u003Cdiv class=\\u0022label-items field field--name-field-difficulty field--type-list-string field--label-hidden field__item\\u0022\\u003EMedium\\u003C/div\\u003E\\n      \\n      \\u003Cdiv class=\\u0022field field--name-field-ingredients field--type-string field--label-hidden field__items\\u0022\\u003E\\n              \\u003Cdiv class=\\u0022field__item\\u0022\\u003E400-500g pork ribs\\u003C/div\\u003E\\n              \\u003Cdiv class=\\u0022field__item\\u0022\\u003E2 beets\\u003C/div\\u003E\\n              \\u003Cdiv class=\\u0022field__item\\u0022\\u003E2 tomatoes\\u003C/div\\u003E\\n              \\u003Cdiv class=\\u0022field__item\\u0022\\u003E\\u00bc celery root\\u003C/div\\u003E\\n              \\u003Cdiv class=\\u0022field__item\\u0022\\u003E\\u00bc cabbage\\u003C/div\\u003E\\n              \\u003Cdiv class=\\u0022field__item\\u0022\\u003E3-4 medium potatoes\\u003C/div\\u003E\\n              \\u003Cdiv class=\\u0022field__item\\u0022\\u003E1 carrot\\u003C/div\\u003E\\n              \\u003Cdiv class=\\u0022field__item\\u0022\\u003E1 onion\\u003C/div\\u003E\\n              \\u003Cdiv class=\\u0022field__item\\u0022\\u003E1-2 smoked pears\\u003C/div\\u003E\\n              \\u003Cdiv class=\\u0022field__item\\u0022\\u003E2 bay leaves\\u003C/div\\u003E\\n              \\u003Cdiv class=\\u0022field__item\\u0022\\u003E3 allspice berries\\u003C/div\\u003E\\n              \\u003Cdiv class=\\u0022field__item\\u0022\\u003E1 bulb garlic\\u003C/div\\u003E\\n              \\u003Cdiv class=\\u0022field__item\\u0022\\u003E1 bell pepper\\u003C/div\\u003E\\n              \\u003Cdiv class=\\u0022field__item\\u0022\\u003E200ml tomato juice\\u003C/div\\u003E\\n              \\u003Cdiv class=\\u0022field__item\\u0022\\u003E30g butter\\u003C/div\\u003E\\n              \\u003Cdiv class=\\u0022field__item\\u0022\\u003E2 tbsp tomato paste\\u003C/div\\u003E\\n              \\u003Cdiv class=\\u0022field__item\\u0022\\u003E3l water\\u003C/div\\u003E\\n              \\u003Cdiv class=\\u0022field__item\\u0022\\u003ESour cream\\u003C/div\\u003E\\n              \\u003Cdiv class=\\u0022field__item\\u0022\\u003E1 can beans (optional)\\u003C/div\\u003E\\n              \\u003Cdiv class=\\u0022field__item\\u0022\\u003ESalt to taste\\u003C/div\\u003E\\n          \\u003C/div\\u003E\\n  \\n            \\u003Cdiv class=\\u0022clearfix text-formatted field field--name-field-recipe-instruction field--type-text-long field--label-hidden field__item\\u0022\\u003E\\u003Col\\u003E\\n\\u003Cli\\u003EPreheat the oven to 400\\u00b0F/200\\u00b0C. Put pork ribs on the baking dish and bake them for 30 minutes. Wash but don\\u2019t peel the celery root. Dice the carrot.\\u003C/li\\u003E\\n\\u003Cli\\u003EPut the baked pork ribs in a pot and add 3 liters of water. Chop the celery root and carrot and add them to the pot, along with half the unpeeled onion. Bring the pot to the boil and simmer for 30 minutes.\\u003C/li\\u003E\\n\\u003Cli\\u003EThe heart of the borscht is saut\\u00e9ed vegetables. Dice the bell pepper, tomatoes, and remainder of the onion. Place the butter in a saucepan and add the vegetables. Cook them over a moderate heat until soft. Add the tomato paste, reduce the heat, and simmer for 5-7 minutes. Grate a beet, add it to the saucepan, and stew for a further 3-4 minutes.\\u003C/li\\u003E\\n\\u003Cli\\u003ECut a garlic bulb in a half and add it to the pot. Shred the cabbage and put it aside.\\u003C/li\\u003E\\n\\u003Cli\\u003ETake the second beet and squeeze all the juice out. If you don\\u2019t have a juice squeezer, you can grate a beet and pass it through the sieve. Add the juice together with the allspice, bay leaves, and several pinches of salt to taste.\\u003C/li\\u003E\\n\\u003Cli\\u003EOptionally add the canned beans.\\u003C/li\\u003E\\n\\u003Cli\\u003EAdd the smoked pears to the pot. They will make your dish smell smoky.\\u003C/li\\u003E\\n\\u003Cli\\u003EAdd the shredded cabbage and cook for a further 5  minutes.\\u003C/li\\u003E\\n\\u003Cli\\u003ETake the borscht off the heat and let it stand for 30 minutes.\\u003C/li\\u003E\\n\\u003C/ol\\u003E\\n\\u003Cp\\u003EServe the borscht with a spoon of sour cream and chopped dill. Put the leftover borscht in the fridge, and remember that it tastes better the next day!\\u003C/p\\u003E\\n\\u003C/div\\u003E\\n      \\n  \\u003C/div\\u003E\\n\\n\\u003C/article\\u003E\\n',\n        result:\n          '\\n\\n\\u003Carticle class=\\u0022node node--type-recipe node--promoted node--view-mode-teaser\\u0022\\u003E\\n\\n  \\n            \\u003Ch2\\u003E\\n        \\u003Ca href=\\u0022/en/recipes/borscht-with-pork-ribs\\u0022 rel=\\u0022bookmark\\u0022\\u003E\\u003Cspan class=\\u0022field field--name-title field--type-string field--label-hidden\\u0022\\u003EBorscht with pork ribs\\u003C/span\\u003E\\n\\u003C/a\\u003E\\n      \\u003C/h2\\u003E\\n        \\n\\n  \\n  \\u003Cdiv class=\\u0022node__content\\u0022\\u003E\\n      \\u003Cdiv class=\\u0022node__links\\u0022\\u003E\\n    \\u003Cul class=\\u0022links inline\\u0022\\u003E\\u003Cli class=\\u0022node-readmore\\u0022\\u003E\\u003Ca href=\\u0022/en/recipes/borscht-with-pork-ribs\\u0022 rel=\\u0022tag\\u0022 title=\\u0022Borscht with pork ribs\\u0022 hreflang=\\u0022en\\u0022\\u003ERead more\\u003Cspan class=\\u0022visually-hidden\\u0022\\u003E about Borscht with pork ribs\\u003C/span\\u003E\\u003C/a\\u003E\\u003C/li\\u003E\\u003C/ul\\u003E  \\u003C/div\\u003E\\n\\n  \\u003C/div\\u003E\\n\\n\\u003C/article\\u003E\\n',\n        url: 'https://umami.ddev.site/en/recipes/borscht-with-pork-ribs',\n        author: 'Umami',\n        cooking_time: '60',\n        difficulty: 'medium',\n        image: '/sites/default/files/borscht-with-pork-ribs-umami.jpg',\n        ingredients: [\n          '400-500g pork ribs',\n          '2 beets',\n          '2 tomatoes',\n          '\\u00bc celery root',\n          '\\u00bc cabbage',\n          '3-4 medium potatoes',\n          '1 carrot',\n          '1 onion',\n          '1-2 smoked pears',\n          '2 bay leaves',\n          '3 allspice berries',\n          '1 bulb garlic',\n          '1 bell pepper',\n          '200ml tomato juice',\n          '30g butter',\n          '2 tbsp tomato paste',\n          '3l water',\n          'Sour cream',\n          '1 can beans (optional)',\n          'Salt to taste',\n        ],\n        preparation_time: '30',\n        recipe_category: 'Main courses',\n        servings: '8',\n        summary:\n          '\\u003Cp\\u003EEvery Ukrainian family has a modification; with beans, without cabbage, etc. They are all valid though, there\\u2019s no unified \\u2018correct\\u2019 recipe. The one you are about to read and cook is borscht with pork ribs. You\\u2019ll appreciate its taste and flavor. You\\u2019ll connect and feel a true Ukrainian soul while savoring!\\u003C/p\\u003E\\n',\n        tags: 'Soup',\n        title: 'Borscht with pork ribs',\n        type: 'recipe',\n        id: 'entity:node/10:en',\n        score: 1,\n        excerpt: null,\n      },\n      {\n        rendered_item:\n          '\\n\\n\\u003Carticle class=\\u0022node node--type-article node--promoted node--view-mode-search-index\\u0022\\u003E\\n\\n  \\n            \\u003Ch2\\u003E\\n        \\u003Ca href=\\u0022/en/articles/give-it-a-go-and-grow-your-own-herbs\\u0022 rel=\\u0022bookmark\\u0022\\u003E\\u003Cspan class=\\u0022field field--name-title field--type-string field--label-hidden\\u0022\\u003EGive it a go and grow your own herbs\\u003C/span\\u003E\\n\\u003C/a\\u003E\\n      \\u003C/h2\\u003E\\n        \\n\\n      \\u003Cfooter class=\\u0022node__meta\\u0022\\u003E\\n      \\u003Carticle class=\\u0022profile\\u0022\\u003E\\n  \\u003C/article\\u003E\\n\\n      \\u003Cdiv class=\\u0022node__submitted\\u0022\\u003E\\n        \\u003Cspan class=\\u0022by-author\\u0022\\u003Eby \\u003Cspan class=\\u0022field field--name-uid field--type-entity-reference field--label-hidden\\u0022\\u003E\\u003Cspan\\u003EHolly Foat\\u003C/span\\u003E\\u003C/span\\u003E\\n\\u003C/span\\u003E 9th February 2024        \\n      \\u003C/div\\u003E\\n    \\u003C/footer\\u003E\\n  \\n  \\u003Cdiv class=\\u0022node__content\\u0022\\u003E\\n    \\n      \\u003Cdiv class=\\u0022label-items field field--name-field-tags field--type-entity-reference field--label-hidden field__items\\u0022\\u003E\\n              \\u003Cdiv class=\\u0022field__item\\u0022\\u003E\\u003Ca href=\\u0022/en/tags/grow-your-own\\u0022 hreflang=\\u0022en\\u0022\\u003EGrow your own\\u003C/a\\u003E\\u003C/div\\u003E\\n              \\u003Cdiv class=\\u0022field__item\\u0022\\u003E\\u003Ca href=\\u0022/en/tags/seasonal\\u0022 hreflang=\\u0022en\\u0022\\u003ESeasonal\\u003C/a\\u003E\\u003C/div\\u003E\\n              \\u003Cdiv class=\\u0022field__item\\u0022\\u003E\\u003Ca href=\\u0022/en/tags/herbs\\u0022 hreflang=\\u0022en\\u0022\\u003EHerbs\\u003C/a\\u003E\\u003C/div\\u003E\\n          \\u003C/div\\u003E\\n  \\n            \\u003Cdiv class=\\u0022field field--name-field-media-image field--type-entity-reference field--label-hidden field__item\\u0022\\u003E\\u003Carticle class=\\u0022media media--type-image media--view-mode-responsive-3x2\\u0022\\u003E\\n  \\n      \\n            \\u003Cdiv class=\\u0022field field--name-field-media-image field--type-image field--label-hidden field__item\\u0022\\u003E    \\u003Cimg loading=\\u0022lazy\\u0022 srcset=\\u0022/sites/default/files/styles/medium_3_2_600x400/public/home-grown-herbs.jpg?itok=TIYdyvVo 600w, /sites/default/files/styles/large_3_2_768x512/public/home-grown-herbs.jpg?itok=DupCzqXf 768w, /sites/default/files/styles/medium_3_2_2x/public/home-grown-herbs.jpg?itok=DRJ3g6-_ 1200w, /sites/default/files/styles/large_3_2_2x/public/home-grown-herbs.jpg?itok=hgoEh_6C 1536w\\u0022 sizes=\\u0022100vw\\u0022 width=\\u0022600\\u0022 height=\\u0022400\\u0022 src=\\u0022/sites/default/files/styles/large_3_2_768x512/public/home-grown-herbs.jpg?itok=DupCzqXf\\u0022 alt=\\u0022Fresh cut herbs including mint, parsley, thyme and dill\\u0022 /\\u003E\\n\\n\\n\\u003C/div\\u003E\\n      \\n  \\u003C/article\\u003E\\n\\u003C/div\\u003E\\n      \\n            \\u003Cdiv class=\\u0022clearfix text-formatted field field--name-body field--type-text-with-summary field--label-hidden field__item\\u0022\\u003E\\u003Cp\\u003EThere\\u0027s nothing like having your own supply of fresh herbs, readily available and close at hand to use while cooking. Whether you have a large garden or a small kitchen window sill, there\\u0027s always enough room for something home grown.\\u003C/p\\u003E\\n\\u003Ch2\\u003EOutdoors\\u003C/h2\\u003E\\n\\u003Ch3\\u003EMint\\u003C/h3\\u003E\\n\\u003Cp\\u003EMint is a great plant to grow as it\\u0027s hardy and can grow in almost any soil. Mint can grow wild, so keep it contained in a pot or it might spread and take over your whole garden.\\u003C/p\\u003E\\n\\u003Ch3\\u003ESage\\u003C/h3\\u003E\\n\\u003Cp\\u003ELike mint, sage is another prolific growing plant and will take over your garden if you let it. Highly aromatic, the sage plant can be planted in a pot or flower bed in well drained soil. The best way to store the herb is to sun dry the leaves and store in a cool, dark cupboard in a sealed container.\\u003C/p\\u003E\\n\\u003Ch3\\u003ERosemary\\u003C/h3\\u003E\\n\\u003Cp\\u003ERosemary plants grow into lovely shrubs. Easily grown from cuttings, rosemary plants do not like freezing temperatures so keep pots or planted bushes near the home to shelter them from the cold. It grows well in pots as it likes dry soil, but can survive well in the ground too. If pruning rosemary to encourage it into a better shape, save the branches and hang them upside down to preserve the flavor and use in food.\\u003C/p\\u003E\\n\\u003Ch2\\u003EIndoors\\u003C/h2\\u003E\\n\\u003Ch3\\u003EBasil\\u003C/h3\\u003E\\n\\u003Cp\\u003EPerfect in sunny spot on a kitchen window sill. Basil is an annual plant, so will die off in the autumn, so it\\u0027s a good idea to harvest it in the summer if you have an abundance and dry it. Picked basil stays fresh longer if it is placed in water (like fresh flowers). A great way to store basil is to make it into pesto!\\u003C/p\\u003E\\n\\u003Ch3\\u003EChives\\u003C/h3\\u003E\\n\\u003Cp\\u003EA versatile herb, chives can grow well indoors. Ensure the plant is watered well, and gets plenty of light. Remember to regularly trim the chives. This prevents the flowers from developing and encourages new growth.\\u003C/p\\u003E\\n\\u003Ch3\\u003ECoriander (Cilantro)\\u003C/h3\\u003E\\n\\u003Cp\\u003ECoriander can grow indoors, but unlike the other herbs, it doesn\\u0027t like full sun. If you have a south facing kitchen window, this isn\\u0027t the place for it. Although not as thirsty as basil, coriander doesn\\u0027t like dry soil so don\\u0027t forget to water it! Cut coriander is best stored in the fridge.\\u003C/p\\u003E\\n\\u003C/div\\u003E\\n      \\n  \\u003C/div\\u003E\\n\\n\\u003C/article\\u003E\\n',\n        result:\n          '\\n\\n\\u003Carticle class=\\u0022node node--type-article node--promoted node--view-mode-teaser\\u0022\\u003E\\n\\n  \\n            \\u003Ch2\\u003E\\n        \\u003Ca href=\\u0022/en/articles/give-it-a-go-and-grow-your-own-herbs\\u0022 rel=\\u0022bookmark\\u0022\\u003E\\u003Cspan class=\\u0022field field--name-title field--type-string field--label-hidden\\u0022\\u003EGive it a go and grow your own herbs\\u003C/span\\u003E\\n\\u003C/a\\u003E\\n      \\u003C/h2\\u003E\\n        \\n\\n      \\u003Cfooter class=\\u0022node__meta\\u0022\\u003E\\n      \\u003Carticle class=\\u0022profile\\u0022\\u003E\\n  \\u003C/article\\u003E\\n\\n      \\u003Cdiv class=\\u0022node__submitted\\u0022\\u003E\\n        \\u003Cspan class=\\u0022by-author\\u0022\\u003Eby \\u003Cspan class=\\u0022field field--name-uid field--type-entity-reference field--label-hidden\\u0022\\u003E\\u003Cspan\\u003EHolly Foat\\u003C/span\\u003E\\u003C/span\\u003E\\n\\u003C/span\\u003E 9th February 2024        \\n      \\u003C/div\\u003E\\n    \\u003C/footer\\u003E\\n  \\n  \\u003Cdiv class=\\u0022node__content\\u0022\\u003E\\n    \\n            \\u003Cdiv class=\\u0022field field--name-field-media-image field--type-entity-reference field--label-hidden field__item\\u0022\\u003E\\u003Carticle class=\\u0022media media--type-image media--view-mode-responsive-3x2\\u0022\\u003E\\n  \\n      \\n            \\u003Cdiv class=\\u0022field field--name-field-media-image field--type-image field--label-hidden field__item\\u0022\\u003E    \\u003Cimg loading=\\u0022lazy\\u0022 srcset=\\u0022/sites/default/files/styles/medium_3_2_600x400/public/home-grown-herbs.jpg?itok=TIYdyvVo 600w, /sites/default/files/styles/large_3_2_768x512/public/home-grown-herbs.jpg?itok=DupCzqXf 768w, /sites/default/files/styles/medium_3_2_2x/public/home-grown-herbs.jpg?itok=DRJ3g6-_ 1200w, /sites/default/files/styles/large_3_2_2x/public/home-grown-herbs.jpg?itok=hgoEh_6C 1536w\\u0022 sizes=\\u0022100vw\\u0022 width=\\u0022600\\u0022 height=\\u0022400\\u0022 src=\\u0022/sites/default/files/styles/large_3_2_768x512/public/home-grown-herbs.jpg?itok=DupCzqXf\\u0022 alt=\\u0022Fresh cut herbs including mint, parsley, thyme and dill\\u0022 /\\u003E\\n\\n\\n\\u003C/div\\u003E\\n      \\n  \\u003C/article\\u003E\\n\\u003C/div\\u003E\\n      \\n            \\u003Cdiv class=\\u0022clearfix text-formatted field field--name-body field--type-text-with-summary field--label-hidden field__item\\u0022\\u003E\\u003Cp\\u003EThere\\u0027s nothing like having your own supply of fresh herbs, readily available and close at hand to use while cooking. Whether you have a large garden or a small kitchen window sill, there\\u0027s always enough room for something home grown.\\u003C/p\\u003E\\n\\u003Ch2\\u003EOutdoors\\u003C/h2\\u003E\\n\\u003Ch3\\u003EMint\\u003C/h3\\u003E\\n\\u003Cp\\u003EMint is a great plant to grow as it\\u0027s hardy and can grow in almost any soil. Mint can grow wild, so keep it contained in a pot or it might spread and take over your whole garden.\\u003C/p\\u003E\\u003C/div\\u003E\\n      \\n  \\u003Cdiv class=\\u0022label-items field field--name-field-tags field--type-entity-reference field--label-above\\u0022\\u003E\\n    \\u003Cdiv class=\\u0022field__label\\u0022\\u003ETags\\u003C/div\\u003E\\n          \\u003Cdiv class=\\u0022field__items\\u0022\\u003E\\n              \\u003Cdiv class=\\u0022field__item\\u0022\\u003E\\u003Ca href=\\u0022/en/tags/grow-your-own\\u0022 hreflang=\\u0022en\\u0022\\u003EGrow your own\\u003C/a\\u003E\\u003C/div\\u003E\\n          \\u003Cdiv class=\\u0022field__item\\u0022\\u003E\\u003Ca href=\\u0022/en/tags/seasonal\\u0022 hreflang=\\u0022en\\u0022\\u003ESeasonal\\u003C/a\\u003E\\u003C/div\\u003E\\n          \\u003Cdiv class=\\u0022field__item\\u0022\\u003E\\u003Ca href=\\u0022/en/tags/herbs\\u0022 hreflang=\\u0022en\\u0022\\u003EHerbs\\u003C/a\\u003E\\u003C/div\\u003E\\n              \\u003C/div\\u003E\\n      \\u003C/div\\u003E\\n  \\u003Cdiv class=\\u0022node__links\\u0022\\u003E\\n    \\u003Cul class=\\u0022links inline\\u0022\\u003E\\u003Cli class=\\u0022node-readmore\\u0022\\u003E\\u003Ca href=\\u0022/en/articles/give-it-a-go-and-grow-your-own-herbs\\u0022 rel=\\u0022tag\\u0022 title=\\u0022Give it a go and grow your own herbs\\u0022 hreflang=\\u0022en\\u0022\\u003ERead more\\u003Cspan class=\\u0022visually-hidden\\u0022\\u003E about Give it a go and grow your own herbs\\u003C/span\\u003E\\u003C/a\\u003E\\u003C/li\\u003E\\u003C/ul\\u003E  \\u003C/div\\u003E\\n\\n  \\u003C/div\\u003E\\n\\n\\u003C/article\\u003E\\n',\n        url: 'https://umami.ddev.site/en/articles/give-it-a-go-and-grow-your-own-herbs',\n        author: 'Holly Foat',\n        cooking_time: [],\n        difficulty: [],\n        image: '/sites/default/files/home-grown-herbs.jpg',\n        ingredients: [],\n        preparation_time: [],\n        recipe_category: [],\n        servings: [],\n        summary: [],\n        tags: ['Grow your own', 'Seasonal', 'Herbs'],\n        title: 'Give it a go and grow your own herbs',\n        type: 'article',\n        id: 'entity:node/11:en',\n        score: 1,\n        excerpt: null,\n      },\n      {\n        rendered_item:\n          '\\n\\n\\u003Carticle class=\\u0022node node--type-article node--promoted node--view-mode-search-index\\u0022\\u003E\\n\\n  \\n            \\u003Ch2\\u003E\\n        \\u003Ca href=\\u0022/en/articles/dairy-free-and-delicious-milk-chocolate\\u0022 rel=\\u0022bookmark\\u0022\\u003E\\u003Cspan class=\\u0022field field--name-title field--type-string field--label-hidden\\u0022\\u003EDairy-free and delicious milk chocolate\\u003C/span\\u003E\\n\\u003C/a\\u003E\\n      \\u003C/h2\\u003E\\n        \\n\\n      \\u003Cfooter class=\\u0022node__meta\\u0022\\u003E\\n      \\u003Carticle class=\\u0022profile\\u0022\\u003E\\n  \\u003C/article\\u003E\\n\\n      \\u003Cdiv class=\\u0022node__submitted\\u0022\\u003E\\n        \\u003Cspan class=\\u0022by-author\\u0022\\u003Eby \\u003Cspan class=\\u0022field field--name-uid field--type-entity-reference field--label-hidden\\u0022\\u003E\\u003Cspan\\u003EUmami\\u003C/span\\u003E\\u003C/span\\u003E\\n\\u003C/span\\u003E 9th February 2024        \\n      \\u003C/div\\u003E\\n    \\u003C/footer\\u003E\\n  \\n  \\u003Cdiv class=\\u0022node__content\\u0022\\u003E\\n    \\n      \\u003Cdiv class=\\u0022label-items field field--name-field-tags field--type-entity-reference field--label-hidden field__items\\u0022\\u003E\\n              \\u003Cdiv class=\\u0022field__item\\u0022\\u003E\\u003Ca href=\\u0022/en/tags/vegan\\u0022 hreflang=\\u0022en\\u0022\\u003EVegan\\u003C/a\\u003E\\u003C/div\\u003E\\n              \\u003Cdiv class=\\u0022field__item\\u0022\\u003E\\u003Ca href=\\u0022/en/tags/chocolate\\u0022 hreflang=\\u0022en\\u0022\\u003EChocolate\\u003C/a\\u003E\\u003C/div\\u003E\\n          \\u003C/div\\u003E\\n  \\n            \\u003Cdiv class=\\u0022field field--name-field-media-image field--type-entity-reference field--label-hidden field__item\\u0022\\u003E\\u003Carticle class=\\u0022media media--type-image media--view-mode-responsive-3x2\\u0022\\u003E\\n  \\n      \\n            \\u003Cdiv class=\\u0022field field--name-field-media-image field--type-image field--label-hidden field__item\\u0022\\u003E    \\u003Cimg loading=\\u0022lazy\\u0022 srcset=\\u0022/sites/default/files/styles/medium_3_2_600x400/public/vegan-chocolate.jpg?itok=5OtYLaP2 600w, /sites/default/files/styles/large_3_2_768x512/public/vegan-chocolate.jpg?itok=GTd9mZAp 768w, /sites/default/files/styles/medium_3_2_2x/public/vegan-chocolate.jpg?itok=7lupNpfV 1200w, /sites/default/files/styles/large_3_2_2x/public/vegan-chocolate.jpg?itok=8pupJJuJ 1536w\\u0022 sizes=\\u0022100vw\\u0022 width=\\u0022600\\u0022 height=\\u0022400\\u0022 src=\\u0022/sites/default/files/styles/large_3_2_768x512/public/vegan-chocolate.jpg?itok=GTd9mZAp\\u0022 alt=\\u0022A delicious bar of dairy-free milk chocolate, broken into pieces\\u0022 /\\u003E\\n\\n\\n\\u003C/div\\u003E\\n      \\n  \\u003C/article\\u003E\\n\\u003C/div\\u003E\\n      \\n            \\u003Cdiv class=\\u0022clearfix text-formatted field field--name-body field--type-text-with-summary field--label-hidden field__item\\u0022\\u003E\\u003Cp\\u003EThe calendar is full of excuses for chocolate-lovers to indulge, from religious festivals to birthdays - and even World Chocolate Day on the 7th July. But for those who are vegan, or on dairy-free diets, there is no need to miss out, because there are plenty of delicious vegan chocolate varieties on offer.\\u003C/p\\u003E\\n\\u003Cp\\u003EDairy-free milk chocolate is made in largely the same way as regular chocolate, until the point when the milk is added. Cacao beans are roasted for a couple of hours until they develop a rich flavor. The outer shells are removed, and the interior nibs are ground to make a paste that can be mixed with cocoa butter to produce the desired percentage of chocolate. Flavorings, sugar and milk are added in different quantities to get the type of chocolate being produced. The chocolate is grainy at this point and needs to be mashed until it is smooth - this can take days! Finally, it is tempered through a process of heating and cooling until it is ready to eat.\\u003C/p\\u003E\\n\\u003Cp\\u003ESo, how do vegan chocolatiers get that creamy milk flavor and texture into their products?\\u003C/p\\u003E\\n\\u003Ch2\\u003ERice milk\\u003C/h2\\u003E\\n\\u003Cp\\u003EThe flavor of rice milk perfectly complements the cocoa beans and it was one of the first dairy milk alternatives to be used to create vegan milk chocolate. Rice milk is made from rice powder and is sometimes combined with hazelnut milk to create the correct texture and taste that is ideal for producing all kinds of chocolate bars.\\u003C/p\\u003E\\n\\u003Ch2\\u003ECoconut milk\\u003C/h2\\u003E\\n\\u003Cp\\u003ECoconut milk has to be the perfect ingredient for adding creaminess into a chocolate bar. With high fat levels, a sweet, but not overpowering taste and the correct consistency, coconut milk is a great choice for vegan milk chocolate. Chocolate made in this way will melt wonderfully for drizzling or dipping, and the coconut milk adds a slight tropical flavor that works well with other fruit flavors and nuts.\\u003C/p\\u003E\\n\\u003Ch2\\u003ESoy milk\\u003C/h2\\u003E\\n\\u003Cp\\u003ESoy has long been the mainstay of vegan and vegetarian diets, as it is rich in protein and is available in a wide variety of textures suitable for all kinds of dishes. Soy milk is widely available and is a great alternative to dairy milk in chocolate. It isn\\u2019t as rich in fat as some vegan milks, but does have a neutral taste that makes it easy to combine with almost any other flavor.\\u003C/p\\u003E\\n\\u003Ch2\\u003ENut milks\\u003C/h2\\u003E\\n\\u003Cp\\u003EMilks made from almonds and hazelnuts are easy to find on supermarket shelves, and are perfect for chocolate production. Like soy milk, they can be quite low in fat and therefore a little less creamy, but they have that nutty taste that goes so well with chocolate of all kinds.\\u003C/p\\u003E\\n\\u003Cp\\u003EMany manufacturers will use a combination of the above milks to create the perfect consistency for their product. Using this milk mixture they are able to produce all kinds of milk chocolates, including white chocolate.\\u003C/p\\u003E\\n\\u003C/div\\u003E\\n      \\n  \\u003C/div\\u003E\\n\\n\\u003C/article\\u003E\\n',\n        result:\n          '\\n\\n\\u003Carticle class=\\u0022node node--type-article node--promoted node--view-mode-teaser\\u0022\\u003E\\n\\n  \\n            \\u003Ch2\\u003E\\n        \\u003Ca href=\\u0022/en/articles/dairy-free-and-delicious-milk-chocolate\\u0022 rel=\\u0022bookmark\\u0022\\u003E\\u003Cspan class=\\u0022field field--name-title field--type-string field--label-hidden\\u0022\\u003EDairy-free and delicious milk chocolate\\u003C/span\\u003E\\n\\u003C/a\\u003E\\n      \\u003C/h2\\u003E\\n        \\n\\n      \\u003Cfooter class=\\u0022node__meta\\u0022\\u003E\\n      \\u003Carticle class=\\u0022profile\\u0022\\u003E\\n  \\u003C/article\\u003E\\n\\n      \\u003Cdiv class=\\u0022node__submitted\\u0022\\u003E\\n        \\u003Cspan class=\\u0022by-author\\u0022\\u003Eby \\u003Cspan class=\\u0022field field--name-uid field--type-entity-reference field--label-hidden\\u0022\\u003E\\u003Cspan\\u003EUmami\\u003C/span\\u003E\\u003C/span\\u003E\\n\\u003C/span\\u003E 9th February 2024        \\n      \\u003C/div\\u003E\\n    \\u003C/footer\\u003E\\n  \\n  \\u003Cdiv class=\\u0022node__content\\u0022\\u003E\\n    \\n            \\u003Cdiv class=\\u0022field field--name-field-media-image field--type-entity-reference field--label-hidden field__item\\u0022\\u003E\\u003Carticle class=\\u0022media media--type-image media--view-mode-responsive-3x2\\u0022\\u003E\\n  \\n      \\n            \\u003Cdiv class=\\u0022field field--name-field-media-image field--type-image field--label-hidden field__item\\u0022\\u003E    \\u003Cimg loading=\\u0022lazy\\u0022 srcset=\\u0022/sites/default/files/styles/medium_3_2_600x400/public/vegan-chocolate.jpg?itok=5OtYLaP2 600w, /sites/default/files/styles/large_3_2_768x512/public/vegan-chocolate.jpg?itok=GTd9mZAp 768w, /sites/default/files/styles/medium_3_2_2x/public/vegan-chocolate.jpg?itok=7lupNpfV 1200w, /sites/default/files/styles/large_3_2_2x/public/vegan-chocolate.jpg?itok=8pupJJuJ 1536w\\u0022 sizes=\\u0022100vw\\u0022 width=\\u0022600\\u0022 height=\\u0022400\\u0022 src=\\u0022/sites/default/files/styles/large_3_2_768x512/public/vegan-chocolate.jpg?itok=GTd9mZAp\\u0022 alt=\\u0022A delicious bar of dairy-free milk chocolate, broken into pieces\\u0022 /\\u003E\\n\\n\\n\\u003C/div\\u003E\\n      \\n  \\u003C/article\\u003E\\n\\u003C/div\\u003E\\n      \\n            \\u003Cdiv class=\\u0022clearfix text-formatted field field--name-body field--type-text-with-summary field--label-hidden field__item\\u0022\\u003E\\u003Cp\\u003EThe calendar is full of excuses for chocolate-lovers to indulge, from religious festivals to birthdays - and even World Chocolate Day on the 7th July. But for those who are vegan, or on dairy-free diets, there is no need to miss out, because there are plenty of delicious vegan chocolate varieties on offer.\\u003C/p\\u003E\\u003C/div\\u003E\\n      \\n  \\u003Cdiv class=\\u0022label-items field field--name-field-tags field--type-entity-reference field--label-above\\u0022\\u003E\\n    \\u003Cdiv class=\\u0022field__label\\u0022\\u003ETags\\u003C/div\\u003E\\n          \\u003Cdiv class=\\u0022field__items\\u0022\\u003E\\n              \\u003Cdiv class=\\u0022field__item\\u0022\\u003E\\u003Ca href=\\u0022/en/tags/vegan\\u0022 hreflang=\\u0022en\\u0022\\u003EVegan\\u003C/a\\u003E\\u003C/div\\u003E\\n          \\u003Cdiv class=\\u0022field__item\\u0022\\u003E\\u003Ca href=\\u0022/en/tags/chocolate\\u0022 hreflang=\\u0022en\\u0022\\u003EChocolate\\u003C/a\\u003E\\u003C/div\\u003E\\n              \\u003C/div\\u003E\\n      \\u003C/div\\u003E\\n  \\u003Cdiv class=\\u0022node__links\\u0022\\u003E\\n    \\u003Cul class=\\u0022links inline\\u0022\\u003E\\u003Cli class=\\u0022node-readmore\\u0022\\u003E\\u003Ca href=\\u0022/en/articles/dairy-free-and-delicious-milk-chocolate\\u0022 rel=\\u0022tag\\u0022 title=\\u0022Dairy-free and delicious milk chocolate\\u0022 hreflang=\\u0022en\\u0022\\u003ERead more\\u003Cspan class=\\u0022visually-hidden\\u0022\\u003E about Dairy-free and delicious milk chocolate\\u003C/span\\u003E\\u003C/a\\u003E\\u003C/li\\u003E\\u003C/ul\\u003E  \\u003C/div\\u003E\\n\\n  \\u003C/div\\u003E\\n\\n\\u003C/article\\u003E\\n',\n        url: 'https://umami.ddev.site/en/articles/dairy-free-and-delicious-milk-chocolate',\n        author: 'Umami',\n        cooking_time: [],\n        difficulty: [],\n        image: '/sites/default/files/vegan-chocolate.jpg',\n        ingredients: [],\n        preparation_time: [],\n        recipe_category: [],\n        servings: [],\n        summary: [],\n        tags: ['Vegan', 'Chocolate'],\n        title: 'Dairy-free and delicious milk chocolate',\n        type: 'article',\n        id: 'entity:node/12:en',\n        score: 1,\n        excerpt: null,\n      },\n      {\n        rendered_item:\n          '\\n\\n\\u003Carticle class=\\u0022node node--type-article node--promoted node--view-mode-search-index\\u0022\\u003E\\n\\n  \\n            \\u003Ch2\\u003E\\n        \\u003Ca href=\\u0022/en/articles/the-real-deal-for-supermarket-savvy-shopping\\u0022 rel=\\u0022bookmark\\u0022\\u003E\\u003Cspan class=\\u0022field field--name-title field--type-string field--label-hidden\\u0022\\u003EThe real deal for supermarket savvy shopping\\u003C/span\\u003E\\n\\u003C/a\\u003E\\n      \\u003C/h2\\u003E\\n        \\n\\n      \\u003Cfooter class=\\u0022node__meta\\u0022\\u003E\\n      \\u003Carticle class=\\u0022profile\\u0022\\u003E\\n  \\u003C/article\\u003E\\n\\n      \\u003Cdiv class=\\u0022node__submitted\\u0022\\u003E\\n        \\u003Cspan class=\\u0022by-author\\u0022\\u003Eby \\u003Cspan class=\\u0022field field--name-uid field--type-entity-reference field--label-hidden\\u0022\\u003E\\u003Cspan\\u003EMegan Collins \\u2026\\u003C/span\\u003E\\u003C/span\\u003E\\n\\u003C/span\\u003E 9th February 2024        \\n      \\u003C/div\\u003E\\n    \\u003C/footer\\u003E\\n  \\n  \\u003Cdiv class=\\u0022node__content\\u0022\\u003E\\n    \\n      \\u003Cdiv class=\\u0022label-items field field--name-field-tags field--type-entity-reference field--label-hidden field__items\\u0022\\u003E\\n              \\u003Cdiv class=\\u0022field__item\\u0022\\u003E\\u003Ca href=\\u0022/en/tags/supermarkets\\u0022 hreflang=\\u0022en\\u0022\\u003ESupermarkets\\u003C/a\\u003E\\u003C/div\\u003E\\n              \\u003Cdiv class=\\u0022field__item\\u0022\\u003E\\u003Ca href=\\u0022/en/tags/shopping\\u0022 hreflang=\\u0022en\\u0022\\u003EShopping\\u003C/a\\u003E\\u003C/div\\u003E\\n          \\u003C/div\\u003E\\n  \\n            \\u003Cdiv class=\\u0022field field--name-field-media-image field--type-entity-reference field--label-hidden field__item\\u0022\\u003E\\u003Carticle class=\\u0022media media--type-image media--view-mode-responsive-3x2\\u0022\\u003E\\n  \\n      \\n            \\u003Cdiv class=\\u0022field field--name-field-media-image field--type-image field--label-hidden field__item\\u0022\\u003E    \\u003Cimg loading=\\u0022lazy\\u0022 srcset=\\u0022/sites/default/files/styles/medium_3_2_600x400/public/supermarket-savvy-umami.jpg?itok=NMJCitwz 600w, /sites/default/files/styles/large_3_2_768x512/public/supermarket-savvy-umami.jpg?itok=TI8wsaes 768w, /sites/default/files/styles/medium_3_2_2x/public/supermarket-savvy-umami.jpg?itok=iYx8gVe4 1200w, /sites/default/files/styles/large_3_2_2x/public/supermarket-savvy-umami.jpg?itok=G0Ti0pcX 1536w\\u0022 sizes=\\u0022100vw\\u0022 width=\\u0022600\\u0022 height=\\u0022400\\u0022 src=\\u0022/sites/default/files/styles/large_3_2_768x512/public/supermarket-savvy-umami.jpg?itok=TI8wsaes\\u0022 alt=\\u0022Leafy greens presented on supermarket produce shelving\\u0022 /\\u003E\\n\\n\\n\\u003C/div\\u003E\\n      \\n  \\u003C/article\\u003E\\n\\u003C/div\\u003E\\n      \\n            \\u003Cdiv class=\\u0022clearfix text-formatted field field--name-body field--type-text-with-summary field--label-hidden field__item\\u0022\\u003E\\u003Cp\\u003EThis may not surprise you - but your supermarket is a hot bed of marketing mayhem, designed to improve their profit and to encourage the consumer to spend more than they intended. The tricks that all supermarkets employ are sometimes sensible ploys that any retailer should do to improve sales - but some may be more subtle and less obvious than you might think.\\u003C/p\\u003E\\n\\u003Cp\\u003EWith consumer awareness articles and documentaries frequently picking up on this topic, it\\u0027s likely the case that retailers find it harder to get away with the more obvious ploys. We are becoming ever more savvy consumers and there\\u0027s probably not a great deal that gets past us. But here\\u0027s a few retail tricks to keep in mind when you are rushing around the weekly supermarket stock-up.\\u003C/p\\u003E\\n\\u003Ch2\\u003ELost essentials\\u003C/h2\\u003E\\n\\u003Cp\\u003EThe layout of your supermarket may make sense to you when you have shopped there for a while. But for newcomers trying to find essentials, it may make very little sense at all. Some supermarkets have noted that people come to their store to buy milk, bread, or eggs and that by hiding these essentials in the far reaches of the store, they encourage the newcomer to wander the aisles - picking up other items as they go.\\u003C/p\\u003E\\n\\u003Cp\\u003ESure, this can be great for nudging the memory on essentials you might otherwise forget, but for saving the pennies it\\u0027s tough to stick to grabbing only the things you came for and the supermarkets know it!\\u003C/p\\u003E\\n\\u003Cblockquote\\u003E\\u003Cp\\u003E\\nOur tip: Make your shopping list before leaving the house, checking what you need and sticking to that list. You could be amazed by what you\\u0027ll save over time.\\n\\u003C/p\\u003E\\u003C/blockquote\\u003E\\n\\u003Ch2\\u003ENonsensical multibuys\\u003C/h2\\u003E\\n\\u003Cp\\u003EBuy one, get one free; two for \\u00a32 and meal deals. They all seem like a great deal. But in some cases these are loss leaders that are positioned to encourage you to take up the deal and buy other stuff while you are there. In other cases, deals for multi-buy or discounts on specific pack sizes might seem like a bargain, until you compare the pricing like-for-like on similar brands or with pack sizes for the same brand. These deals can mean you end up paying less but is it less for something you don\\u0027t really need and in some cases you can end up paying more for the item. Remember, the supermarkets know you are often in a hurry and might not have the time to take in the full picture.\\u003C/p\\u003E\\n\\u003Cblockquote\\u003E\\u003Cp\\u003EOur tip: Don\\u0027t be rushed, take the time to read the small print. The large print will draw you in but if you read the label small print, you should find the price per 100 grams or per ounce/litre and you\\u0027ll be surprised how often the headline deals are actually more expensive than just buying a different package type or size of the product.\\u003C/p\\u003E\\n\\u003C/blockquote\\u003E\\n\\u003Ch2\\u003EUnderstanding our shopping habits\\u003C/h2\\u003E\\n\\u003Cp\\u003EThe cheapest products in a supermarket are almost always positioned on the bottom of the shelving where you\\u0027ll need to bend over to pick it up. You also may not be able to easily read the price ticket. Most people will shop on the middle rows because it is easier and often quicker. These are where the highest profit items are kept and they are the ones the supermarkets want you to buy.\\u003C/p\\u003E\\n\\u003Cp\\u003EThe layout, the music, the colors, and the product types are all decided based on principles laid down by industry experts on people - psychologists and behavioral experts who know how we think. And so the savvy shopper will certainly be able to take advantage of great deals in their weekly shop, but it takes a little time and effort just to be more aware of what we are being encouraged to reach for in the aisles.\\u003C/p\\u003E\\n\\u003C/div\\u003E\\n      \\n  \\u003C/div\\u003E\\n\\n\\u003C/article\\u003E\\n',\n        result:\n          '\\n\\n\\u003Carticle class=\\u0022node node--type-article node--promoted node--view-mode-teaser\\u0022\\u003E\\n\\n  \\n            \\u003Ch2\\u003E\\n        \\u003Ca href=\\u0022/en/articles/the-real-deal-for-supermarket-savvy-shopping\\u0022 rel=\\u0022bookmark\\u0022\\u003E\\u003Cspan class=\\u0022field field--name-title field--type-string field--label-hidden\\u0022\\u003EThe real deal for supermarket savvy shopping\\u003C/span\\u003E\\n\\u003C/a\\u003E\\n      \\u003C/h2\\u003E\\n        \\n\\n      \\u003Cfooter class=\\u0022node__meta\\u0022\\u003E\\n      \\u003Carticle class=\\u0022profile\\u0022\\u003E\\n  \\u003C/article\\u003E\\n\\n      \\u003Cdiv class=\\u0022node__submitted\\u0022\\u003E\\n        \\u003Cspan class=\\u0022by-author\\u0022\\u003Eby \\u003Cspan class=\\u0022field field--name-uid field--type-entity-reference field--label-hidden\\u0022\\u003E\\u003Cspan\\u003EMegan Collins \\u2026\\u003C/span\\u003E\\u003C/span\\u003E\\n\\u003C/span\\u003E 9th February 2024        \\n      \\u003C/div\\u003E\\n    \\u003C/footer\\u003E\\n  \\n  \\u003Cdiv class=\\u0022node__content\\u0022\\u003E\\n    \\n            \\u003Cdiv class=\\u0022field field--name-field-media-image field--type-entity-reference field--label-hidden field__item\\u0022\\u003E\\u003Carticle class=\\u0022media media--type-image media--view-mode-responsive-3x2\\u0022\\u003E\\n  \\n      \\n            \\u003Cdiv class=\\u0022field field--name-field-media-image field--type-image field--label-hidden field__item\\u0022\\u003E    \\u003Cimg loading=\\u0022lazy\\u0022 srcset=\\u0022/sites/default/files/styles/medium_3_2_600x400/public/supermarket-savvy-umami.jpg?itok=NMJCitwz 600w, /sites/default/files/styles/large_3_2_768x512/public/supermarket-savvy-umami.jpg?itok=TI8wsaes 768w, /sites/default/files/styles/medium_3_2_2x/public/supermarket-savvy-umami.jpg?itok=iYx8gVe4 1200w, /sites/default/files/styles/large_3_2_2x/public/supermarket-savvy-umami.jpg?itok=G0Ti0pcX 1536w\\u0022 sizes=\\u0022100vw\\u0022 width=\\u0022600\\u0022 height=\\u0022400\\u0022 src=\\u0022/sites/default/files/styles/large_3_2_768x512/public/supermarket-savvy-umami.jpg?itok=TI8wsaes\\u0022 alt=\\u0022Leafy greens presented on supermarket produce shelving\\u0022 /\\u003E\\n\\n\\n\\u003C/div\\u003E\\n      \\n  \\u003C/article\\u003E\\n\\u003C/div\\u003E\\n      \\n            \\u003Cdiv class=\\u0022clearfix text-formatted field field--name-body field--type-text-with-summary field--label-hidden field__item\\u0022\\u003E\\u003Cp\\u003EThis may not surprise you - but your supermarket is a hot bed of marketing mayhem, designed to improve their profit and to encourage the consumer to spend more than they intended. The tricks that all supermarkets employ are sometimes sensible ploys that any retailer should do to improve sales - but some may be more subtle and less obvious than you might think.\\u003C/p\\u003E\\u003C/div\\u003E\\n      \\n  \\u003Cdiv class=\\u0022label-items field field--name-field-tags field--type-entity-reference field--label-above\\u0022\\u003E\\n    \\u003Cdiv class=\\u0022field__label\\u0022\\u003ETags\\u003C/div\\u003E\\n          \\u003Cdiv class=\\u0022field__items\\u0022\\u003E\\n              \\u003Cdiv class=\\u0022field__item\\u0022\\u003E\\u003Ca href=\\u0022/en/tags/supermarkets\\u0022 hreflang=\\u0022en\\u0022\\u003ESupermarkets\\u003C/a\\u003E\\u003C/div\\u003E\\n          \\u003Cdiv class=\\u0022field__item\\u0022\\u003E\\u003Ca href=\\u0022/en/tags/shopping\\u0022 hreflang=\\u0022en\\u0022\\u003EShopping\\u003C/a\\u003E\\u003C/div\\u003E\\n              \\u003C/div\\u003E\\n      \\u003C/div\\u003E\\n  \\u003Cdiv class=\\u0022node__links\\u0022\\u003E\\n    \\u003Cul class=\\u0022links inline\\u0022\\u003E\\u003Cli class=\\u0022node-readmore\\u0022\\u003E\\u003Ca href=\\u0022/en/articles/the-real-deal-for-supermarket-savvy-shopping\\u0022 rel=\\u0022tag\\u0022 title=\\u0022The real deal for supermarket savvy shopping\\u0022 hreflang=\\u0022en\\u0022\\u003ERead more\\u003Cspan class=\\u0022visually-hidden\\u0022\\u003E about The real deal for supermarket savvy shopping\\u003C/span\\u003E\\u003C/a\\u003E\\u003C/li\\u003E\\u003C/ul\\u003E  \\u003C/div\\u003E\\n\\n  \\u003C/div\\u003E\\n\\n\\u003C/article\\u003E\\n',\n        url: 'https://umami.ddev.site/en/articles/the-real-deal-for-supermarket-savvy-shopping',\n        author: 'Megan Collins Quinlan',\n        cooking_time: [],\n        difficulty: [],\n        image: '/sites/default/files/supermarket-savvy-umami.jpg',\n        ingredients: [],\n        preparation_time: [],\n        recipe_category: [],\n        servings: [],\n        summary: [],\n        tags: ['Supermarkets', 'Shopping'],\n        title: 'The real deal for supermarket savvy shopping',\n        type: 'article',\n        id: 'entity:node/13:en',\n        score: 1,\n        excerpt: null,\n      },\n      {\n        rendered_item:\n          '\\n\\n\\u003Carticle class=\\u0022node node--type-article node--promoted node--view-mode-search-index\\u0022\\u003E\\n\\n  \\n            \\u003Ch2\\u003E\\n        \\u003Ca href=\\u0022/en/articles/the-umami-guide-to-our-favourite-mushrooms\\u0022 rel=\\u0022bookmark\\u0022\\u003E\\u003Cspan class=\\u0022field field--name-title field--type-string field--label-hidden\\u0022\\u003EThe Umami guide to our favorite mushrooms\\u003C/span\\u003E\\n\\u003C/a\\u003E\\n      \\u003C/h2\\u003E\\n        \\n\\n      \\u003Cfooter class=\\u0022node__meta\\u0022\\u003E\\n      \\u003Carticle class=\\u0022profile\\u0022\\u003E\\n  \\u003C/article\\u003E\\n\\n      \\u003Cdiv class=\\u0022node__submitted\\u0022\\u003E\\n        \\u003Cspan class=\\u0022by-author\\u0022\\u003Eby \\u003Cspan class=\\u0022field field--name-uid field--type-entity-reference field--label-hidden\\u0022\\u003E\\u003Cspan\\u003EUmami\\u003C/span\\u003E\\u003C/span\\u003E\\n\\u003C/span\\u003E 9th February 2024        \\n      \\u003C/div\\u003E\\n    \\u003C/footer\\u003E\\n  \\n  \\u003Cdiv class=\\u0022node__content\\u0022\\u003E\\n    \\n      \\u003Cdiv class=\\u0022label-items field field--name-field-tags field--type-entity-reference field--label-hidden field__items\\u0022\\u003E\\n              \\u003Cdiv class=\\u0022field__item\\u0022\\u003E\\u003Ca href=\\u0022/en/tags/mushrooms\\u0022 hreflang=\\u0022en\\u0022\\u003EMushrooms\\u003C/a\\u003E\\u003C/div\\u003E\\n              \\u003Cdiv class=\\u0022field__item\\u0022\\u003E\\u003Ca href=\\u0022/en/tags/vegetarian\\u0022 hreflang=\\u0022en\\u0022\\u003EVegetarian\\u003C/a\\u003E\\u003C/div\\u003E\\n          \\u003C/div\\u003E\\n  \\n            \\u003Cdiv class=\\u0022field field--name-field-media-image field--type-entity-reference field--label-hidden field__item\\u0022\\u003E\\u003Carticle class=\\u0022media media--type-image media--view-mode-responsive-3x2\\u0022\\u003E\\n  \\n      \\n            \\u003Cdiv class=\\u0022field field--name-field-media-image field--type-image field--label-hidden field__item\\u0022\\u003E    \\u003Cimg loading=\\u0022lazy\\u0022 srcset=\\u0022/sites/default/files/styles/medium_3_2_600x400/public/mushrooms-umami.jpg?itok=jIHR9Dyw 600w, /sites/default/files/styles/large_3_2_768x512/public/mushrooms-umami.jpg?itok=pLJttOjw 768w, /sites/default/files/styles/medium_3_2_2x/public/mushrooms-umami.jpg?itok=zwIR13As 1200w, /sites/default/files/styles/large_3_2_2x/public/mushrooms-umami.jpg?itok=GWB-G2mu 1536w\\u0022 sizes=\\u0022100vw\\u0022 width=\\u0022600\\u0022 height=\\u0022400\\u0022 src=\\u0022/sites/default/files/styles/large_3_2_768x512/public/mushrooms-umami.jpg?itok=pLJttOjw\\u0022 alt=\\u0022A delightful selection of mushroom varieties laid out on a simple wooden plate\\u0022 /\\u003E\\n\\n\\n\\u003C/div\\u003E\\n      \\n  \\u003C/article\\u003E\\n\\u003C/div\\u003E\\n      \\n            \\u003Cdiv class=\\u0022clearfix text-formatted field field--name-body field--type-text-with-summary field--label-hidden field__item\\u0022\\u003E\\u003Cp\\u003EWe think mushrooms are one of the most enjoyable ingredients to cook with. There are plenty of edible varieties to try, each with their own distinctive shape, size, and taste. And with curious names such as chanterelle, the gypsy, horn of plenty, or hen of the woods, who wouldn\\u0027t want to know more about cooking with the mighty mushroom?\\u003C/p\\u003E\\n\\u003Cp\\u003EOne of the best things about mushrooms is their versatility. They can be fried, roasted, grilled, steamed, or even cooked in the microwave. And they can be served as the main ingredient for a dish, or simply added as part of the mix. This makes mushrooms an ideal choice for creating absolutely delicious vegetarian dishes.\\u003C/p\\u003E\\n\\u003Cp\\u003ESo let\\u0027s take a look at some of our favorite types of mushroom. You might not have tried cooking with them before but don\\u0027t let that put you off. With their delicious, distinctive flavors you can easily transform soups, starters, sauces and create amazing pasta, or stir-fry dishes.\\u003C/p\\u003E\\n\\u003Cp\\u003ETry the lovely \\u003Cstrong\\u003Eshiitake\\u003C/strong\\u003E. Used in Asian cooking, these can be purchased dried and rehydrated for a strong, deep flavor. Or buy fresh and add to soups and stir-fries. Not only does this mushroom have an intense flavor, it looks lovely too. The deep brown and smooth shapes will provide texture to your meal. In their dried form and rehydrated, these are the perfect addition for a deep and flavorful stock for a risotto.\\u003C/p\\u003E\\n\\u003Cp\\u003EThe gorgeous sunny \\u003Cstrong\\u003Echanterelle\\u003C/strong\\u003E with its yellow flesh has a fruity flavor - but it is worth mentioning that there are many lookalikes out there and care should be taken to ensure you\\u0027re eating the right ones. These look great in an omelette or an Asian soup to complement the yellow tones.\\u003C/p\\u003E\\n\\u003Cp\\u003EThe brown \\u003Cstrong\\u003Emorel\\u003C/strong\\u003E offers a meaty and distinctive flavor and you\\u0027ll probably love how extraordinary they look in a meal. The morel is a more popular mushroom during the spring, when their availability is high.\\u003C/p\\u003E\\n\\u003Cp\\u003EFor delicacy try the \\u003Cstrong\\u003Eenoki\\u003C/strong\\u003E with its tiny white heads that grow in a bunch. These can even be eaten raw in salads. Finally, you can choose the popular \\u003Cstrong\\u003Eoyster\\u003C/strong\\u003E mushroom. They are named thus because they look nothing like a mushroom and resemble the innards of an oyster and their sweet flavor is delicious.\\u003C/p\\u003E\\n\\u003C/div\\u003E\\n      \\n  \\u003C/div\\u003E\\n\\n\\u003C/article\\u003E\\n',\n        result:\n          '\\n\\n\\u003Carticle class=\\u0022node node--type-article node--promoted node--view-mode-teaser\\u0022\\u003E\\n\\n  \\n            \\u003Ch2\\u003E\\n        \\u003Ca href=\\u0022/en/articles/the-umami-guide-to-our-favourite-mushrooms\\u0022 rel=\\u0022bookmark\\u0022\\u003E\\u003Cspan class=\\u0022field field--name-title field--type-string field--label-hidden\\u0022\\u003EThe Umami guide to our favorite mushrooms\\u003C/span\\u003E\\n\\u003C/a\\u003E\\n      \\u003C/h2\\u003E\\n        \\n\\n      \\u003Cfooter class=\\u0022node__meta\\u0022\\u003E\\n      \\u003Carticle class=\\u0022profile\\u0022\\u003E\\n  \\u003C/article\\u003E\\n\\n      \\u003Cdiv class=\\u0022node__submitted\\u0022\\u003E\\n        \\u003Cspan class=\\u0022by-author\\u0022\\u003Eby \\u003Cspan class=\\u0022field field--name-uid field--type-entity-reference field--label-hidden\\u0022\\u003E\\u003Cspan\\u003EUmami\\u003C/span\\u003E\\u003C/span\\u003E\\n\\u003C/span\\u003E 9th February 2024        \\n      \\u003C/div\\u003E\\n    \\u003C/footer\\u003E\\n  \\n  \\u003Cdiv class=\\u0022node__content\\u0022\\u003E\\n    \\n            \\u003Cdiv class=\\u0022field field--name-field-media-image field--type-entity-reference field--label-hidden field__item\\u0022\\u003E\\u003Carticle class=\\u0022media media--type-image media--view-mode-responsive-3x2\\u0022\\u003E\\n  \\n      \\n            \\u003Cdiv class=\\u0022field field--name-field-media-image field--type-image field--label-hidden field__item\\u0022\\u003E    \\u003Cimg loading=\\u0022lazy\\u0022 srcset=\\u0022/sites/default/files/styles/medium_3_2_600x400/public/mushrooms-umami.jpg?itok=jIHR9Dyw 600w, /sites/default/files/styles/large_3_2_768x512/public/mushrooms-umami.jpg?itok=pLJttOjw 768w, /sites/default/files/styles/medium_3_2_2x/public/mushrooms-umami.jpg?itok=zwIR13As 1200w, /sites/default/files/styles/large_3_2_2x/public/mushrooms-umami.jpg?itok=GWB-G2mu 1536w\\u0022 sizes=\\u0022100vw\\u0022 width=\\u0022600\\u0022 height=\\u0022400\\u0022 src=\\u0022/sites/default/files/styles/large_3_2_768x512/public/mushrooms-umami.jpg?itok=pLJttOjw\\u0022 alt=\\u0022A delightful selection of mushroom varieties laid out on a simple wooden plate\\u0022 /\\u003E\\n\\n\\n\\u003C/div\\u003E\\n      \\n  \\u003C/article\\u003E\\n\\u003C/div\\u003E\\n      \\n            \\u003Cdiv class=\\u0022clearfix text-formatted field field--name-body field--type-text-with-summary field--label-hidden field__item\\u0022\\u003E\\u003Cp\\u003EWe think mushrooms are one of the most enjoyable ingredients to cook with. There are plenty of edible varieties to try, each with their own distinctive shape, size, and taste. And with curious names such as chanterelle, the gypsy, horn of plenty, or hen of the woods, who wouldn\\u0027t want to know more about cooking with the mighty mushroom?\\u003C/p\\u003E\\u003C/div\\u003E\\n      \\n  \\u003Cdiv class=\\u0022label-items field field--name-field-tags field--type-entity-reference field--label-above\\u0022\\u003E\\n    \\u003Cdiv class=\\u0022field__label\\u0022\\u003ETags\\u003C/div\\u003E\\n          \\u003Cdiv class=\\u0022field__items\\u0022\\u003E\\n              \\u003Cdiv class=\\u0022field__item\\u0022\\u003E\\u003Ca href=\\u0022/en/tags/mushrooms\\u0022 hreflang=\\u0022en\\u0022\\u003EMushrooms\\u003C/a\\u003E\\u003C/div\\u003E\\n          \\u003Cdiv class=\\u0022field__item\\u0022\\u003E\\u003Ca href=\\u0022/en/tags/vegetarian\\u0022 hreflang=\\u0022en\\u0022\\u003EVegetarian\\u003C/a\\u003E\\u003C/div\\u003E\\n              \\u003C/div\\u003E\\n      \\u003C/div\\u003E\\n  \\u003Cdiv class=\\u0022node__links\\u0022\\u003E\\n    \\u003Cul class=\\u0022links inline\\u0022\\u003E\\u003Cli class=\\u0022node-readmore\\u0022\\u003E\\u003Ca href=\\u0022/en/articles/the-umami-guide-to-our-favourite-mushrooms\\u0022 rel=\\u0022tag\\u0022 title=\\u0022The Umami guide to our favorite mushrooms\\u0022 hreflang=\\u0022en\\u0022\\u003ERead more\\u003Cspan class=\\u0022visually-hidden\\u0022\\u003E about The Umami guide to our favorite mushrooms\\u003C/span\\u003E\\u003C/a\\u003E\\u003C/li\\u003E\\u003C/ul\\u003E  \\u003C/div\\u003E\\n\\n  \\u003C/div\\u003E\\n\\n\\u003C/article\\u003E\\n',\n        url: 'https://umami.ddev.site/en/articles/the-umami-guide-to-our-favourite-mushrooms',\n        author: 'Umami',\n        cooking_time: [],\n        difficulty: [],\n        image: '/sites/default/files/mushrooms-umami.jpg',\n        ingredients: [],\n        preparation_time: [],\n        recipe_category: [],\n        servings: [],\n        summary: [],\n        tags: ['Mushrooms', 'Vegetarian'],\n        title: 'The Umami guide to our favorite mushrooms',\n        type: 'article',\n        id: 'entity:node/14:en',\n        score: 1,\n        excerpt: null,\n      },\n    ],\n    search_results_per_page: 5,\n    search_results_count: 20,\n    search_results_page: 0,\n    search_results_pages: 4,\n    facets: [\n      {\n        label: 'Author',\n        key: 'author',\n        count: 5,\n        active_values: [],\n        results: [\n          {\n            label: 'Umami',\n            count: 15,\n            key: 'Umami',\n            active: false,\n            children: [],\n          },\n          {\n            label: 'Megan Collins Quinlan',\n            count: 2,\n            key: 'Megan Collins Quinlan',\n            active: false,\n            children: [],\n          },\n          {label: 'admin', count: 1, key: 'admin', active: false, children: []},\n          {\n            label: 'Holly Foat',\n            count: 1,\n            key: 'Holly Foat',\n            active: false,\n            children: [],\n          },\n          {\n            label: 'Samuel Adamson',\n            count: 1,\n            key: 'Samuel Adamson',\n            active: false,\n            children: [],\n          },\n        ],\n        settings: {\n          widget: {\n            show_numbers: false,\n            preferAttributes: 0,\n            showReset: 0,\n            resetText: 'Reset (@count)',\n            collapsible: 0,\n            closed: 0,\n            showCountInCollapseLabel: 0,\n          },\n          show_title: true,\n          empty_behavior: {behavior: 'none'},\n          url_alias: 'author',\n          show_only_one_result: false,\n          hard_limit: 0,\n          missing: false,\n          missing_label: 'others',\n        },\n      },\n      {\n        label: 'Cooking time',\n        key: 'cooking_time',\n        count: 5,\n        active_values: [],\n        results: [\n          {label: '20', count: 5, key: '20', active: false, children: []},\n          {label: '15', count: 2, key: '15', active: false, children: []},\n          {label: '30', count: 1, key: '30', active: false, children: []},\n          {label: '50', count: 1, key: '50', active: false, children: []},\n          {label: '60', count: 1, key: '60', active: false, children: []},\n        ],\n        settings: {\n          widget: {\n            show_numbers: true,\n            preferAttributes: 0,\n            showReset: 1,\n            resetText: 'Reset (@count)',\n            collapsible: 1,\n            closed: 1,\n            showCountInCollapseLabel: 1,\n            useRadios: 0,\n          },\n          show_title: true,\n          empty_behavior: {behavior: 'none'},\n          url_alias: 'cooking_time',\n          show_only_one_result: false,\n          hard_limit: 0,\n          missing: false,\n          missing_label: 'others',\n        },\n      },\n      {\n        label: 'Difficulty',\n        key: 'difficulty',\n        count: 2,\n        active_values: [],\n        results: [\n          {\n            label: 'medium',\n            count: 6,\n            key: 'medium',\n            active: false,\n            children: [],\n          },\n          {label: 'easy', count: 4, key: 'easy', active: false, children: []},\n        ],\n        settings: {\n          widget: {\n            show_numbers: true,\n            preferAttributes: 0,\n            showReset: 1,\n            resetText: 'Reset (@count)',\n            collapsible: 1,\n            closed: 1,\n            showCountInCollapseLabel: 1,\n            useRadios: 0,\n          },\n          show_title: true,\n          empty_behavior: {behavior: 'none'},\n          url_alias: 'difficulty',\n          show_only_one_result: false,\n          hard_limit: 0,\n          missing: false,\n          missing_label: 'others',\n        },\n      },\n      {\n        label: 'Ingredients',\n        key: 'ingredients',\n        count: 109,\n        active_values: [],\n        results: [\n          {\n            label: ' 1 garlic clove',\n            count: 2,\n            key: ' 1 garlic clove',\n            active: false,\n            children: [],\n          },\n          {\n            label: '1 onion',\n            count: 2,\n            key: '1 onion',\n            active: false,\n            children: [],\n          },\n          {\n            label: '1 bell pepper',\n            count: 1,\n            key: '1 bell pepper',\n            active: false,\n            children: [],\n          },\n          {\n            label: '1 bulb garlic',\n            count: 1,\n            key: '1 bulb garlic',\n            active: false,\n            children: [],\n          },\n          {\n            label: '1 can beans (optional)',\n            count: 1,\n            key: '1 can beans (optional)',\n            active: false,\n            children: [],\n          },\n          {\n            label: '1 carrot',\n            count: 1,\n            key: '1 carrot',\n            active: false,\n            children: [],\n          },\n          {\n            label: ' 1 cinnamon stick',\n            count: 1,\n            key: ' 1 cinnamon stick',\n            active: false,\n            children: [],\n          },\n          {\n            label: ' 1 green bell pepper',\n            count: 1,\n            key: ' 1 green bell pepper',\n            active: false,\n            children: [],\n          },\n          {\n            label: ' 1 lemon',\n            count: 1,\n            key: ' 1 lemon',\n            active: false,\n            children: [],\n          },\n          {\n            label: ' 1 onion',\n            count: 1,\n            key: ' 1 onion',\n            active: false,\n            children: [],\n          },\n          {\n            label: ' 1 pack vegetarian sausages',\n            count: 1,\n            key: ' 1 pack vegetarian sausages',\n            active: false,\n            children: [],\n          },\n          {\n            label: ' 1 piece lemon peel',\n            count: 1,\n            key: ' 1 piece lemon peel',\n            active: false,\n            children: [],\n          },\n          {\n            label: ' 1 pinch sugar',\n            count: 1,\n            key: ' 1 pinch sugar',\n            active: false,\n            children: [],\n          },\n          {\n            label: ' 1 red bell pepper',\n            count: 1,\n            key: ' 1 red bell pepper',\n            active: false,\n            children: [],\n          },\n          {\n            label: ' 1 sachet dried yeast',\n            count: 1,\n            key: ' 1 sachet dried yeast',\n            active: false,\n            children: [],\n          },\n          {\n            label: ' 1 tbsp brown sugar',\n            count: 1,\n            key: ' 1 tbsp brown sugar',\n            active: false,\n            children: [],\n          },\n          {\n            label: ' 1 tbsp ground black pepper',\n            count: 1,\n            key: ' 1 tbsp ground black pepper',\n            active: false,\n            children: [],\n          },\n          {\n            label: ' 1 tbsp Thai green curry paste',\n            count: 1,\n            key: ' 1 tbsp Thai green curry paste',\n            active: false,\n            children: [],\n          },\n          {\n            label: ' 1 tsp baking powder',\n            count: 1,\n            key: ' 1 tsp baking powder',\n            active: false,\n            children: [],\n          },\n          {\n            label: '1 tsp baking powder',\n            count: 1,\n            key: '1 tsp baking powder',\n            active: false,\n            children: [],\n          },\n          {\n            label: ' 1 tsp salt',\n            count: 1,\n            key: ' 1 tsp salt',\n            active: false,\n            children: [],\n          },\n          {\n            label: ' 1 tsp vanilla extract',\n            count: 1,\n            key: ' 1 tsp vanilla extract',\n            active: false,\n            children: [],\n          },\n          {\n            label: '1-2 smoked pears',\n            count: 1,\n            key: '1-2 smoked pears',\n            active: false,\n            children: [],\n          },\n          {\n            label: ' 1/4 tsp sea salt',\n            count: 1,\n            key: ' 1/4 tsp sea salt',\n            active: false,\n            children: [],\n          },\n          {\n            label: '1l milk',\n            count: 1,\n            key: '1l milk',\n            active: false,\n            children: [],\n          },\n          {\n            label: '2 bay leaves',\n            count: 1,\n            key: '2 bay leaves',\n            active: false,\n            children: [],\n          },\n          {\n            label: '2 beets',\n            count: 1,\n            key: '2 beets',\n            active: false,\n            children: [],\n          },\n          {\n            label: '2 eggs',\n            count: 1,\n            key: '2 eggs',\n            active: false,\n            children: [],\n          },\n          {\n            label: ' 2 garlic cloves',\n            count: 1,\n            key: ' 2 garlic cloves',\n            active: false,\n            children: [],\n          },\n          {\n            label: '2 garlic cloves',\n            count: 1,\n            key: '2 garlic cloves',\n            active: false,\n            children: [],\n          },\n          {\n            label: '2 leeks',\n            count: 1,\n            key: '2 leeks',\n            active: false,\n            children: [],\n          },\n          {\n            label: ' 2 limes',\n            count: 1,\n            key: ' 2 limes',\n            active: false,\n            children: [],\n          },\n          {\n            label: '2 red onions',\n            count: 1,\n            key: '2 red onions',\n            active: false,\n            children: [],\n          },\n          {\n            label: ' 2 tbsp olive oil',\n            count: 1,\n            key: ' 2 tbsp olive oil',\n            active: false,\n            children: [],\n          },\n          {\n            label: '2 tbsp tomato paste',\n            count: 1,\n            key: '2 tbsp tomato paste',\n            active: false,\n            children: [],\n          },\n          {\n            label: '2 tomatoes',\n            count: 1,\n            key: '2 tomatoes',\n            active: false,\n            children: [],\n          },\n          {\n            label: ' 2 tsp fish sauce',\n            count: 1,\n            key: ' 2 tsp fish sauce',\n            active: false,\n            children: [],\n          },\n          {\n            label: ' 2 tsp sugar',\n            count: 1,\n            key: ' 2 tsp sugar',\n            active: false,\n            children: [],\n          },\n          {\n            label: '3 allspice berries',\n            count: 1,\n            key: '3 allspice berries',\n            active: false,\n            children: [],\n          },\n          {\n            label: '3 bunches watercress',\n            count: 1,\n            key: '3 bunches watercress',\n            active: false,\n            children: [],\n          },\n          {\n            label: '3 onions',\n            count: 1,\n            key: '3 onions',\n            active: false,\n            children: [],\n          },\n          {\n            label: '3 potatoes',\n            count: 1,\n            key: '3 potatoes',\n            active: false,\n            children: [],\n          },\n          {\n            label: '3 tbsp of jam for the filling',\n            count: 1,\n            key: '3 tbsp of jam for the filling',\n            active: false,\n            children: [],\n          },\n          {\n            label: ' 3 tbsp of maple syrup',\n            count: 1,\n            key: ' 3 tbsp of maple syrup',\n            active: false,\n            children: [],\n          },\n          {\n            label: ' 3 tbsp red pesto',\n            count: 1,\n            key: ' 3 tbsp red pesto',\n            active: false,\n            children: [],\n          },\n          {\n            label: '3-4 medium potatoes',\n            count: 1,\n            key: '3-4 medium potatoes',\n            active: false,\n            children: [],\n          },\n          {\n            label: '3l water',\n            count: 1,\n            key: '3l water',\n            active: false,\n            children: [],\n          },\n          {\n            label: '4 eggs',\n            count: 1,\n            key: '4 eggs',\n            active: false,\n            children: [],\n          },\n          {\n            label: ' 4 tbsp tomato puree',\n            count: 1,\n            key: ' 4 tbsp tomato puree',\n            active: false,\n            children: [],\n          },\n          {\n            label: ' 5 slices Parma ham',\n            count: 1,\n            key: ' 5 slices Parma ham',\n            active: false,\n            children: [],\n          },\n          {\n            label: '5 tbsp cr\\u00e8me fra\\u00eeche',\n            count: 1,\n            key: '5 tbsp cr\\u00e8me fra\\u00eeche',\n            active: false,\n            children: [],\n          },\n          {\n            label: ' 6 egg yolks',\n            count: 1,\n            key: ' 6 egg yolks',\n            active: false,\n            children: [],\n          },\n          {\n            label: '6 tbsp sunflower oil',\n            count: 1,\n            key: '6 tbsp sunflower oil',\n            active: false,\n            children: [],\n          },\n          {\n            label: ' 7 garlic cloves',\n            count: 1,\n            key: ' 7 garlic cloves',\n            active: false,\n            children: [],\n          },\n          {\n            label: ' 9 tsp cocoa powder',\n            count: 1,\n            key: ' 9 tsp cocoa powder',\n            active: false,\n            children: [],\n          },\n          {\n            label: ' 30 mixed chilies',\n            count: 1,\n            key: ' 30 mixed chilies',\n            active: false,\n            children: [],\n          },\n          {\n            label: '30g butter',\n            count: 1,\n            key: '30g butter',\n            active: false,\n            children: [],\n          },\n          {\n            label: ' 30g cornstarch',\n            count: 1,\n            key: ' 30g cornstarch',\n            active: false,\n            children: [],\n          },\n          {\n            label: ' 50g cheddar cheese',\n            count: 1,\n            key: ' 50g cheddar cheese',\n            active: false,\n            children: [],\n          },\n          {\n            label: ' 50g sliced sun dried tomatoes',\n            count: 1,\n            key: ' 50g sliced sun dried tomatoes',\n            active: false,\n            children: [],\n          },\n          {\n            label: ' 80g coconut flour',\n            count: 1,\n            key: ' 80g coconut flour',\n            active: false,\n            children: [],\n          },\n          {\n            label: ' 80g vegan dark chocolate',\n            count: 1,\n            key: ' 80g vegan dark chocolate',\n            active: false,\n            children: [],\n          },\n          {\n            label: ' 80g walnut halves',\n            count: 1,\n            key: ' 80g walnut halves',\n            active: false,\n            children: [],\n          },\n          {\n            label: ' 100g caster sugar',\n            count: 1,\n            key: ' 100g caster sugar',\n            active: false,\n            children: [],\n          },\n          {\n            label: '100g feta',\n            count: 1,\n            key: '100g feta',\n            active: false,\n            children: [],\n          },\n          {\n            label: ' 100g mozzarella',\n            count: 1,\n            key: ' 100g mozzarella',\n            active: false,\n            children: [],\n          },\n          {\n            label: ' 100g pecan nuts',\n            count: 1,\n            key: ' 100g pecan nuts',\n            active: false,\n            children: [],\n          },\n          {\n            label: ' 100g rocket',\n            count: 1,\n            key: ' 100g rocket',\n            active: false,\n            children: [],\n          },\n          {\n            label: ' 125ml milk',\n            count: 1,\n            key: ' 125ml milk',\n            active: false,\n            children: [],\n          },\n          {\n            label: ' 125ml warm water',\n            count: 1,\n            key: ' 125ml warm water',\n            active: false,\n            children: [],\n          },\n          {\n            label: '140g butter',\n            count: 1,\n            key: '140g butter',\n            active: false,\n            children: [],\n          },\n          {\n            label: ' 170g plain flour',\n            count: 1,\n            key: ' 170g plain flour',\n            active: false,\n            children: [],\n          },\n          {\n            label: ' 200g green beans',\n            count: 1,\n            key: ' 200g green beans',\n            active: false,\n            children: [],\n          },\n          {\n            label: ' 200g mozzarella',\n            count: 1,\n            key: ' 200g mozzarella',\n            active: false,\n            children: [],\n          },\n          {\n            label: ' 200g sugar',\n            count: 1,\n            key: ' 200g sugar',\n            active: false,\n            children: [],\n          },\n          {\n            label: '200g sun dried tomatoes',\n            count: 1,\n            key: '200g sun dried tomatoes',\n            active: false,\n            children: [],\n          },\n          {\n            label: '200ml tomato juice',\n            count: 1,\n            key: '200ml tomato juice',\n            active: false,\n            children: [],\n          },\n          {\n            label: '225g butter or margarine',\n            count: 1,\n            key: '225g butter or margarine',\n            active: false,\n            children: [],\n          },\n          {\n            label: '225g caster sugar',\n            count: 1,\n            key: '225g caster sugar',\n            active: false,\n            children: [],\n          },\n          {\n            label: '225g self-raising flour',\n            count: 1,\n            key: '225g self-raising flour',\n            active: false,\n            children: [],\n          },\n          {\n            label: ' 230ml unsweetened organic soya milk',\n            count: 1,\n            key: ' 230ml unsweetened organic soya milk',\n            active: false,\n            children: [],\n          },\n          {\n            label: ' 250ml malt vinegar',\n            count: 1,\n            key: ' 250ml malt vinegar',\n            active: false,\n            children: [],\n          },\n          {\n            label: '280g plain flour',\n            count: 1,\n            key: '280g plain flour',\n            active: false,\n            children: [],\n          },\n          {\n            label: '400-500g pork ribs',\n            count: 1,\n            key: '400-500g pork ribs',\n            active: false,\n            children: [],\n          },\n          {\n            label: ' 400g chicken or tofu',\n            count: 1,\n            key: ' 400g chicken or tofu',\n            active: false,\n            children: [],\n          },\n          {\n            label: ' 400g chopped tomatoes',\n            count: 1,\n            key: ' 400g chopped tomatoes',\n            active: false,\n            children: [],\n          },\n          {\n            label: '400g coconut milk',\n            count: 1,\n            key: '400g coconut milk',\n            active: false,\n            children: [],\n          },\n          {\n            label: '400g gluten free flour',\n            count: 1,\n            key: '400g gluten free flour',\n            active: false,\n            children: [],\n          },\n          {\n            label: ' 400g mushrooms',\n            count: 1,\n            key: ' 400g mushrooms',\n            active: false,\n            children: [],\n          },\n          {\n            label: '400g wholewheat pasta',\n            count: 1,\n            key: '400g wholewheat pasta',\n            active: false,\n            children: [],\n          },\n          {\n            label: '450ml soya milk',\n            count: 1,\n            key: '450ml soya milk',\n            active: false,\n            children: [],\n          },\n          {\n            label: '500g grated parmesan',\n            count: 1,\n            key: '500g grated parmesan',\n            active: false,\n            children: [],\n          },\n          {\n            label: ' 800g cherry tomatoes',\n            count: 1,\n            key: ' 800g cherry tomatoes',\n            active: false,\n            children: [],\n          },\n          {\n            label: '800ml stock',\n            count: 1,\n            key: '800ml stock',\n            active: false,\n            children: [],\n          },\n          {\n            label: ' Basil or mixed herbs',\n            count: 1,\n            key: ' Basil or mixed herbs',\n            active: false,\n            children: [],\n          },\n          {\n            label: 'Cold water',\n            count: 1,\n            key: 'Cold water',\n            active: false,\n            children: [],\n          },\n          {\n            label: 'Cream to serve',\n            count: 1,\n            key: 'Cream to serve',\n            active: false,\n            children: [],\n          },\n          {\n            label: 'For the filling:',\n            count: 1,\n            key: 'For the filling:',\n            active: false,\n            children: [],\n          },\n          {\n            label: 'For the pastry:',\n            count: 1,\n            key: 'For the pastry:',\n            active: false,\n            children: [],\n          },\n          {\n            label: ' Fresh basil',\n            count: 1,\n            key: ' Fresh basil',\n            active: false,\n            children: [],\n          },\n          {\n            label: ' Fresh coriander leaves',\n            count: 1,\n            key: ' Fresh coriander leaves',\n            active: false,\n            children: [],\n          },\n          {\n            label: 'Half a courgette',\n            count: 1,\n            key: 'Half a courgette',\n            active: false,\n            children: [],\n          },\n          {\n            label: 'Icing sugar to dust the top',\n            count: 1,\n            key: 'Icing sugar to dust the top',\n            active: false,\n            children: [],\n          },\n          {\n            label: ' Jasmine rice',\n            count: 1,\n            key: ' Jasmine rice',\n            active: false,\n            children: [],\n          },\n          {\n            label: ' Olive oil',\n            count: 1,\n            key: ' Olive oil',\n            active: false,\n            children: [],\n          },\n          {\n            label: 'Salt to taste',\n            count: 1,\n            key: 'Salt to taste',\n            active: false,\n            children: [],\n          },\n          {\n            label: 'Sour cream',\n            count: 1,\n            key: 'Sour cream',\n            active: false,\n            children: [],\n          },\n          {\n            label: '\\u00bc cabbage',\n            count: 1,\n            key: '\\u00bc cabbage',\n            active: false,\n            children: [],\n          },\n          {\n            label: '\\u00bc celery root',\n            count: 1,\n            key: '\\u00bc celery root',\n            active: false,\n            children: [],\n          },\n        ],\n        settings: {\n          widget: {\n            show_numbers: true,\n            preferAttributes: 0,\n            showReset: 1,\n            resetText: 'Reset (@count)',\n            collapsible: 0,\n            closed: 0,\n            showCountInCollapseLabel: 0,\n            htmlSelectLabel: 'Select an ingredient',\n            required: 0,\n            multipleSelect: 1,\n          },\n          show_title: true,\n          empty_behavior: {behavior: 'none'},\n          url_alias: 'ingredients',\n          show_only_one_result: false,\n          hard_limit: 0,\n          missing: false,\n          missing_label: 'others',\n        },\n      },\n      {\n        label: 'Recipe category',\n        key: 'recipe_category',\n        count: 5,\n        active_values: [],\n        results: [\n          {\n            label: 'Main courses',\n            count: 5,\n            key: 'Main courses',\n            active: false,\n            children: [],\n          },\n          {\n            label: 'Desserts',\n            count: 2,\n            key: 'Desserts',\n            active: false,\n            children: [],\n          },\n          {\n            label: 'Accompaniments',\n            count: 1,\n            key: 'Accompaniments',\n            active: false,\n            children: [],\n          },\n          {\n            label: 'Snacks',\n            count: 1,\n            key: 'Snacks',\n            active: false,\n            children: [],\n          },\n          {\n            label: 'Starters',\n            count: 1,\n            key: 'Starters',\n            active: false,\n            children: [],\n          },\n        ],\n        settings: {\n          widget: {\n            show_numbers: true,\n            preferAttributes: 0,\n            showReset: 0,\n            resetText: 'Reset (@count)',\n            collapsible: 0,\n            closed: 0,\n            showCountInCollapseLabel: 0,\n            useRadios: 0,\n          },\n          show_title: true,\n          empty_behavior: {behavior: 'none'},\n          url_alias: 'recipe_category',\n          show_only_one_result: true,\n          hard_limit: 0,\n          missing: false,\n          missing_label: 'others',\n        },\n      },\n      {\n        label: 'Servings',\n        key: 'servings',\n        count: 5,\n        active_values: [],\n        results: [\n          {label: '4', count: 4, key: '4', active: false, children: []},\n          {label: '8', count: 3, key: '8', active: false, children: []},\n          {label: '10', count: 1, key: '10', active: false, children: []},\n          {label: '12', count: 1, key: '12', active: false, children: []},\n          {label: '60', count: 1, key: '60', active: false, children: []},\n        ],\n        settings: {\n          widget: {\n            show_numbers: true,\n            preferAttributes: 0,\n            showReset: 1,\n            resetText: 'Reset (@count)',\n            collapsible: 1,\n            closed: 1,\n            showCountInCollapseLabel: 1,\n            useRadios: 0,\n          },\n          show_title: true,\n          empty_behavior: {behavior: 'none'},\n          url_alias: 'servings',\n          show_only_one_result: false,\n          hard_limit: 0,\n          missing: false,\n          missing_label: 'others',\n        },\n      },\n      {\n        label: 'Tags',\n        key: 'tags',\n        count: 28,\n        active_values: [],\n        results: [\n          {\n            label: 'Vegetarian',\n            count: 7,\n            key: 'Vegetarian',\n            active: false,\n            children: [],\n          },\n          {label: 'Vegan', count: 3, key: 'Vegan', active: false, children: []},\n          {\n            label: 'Baking',\n            count: 2,\n            key: 'Baking',\n            active: false,\n            children: [],\n          },\n          {\n            label: 'Chocolate',\n            count: 2,\n            key: 'Chocolate',\n            active: false,\n            children: [],\n          },\n          {label: 'Egg', count: 2, key: 'Egg', active: false, children: []},\n          {label: 'Soup', count: 2, key: 'Soup', active: false, children: []},\n          {\n            label: 'Alcohol free',\n            count: 1,\n            key: 'Alcohol free',\n            active: false,\n            children: [],\n          },\n          {label: 'Baked', count: 1, key: 'Baked', active: false, children: []},\n          {\n            label: 'Breakfast',\n            count: 1,\n            key: 'Breakfast',\n            active: false,\n            children: [],\n          },\n          {label: 'Cake', count: 1, key: 'Cake', active: false, children: []},\n          {\n            label: 'Carrots',\n            count: 1,\n            key: 'Carrots',\n            active: false,\n            children: [],\n          },\n          {\n            label: 'Cocktail party',\n            count: 1,\n            key: 'Cocktail party',\n            active: false,\n            children: [],\n          },\n          {\n            label: 'Dairy-free',\n            count: 1,\n            key: 'Dairy-free',\n            active: false,\n            children: [],\n          },\n          {\n            label: 'Dessert',\n            count: 1,\n            key: 'Dessert',\n            active: false,\n            children: [],\n          },\n          {\n            label: 'Dinner party',\n            count: 1,\n            key: 'Dinner party',\n            active: false,\n            children: [],\n          },\n          {\n            label: 'Drinks',\n            count: 1,\n            key: 'Drinks',\n            active: false,\n            children: [],\n          },\n          {\n            label: 'Grow your own',\n            count: 1,\n            key: 'Grow your own',\n            active: false,\n            children: [],\n          },\n          {\n            label: 'Healthy',\n            count: 1,\n            key: 'Healthy',\n            active: false,\n            children: [],\n          },\n          {label: 'Herbs', count: 1, key: 'Herbs', active: false, children: []},\n          {\n            label: 'Learn to cook',\n            count: 1,\n            key: 'Learn to cook',\n            active: false,\n            children: [],\n          },\n          {\n            label: 'Mushrooms',\n            count: 1,\n            key: 'Mushrooms',\n            active: false,\n            children: [],\n          },\n          {label: 'Oats', count: 1, key: 'Oats', active: false, children: []},\n          {label: 'Party', count: 1, key: 'Party', active: false, children: []},\n          {label: 'Pasta', count: 1, key: 'Pasta', active: false, children: []},\n          {\n            label: 'Pastry',\n            count: 1,\n            key: 'Pastry',\n            active: false,\n            children: [],\n          },\n          {\n            label: 'Seasonal',\n            count: 1,\n            key: 'Seasonal',\n            active: false,\n            children: [],\n          },\n          {\n            label: 'Shopping',\n            count: 1,\n            key: 'Shopping',\n            active: false,\n            children: [],\n          },\n          {\n            label: 'Supermarkets',\n            count: 1,\n            key: 'Supermarkets',\n            active: false,\n            children: [],\n          },\n        ],\n        settings: {\n          widget: {\n            show_numbers: true,\n            preferAttributes: 0,\n            showReset: 0,\n            resetText: 'Reset (@count)',\n            collapsible: 0,\n            closed: 0,\n            showCountInCollapseLabel: 0,\n            useRadios: 0,\n          },\n          show_title: true,\n          empty_behavior: {behavior: 'none'},\n          url_alias: 'tags',\n          show_only_one_result: false,\n          hard_limit: 0,\n          missing: false,\n          missing_label: 'others',\n        },\n      },\n      {\n        label: 'Type',\n        key: 'type',\n        count: 3,\n        active_values: [],\n        results: [\n          {\n            label: 'Recipe',\n            count: 10,\n            key: 'recipe',\n            active: false,\n            children: [],\n          },\n          {\n            label: 'Article',\n            count: 8,\n            key: 'article',\n            active: false,\n            children: [],\n          },\n          {\n            label: 'Basic page',\n            count: 2,\n            key: 'page',\n            active: false,\n            children: [],\n          },\n        ],\n        settings: {\n          widget: {\n            show_numbers: true,\n            preferAttributes: 0,\n            showReset: 0,\n            resetText: 'Reset (@count)',\n            collapsible: 0,\n            closed: 0,\n            showCountInCollapseLabel: 0,\n            htmlSelectLabel: 'Select a page type',\n            required: 0,\n            multipleSelect: 1,\n          },\n          show_title: true,\n          empty_behavior: {behavior: 'none'},\n          url_alias: 'type',\n          show_only_one_result: false,\n          hard_limit: 0,\n          missing: false,\n          missing_label: 'others',\n        },\n      },\n    ],\n    took: 11.84,\n    max_score: 1,\n    swc_sorts: [\n      {key: 'search_api_relevance', order: 'desc', label: 'Relevance'},\n      {key: 'title', order: 'asc', label: 'A-Z'},\n      {key: 'title', order: 'desc', label: 'Z-A'},\n    ],\n    swc_page_sizes: [\n      {key: '5', label: '5'},\n      {key: '10', label: '10'},\n      {key: '25', label: '25'},\n    ],\n    swc_displays: [\n      {key: 'list', label: 'List'},\n      {key: 'grid', label: 'Grid'},\n    ],\n    swc_results: {\n      field: 'type',\n      mappings: [\n        {\n          keys: ['article-grid', 'page-grid', 'recipe-grid'],\n          element: 'search-result-element-default',\n          settings: '',\n        },\n        {\n          keys: ['recipe'],\n          element: 'search-result-recipe',\n          settings: {showImage: true},\n        },\n        {\n          keys: ['default'],\n          element: 'search-result-element-rendered',\n          settings: {field: 'result'},\n        },\n      ],\n    },\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "MockDataFacetPage",
          "type": {
            "text": "object"
          },
          "default": "{\n  query: '?f[0]=type:page',\n  url: '/mock/api/search/mock-index/facet-type',\n  data: {\n    search_results: [\n      {\n        rendered_item:\n          '\\n\\n\\u003Carticle class=\\u0022node node--type-page node--view-mode-search-index\\u0022\\u003E\\n\\n  \\n            \\u003Ch2\\u003E\\n        \\u003Ca href=\\u0022/en/about-umami\\u0022 rel=\\u0022bookmark\\u0022\\u003E\\u003Cspan class=\\u0022field field--name-title field--type-string field--label-hidden\\u0022\\u003EAbout Umami\\u003C/span\\u003E\\n\\u003C/a\\u003E\\n      \\u003C/h2\\u003E\\n        \\n\\n  \\n  \\u003Cdiv class=\\u0022node__content\\u0022\\u003E\\n    \\n            \\u003Cdiv class=\\u0022clearfix text-formatted field field--name-body field--type-text-with-summary field--label-hidden field__item\\u0022\\u003E\\u003Cp\\u003EUmami is a fictional food magazine that has been created to demonstrate how you might build a Drupal site using functionality provided \\u0027out of the box\\u0027.\\u003C/p\\u003E\\n\\u003Cp\\u003EFor more information visit \\u003Ca href=\\u0022https://www.drupal.org/docs/umami-drupal-demonstration-installation-profile\\u0022\\u003Ehttps://www.drupal.org/docs/umami-drupal-demonstration-installation-profile\\u003C/a\\u003E.\\u003C/p\\u003E\\n\\u003C/div\\u003E\\n      \\n  \\u003C/div\\u003E\\n\\n\\u003C/article\\u003E\\n',\n        result:\n          '\\n\\n\\u003Carticle class=\\u0022node node--type-page node--view-mode-teaser\\u0022\\u003E\\n\\n  \\n            \\u003Ch2\\u003E\\n        \\u003Ca href=\\u0022/en/about-umami\\u0022 rel=\\u0022bookmark\\u0022\\u003E\\u003Cspan class=\\u0022field field--name-title field--type-string field--label-hidden\\u0022\\u003EAbout Umami\\u003C/span\\u003E\\n\\u003C/a\\u003E\\n      \\u003C/h2\\u003E\\n        \\n\\n  \\n  \\u003Cdiv class=\\u0022node__content\\u0022\\u003E\\n    \\n            \\u003Cdiv class=\\u0022clearfix text-formatted field field--name-body field--type-text-with-summary field--label-hidden field__item\\u0022\\u003E\\u003Cp\\u003EUmami is a fictional food magazine that has been created to demonstrate how you might build a Drupal site using functionality provided \\u0027out of the box\\u0027.\\u003C/p\\u003E\\n\\u003Cp\\u003EFor more information visit \\u003Ca href=\\u0022https://www.drupal.org/docs/umami-drupal-demonstration-installation-profile\\u0022\\u003Ehttps://www.drupal.org/docs/umami-drupal-demonstration-installation-profile\\u003C/a\\u003E.\\u003C/p\\u003E\\n\\u003C/div\\u003E\\n        \\u003Cdiv class=\\u0022node__links\\u0022\\u003E\\n    \\u003Cul class=\\u0022links inline\\u0022\\u003E\\u003Cli class=\\u0022node-readmore\\u0022\\u003E\\u003Ca href=\\u0022/en/about-umami\\u0022 rel=\\u0022tag\\u0022 title=\\u0022About Umami\\u0022 hreflang=\\u0022en\\u0022\\u003ERead more\\u003Cspan class=\\u0022visually-hidden\\u0022\\u003E about About Umami\\u003C/span\\u003E\\u003C/a\\u003E\\u003C/li\\u003E\\u003C/ul\\u003E  \\u003C/div\\u003E\\n\\n  \\u003C/div\\u003E\\n\\n\\u003C/article\\u003E\\n',\n        url: 'https://umami.ddev.site/en/about-umami',\n        author: 'Samuel Adamson',\n        cooking_time: [],\n        difficulty: [],\n        image: [],\n        ingredients: [],\n        preparation_time: [],\n        recipe_category: [],\n        servings: [],\n        summary: [],\n        tags: [],\n        title: 'About Umami',\n        type: 'page',\n        id: 'entity:node/19:en',\n        score: 1,\n        excerpt: null,\n      },\n      {\n        rendered_item:\n          '\\n\\n\\u003Carticle class=\\u0022node node--type-page node--view-mode-search-index\\u0022\\u003E\\n\\n  \\n            \\u003Ch2\\u003E\\n        \\u003Ca href=\\u0022/en/search\\u0022 rel=\\u0022bookmark\\u0022\\u003E\\u003Cspan class=\\u0022field field--name-title field--type-string field--label-hidden\\u0022\\u003ESearch\\u003C/span\\u003E\\n\\u003C/a\\u003E\\n      \\u003C/h2\\u003E\\n        \\n\\n  \\n  \\u003Cdiv class=\\u0022node__content\\u0022\\u003E\\n    \\n  \\u003C/div\\u003E\\n\\n\\u003C/article\\u003E\\n',\n        result:\n          '\\n\\n\\u003Carticle class=\\u0022node node--type-page node--view-mode-teaser\\u0022\\u003E\\n\\n  \\n            \\u003Ch2\\u003E\\n        \\u003Ca href=\\u0022/en/search\\u0022 rel=\\u0022bookmark\\u0022\\u003E\\u003Cspan class=\\u0022field field--name-title field--type-string field--label-hidden\\u0022\\u003ESearch\\u003C/span\\u003E\\n\\u003C/a\\u003E\\n      \\u003C/h2\\u003E\\n        \\n\\n  \\n  \\u003Cdiv class=\\u0022node__content\\u0022\\u003E\\n      \\u003Cdiv class=\\u0022node__links\\u0022\\u003E\\n    \\u003Cul class=\\u0022links inline\\u0022\\u003E\\u003Cli class=\\u0022node-readmore\\u0022\\u003E\\u003Ca href=\\u0022/en/search\\u0022 rel=\\u0022tag\\u0022 title=\\u0022Search\\u0022 hreflang=\\u0022en\\u0022\\u003ERead more\\u003Cspan class=\\u0022visually-hidden\\u0022\\u003E about Search\\u003C/span\\u003E\\u003C/a\\u003E\\u003C/li\\u003E\\u003C/ul\\u003E  \\u003C/div\\u003E\\n\\n  \\u003C/div\\u003E\\n\\n\\u003C/article\\u003E\\n',\n        url: 'https://umami.ddev.site/en/search',\n        author: 'admin',\n        cooking_time: [],\n        difficulty: [],\n        image: [],\n        ingredients: [],\n        preparation_time: [],\n        recipe_category: [],\n        servings: [],\n        summary: [],\n        tags: [],\n        title: 'Search',\n        type: 'page',\n        id: 'entity:node/20:en',\n        score: 1,\n        excerpt: null,\n      },\n    ],\n    search_results_per_page: 5,\n    search_results_count: 2,\n    search_results_page: 0,\n    search_results_pages: 1,\n    facets: [\n      {\n        label: 'Author',\n        key: 'author',\n        count: 2,\n        active_values: [],\n        results: [\n          {label: 'admin', count: 1, key: 'admin', active: false, children: []},\n          {\n            label: 'Samuel Adamson',\n            count: 1,\n            key: 'Samuel Adamson',\n            active: false,\n            children: [],\n          },\n        ],\n        settings: {\n          widget: {\n            show_numbers: false,\n            preferAttributes: 0,\n            showReset: 0,\n            resetText: 'Reset (@count)',\n            collapsible: 0,\n            closed: 0,\n            showCountInCollapseLabel: 0,\n          },\n          show_title: true,\n          empty_behavior: {behavior: 'none'},\n          url_alias: 'author',\n          show_only_one_result: false,\n          hard_limit: 0,\n          missing: false,\n          missing_label: 'others',\n        },\n      },\n      {\n        label: 'Cooking time',\n        key: 'cooking_time',\n        count: 0,\n        active_values: [],\n        results: [],\n        settings: {\n          widget: {\n            show_numbers: true,\n            preferAttributes: 0,\n            showReset: 1,\n            resetText: 'Reset (@count)',\n            collapsible: 1,\n            closed: 1,\n            showCountInCollapseLabel: 1,\n            useRadios: 0,\n          },\n          show_title: true,\n          empty_behavior: {behavior: 'none'},\n          url_alias: 'cooking_time',\n          show_only_one_result: false,\n          hard_limit: 0,\n          missing: false,\n          missing_label: 'others',\n        },\n      },\n      {\n        label: 'Difficulty',\n        key: 'difficulty',\n        count: 0,\n        active_values: [],\n        results: [],\n        settings: {\n          widget: {\n            show_numbers: true,\n            preferAttributes: 0,\n            showReset: 1,\n            resetText: 'Reset (@count)',\n            collapsible: 1,\n            closed: 1,\n            showCountInCollapseLabel: 1,\n            useRadios: 0,\n          },\n          show_title: true,\n          empty_behavior: {behavior: 'none'},\n          url_alias: 'difficulty',\n          show_only_one_result: false,\n          hard_limit: 0,\n          missing: false,\n          missing_label: 'others',\n        },\n      },\n      {\n        label: 'Ingredients',\n        key: 'ingredients',\n        count: 0,\n        active_values: [],\n        results: [],\n        settings: {\n          widget: {\n            show_numbers: true,\n            preferAttributes: 0,\n            showReset: 1,\n            resetText: 'Reset (@count)',\n            collapsible: 0,\n            closed: 0,\n            showCountInCollapseLabel: 0,\n            htmlSelectLabel: 'Select an ingredient',\n            required: 0,\n            multipleSelect: 1,\n          },\n          show_title: true,\n          empty_behavior: {behavior: 'none'},\n          url_alias: 'ingredients',\n          show_only_one_result: false,\n          hard_limit: 0,\n          missing: false,\n          missing_label: 'others',\n        },\n      },\n      {\n        label: 'Recipe category',\n        key: 'recipe_category',\n        count: 0,\n        active_values: [],\n        results: [],\n        settings: {\n          widget: {\n            show_numbers: true,\n            preferAttributes: 0,\n            showReset: 0,\n            resetText: 'Reset (@count)',\n            collapsible: 0,\n            closed: 0,\n            showCountInCollapseLabel: 0,\n            useRadios: 0,\n          },\n          show_title: true,\n          empty_behavior: {behavior: 'none'},\n          url_alias: 'recipe_category',\n          show_only_one_result: true,\n          hard_limit: 0,\n          missing: false,\n          missing_label: 'others',\n        },\n      },\n      {\n        label: 'Servings',\n        key: 'servings',\n        count: 0,\n        active_values: [],\n        results: [],\n        settings: {\n          widget: {\n            show_numbers: true,\n            preferAttributes: 0,\n            showReset: 1,\n            resetText: 'Reset (@count)',\n            collapsible: 1,\n            closed: 1,\n            showCountInCollapseLabel: 1,\n            useRadios: 0,\n          },\n          show_title: true,\n          empty_behavior: {behavior: 'none'},\n          url_alias: 'servings',\n          show_only_one_result: false,\n          hard_limit: 0,\n          missing: false,\n          missing_label: 'others',\n        },\n      },\n      {\n        label: 'Tags',\n        key: 'tags',\n        count: 0,\n        active_values: [],\n        results: [],\n        settings: {\n          widget: {\n            show_numbers: true,\n            preferAttributes: 0,\n            showReset: 0,\n            resetText: 'Reset (@count)',\n            collapsible: 0,\n            closed: 0,\n            showCountInCollapseLabel: 0,\n            useRadios: 0,\n          },\n          show_title: true,\n          empty_behavior: {behavior: 'none'},\n          url_alias: 'tags',\n          show_only_one_result: false,\n          hard_limit: 0,\n          missing: false,\n          missing_label: 'others',\n        },\n      },\n      {\n        label: 'Type',\n        key: 'type',\n        count: 3,\n        active_values: ['page'],\n        results: [\n          {\n            label: 'Recipe',\n            count: 10,\n            key: 'recipe',\n            active: false,\n            children: [],\n          },\n          {\n            label: 'Article',\n            count: 8,\n            key: 'article',\n            active: false,\n            children: [],\n          },\n          {\n            label: 'Basic page',\n            count: 2,\n            key: 'page',\n            active: true,\n            children: [],\n          },\n        ],\n        settings: {\n          widget: {\n            show_numbers: true,\n            preferAttributes: 0,\n            showReset: 0,\n            resetText: 'Reset (@count)',\n            collapsible: 0,\n            closed: 0,\n            showCountInCollapseLabel: 0,\n            htmlSelectLabel: 'Select a page type',\n            required: 0,\n            multipleSelect: 1,\n          },\n          show_title: true,\n          empty_behavior: {behavior: 'none'},\n          url_alias: 'type',\n          show_only_one_result: false,\n          hard_limit: 0,\n          missing: false,\n          missing_label: 'others',\n        },\n      },\n    ],\n    took: 12.28,\n    max_score: 1,\n    swc_sorts: [\n      {key: 'search_api_relevance', order: 'desc', label: 'Relevance'},\n      {key: 'title', order: 'asc', label: 'A-Z'},\n      {key: 'title', order: 'desc', label: 'Z-A'},\n    ],\n    swc_page_sizes: [\n      {key: '5', label: '5'},\n      {key: '10', label: '10'},\n      {key: '25', label: '25'},\n    ],\n    swc_displays: [\n      {key: 'list', label: 'List'},\n      {key: 'grid', label: 'Grid'},\n    ],\n    swc_results: {\n      field: 'type',\n      mappings: [\n        {\n          keys: ['article-grid', 'page-grid', 'recipe-grid'],\n          element: 'search-result-element-default',\n          settings: '',\n        },\n        {\n          keys: ['recipe'],\n          element: 'search-result-recipe',\n          settings: {showImage: true},\n        },\n        {\n          keys: ['default'],\n          element: 'search-result-element-rendered',\n          settings: {field: 'result'},\n        },\n      ],\n    },\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "MockNoResults",
          "type": {
            "text": "object"
          },
          "default": "{\n  query: '?q=noresults',\n  url: '/mock/api/search/mock-index/no-results',\n  data: {\n    search_results: [],\n    search_results_per_page: 5,\n    search_results_count: 0,\n    search_results_page: 0,\n    search_results_pages: 0,\n    facets: [\n      {\n        label: 'Author',\n        key: 'author',\n        count: 0,\n        active_values: [],\n        results: [],\n        settings: {\n          widget: {\n            show_numbers: false,\n            preferAttributes: 0,\n            showReset: 0,\n            resetText: 'Reset (@count)',\n            collapsible: 0,\n            closed: 0,\n            showCountInCollapseLabel: 0,\n          },\n          show_title: true,\n          empty_behavior: {behavior: 'none'},\n          url_alias: 'author',\n          show_only_one_result: false,\n          hard_limit: 0,\n          missing: false,\n          missing_label: 'others',\n        },\n      },\n      {\n        label: 'Cooking time',\n        key: 'cooking_time',\n        count: 0,\n        active_values: [],\n        results: [],\n        settings: {\n          widget: {\n            show_numbers: true,\n            preferAttributes: 0,\n            showReset: 1,\n            resetText: 'Reset (@count)',\n            collapsible: 1,\n            closed: 1,\n            showCountInCollapseLabel: 1,\n            useRadios: 0,\n          },\n          show_title: true,\n          empty_behavior: {behavior: 'none'},\n          url_alias: 'cooking_time',\n          show_only_one_result: false,\n          hard_limit: 0,\n          missing: false,\n          missing_label: 'others',\n        },\n      },\n      {\n        label: 'Difficulty',\n        key: 'difficulty',\n        count: 0,\n        active_values: [],\n        results: [],\n        settings: {\n          widget: {\n            show_numbers: true,\n            preferAttributes: 0,\n            showReset: 1,\n            resetText: 'Reset (@count)',\n            collapsible: 1,\n            closed: 1,\n            showCountInCollapseLabel: 1,\n            useRadios: 0,\n          },\n          show_title: true,\n          empty_behavior: {behavior: 'none'},\n          url_alias: 'difficulty',\n          show_only_one_result: false,\n          hard_limit: 0,\n          missing: false,\n          missing_label: 'others',\n        },\n      },\n      {\n        label: 'Ingredients',\n        key: 'ingredients',\n        count: 0,\n        active_values: [],\n        results: [],\n        settings: {\n          widget: {\n            show_numbers: true,\n            preferAttributes: 0,\n            showReset: 1,\n            resetText: 'Reset (@count)',\n            collapsible: 0,\n            closed: 0,\n            showCountInCollapseLabel: 0,\n            htmlSelectLabel: 'Select an ingredient',\n            required: 0,\n            multipleSelect: 1,\n          },\n          show_title: true,\n          empty_behavior: {behavior: 'none'},\n          url_alias: 'ingredients',\n          show_only_one_result: false,\n          hard_limit: 0,\n          missing: false,\n          missing_label: 'others',\n        },\n      },\n      {\n        label: 'Recipe category',\n        key: 'recipe_category',\n        count: 0,\n        active_values: [],\n        results: [],\n        settings: {\n          widget: {\n            show_numbers: true,\n            preferAttributes: 0,\n            showReset: 0,\n            resetText: 'Reset (@count)',\n            collapsible: 0,\n            closed: 0,\n            showCountInCollapseLabel: 0,\n            useRadios: 0,\n          },\n          show_title: true,\n          empty_behavior: {behavior: 'none'},\n          url_alias: 'recipe_category',\n          show_only_one_result: true,\n          hard_limit: 0,\n          missing: false,\n          missing_label: 'others',\n        },\n      },\n      {\n        label: 'Servings',\n        key: 'servings',\n        count: 0,\n        active_values: [],\n        results: [],\n        settings: {\n          widget: {\n            show_numbers: true,\n            preferAttributes: 0,\n            showReset: 1,\n            resetText: 'Reset (@count)',\n            collapsible: 1,\n            closed: 1,\n            showCountInCollapseLabel: 1,\n            useRadios: 0,\n          },\n          show_title: true,\n          empty_behavior: {behavior: 'none'},\n          url_alias: 'servings',\n          show_only_one_result: false,\n          hard_limit: 0,\n          missing: false,\n          missing_label: 'others',\n        },\n      },\n      {\n        label: 'Tags',\n        key: 'tags',\n        count: 0,\n        active_values: [],\n        results: [],\n        settings: {\n          widget: {\n            show_numbers: true,\n            preferAttributes: 0,\n            showReset: 0,\n            resetText: 'Reset (@count)',\n            collapsible: 0,\n            closed: 0,\n            showCountInCollapseLabel: 0,\n            useRadios: 0,\n          },\n          show_title: true,\n          empty_behavior: {behavior: 'none'},\n          url_alias: 'tags',\n          show_only_one_result: false,\n          hard_limit: 0,\n          missing: false,\n          missing_label: 'others',\n        },\n      },\n      {\n        label: 'Type',\n        key: 'type',\n        count: 0,\n        active_values: [],\n        results: [],\n        settings: {\n          widget: {\n            show_numbers: true,\n            preferAttributes: 0,\n            showReset: 0,\n            resetText: 'Reset (@count)',\n            collapsible: 0,\n            closed: 0,\n            showCountInCollapseLabel: 0,\n            htmlSelectLabel: 'Select a page type',\n            required: 0,\n            multipleSelect: 1,\n          },\n          show_title: true,\n          empty_behavior: {behavior: 'none'},\n          url_alias: 'type',\n          show_only_one_result: false,\n          hard_limit: 0,\n          missing: false,\n          missing_label: 'others',\n        },\n      },\n    ],\n    took: 9.95,\n    max_score: 0,\n    swc_sorts: [\n      {key: 'search_api_relevance', order: 'desc', label: 'Relevance'},\n      {key: 'title', order: 'asc', label: 'A-Z'},\n      {key: 'title', order: 'desc', label: 'Z-A'},\n    ],\n    swc_page_sizes: [\n      {key: '5', label: '5'},\n      {key: '10', label: '10'},\n      {key: '25', label: '25'},\n    ],\n    swc_displays: [\n      {key: 'list', label: 'List'},\n      {key: 'grid', label: 'Grid'},\n    ],\n    swc_results: {\n      field: 'type',\n      mappings: [\n        {\n          keys: ['article-grid', 'page-grid', 'recipe-grid'],\n          element: 'search-result-element-default',\n          settings: '',\n        },\n        {\n          keys: ['recipe'],\n          element: 'search-result-recipe',\n          settings: {showImage: true},\n        },\n        {\n          keys: ['default'],\n          element: 'search-result-element-rendered',\n          settings: {field: 'result'},\n        },\n      ],\n    },\n  },\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "MockData",
          "declaration": {
            "name": "MockData",
            "module": "src/MockData.ts"
          }
        },
        {
          "kind": "js",
          "name": "MockDataFacetPage",
          "declaration": {
            "name": "MockDataFacetPage",
            "module": "src/MockData.ts"
          }
        },
        {
          "kind": "js",
          "name": "MockNoResults",
          "declaration": {
            "name": "MockNoResults",
            "module": "src/MockData.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/SearchContext.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "ensureContextRoot"
        },
        {
          "kind": "variable",
          "name": "searchContext"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ensureContextRoot",
          "declaration": {
            "name": "ensureContextRoot",
            "module": "src/SearchContext.ts"
          }
        },
        {
          "kind": "js",
          "name": "searchContext",
          "declaration": {
            "name": "searchContext",
            "module": "src/SearchContext.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/types.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/facet-button/facet-button.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "meta",
          "type": {
            "text": "Meta"
          },
          "default": "{\n  title: 'Facets/facet-button',\n  tags: ['autodocs'],\n  component: 'facet-button',\n  decorators: [\n    (story) =>\n      html`\n        <search-root url=\"/mock/api/search/mock-index\" defaultPerPage=\"10\">\n          ${story()}\n        </search-root>\n      `,\n  ],\n}"
        },
        {
          "kind": "variable",
          "name": "Primary",
          "type": {
            "text": "Story"
          },
          "default": "{\n  render: ({\n    key,\n    overrideLabel,\n    showCount,\n    showLabel,\n    showReset,\n    resetText,\n    collapsible,\n    closed,\n    showCountInCollapseLabel,\n    preferAttributes,\n    softLimit,\n    softLimitLessLabel,\n    softLimitMoreLabel,\n  }) =>\n    html`<facet-button\n      key=\"${key}\"\n      overrideLabel=\"${overrideLabel}\"\n      ?showLabel=\"${showLabel}\"\n      ?showCount=\"${showCount}\"\n      ?showReset=\"${showReset}\"\n      ?resetText=\"${resetText}\"\n      ?collapsible=\"${collapsible}\"\n      ?closed=\"${closed}\"\n      ?showCountInCollapseLabel=\"${showCountInCollapseLabel}\"\n      ?preferAttributes=\"${preferAttributes}\"\n      ?softLimit=\"${softLimit}\"\n      ?softLimitLessLabel=\"${softLimitLessLabel}\"\n      ?softLimitMoreLabel=\"${softLimitMoreLabel}\"\n    ></facet-button>`,\n  args: {\n    key: 'type',\n    overrideLabel: '',\n    showCount: true,\n    showLabel: true,\n    showReset: true,\n    resetText: '',\n    collapsible: false,\n    closed: false,\n    showCountInCollapseLabel: false,\n    preferAttributes: false,\n    softLimit: 0,\n    softLimitLessLabel: 'Show Less',\n    softLimitMoreLabel: 'Show More',\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "Collapsible",
          "type": {
            "text": "Story"
          },
          "default": "{\n  render: ({\n    key,\n    overrideLabel,\n    showCount,\n    showLabel,\n    showReset,\n    resetText,\n    collapsible,\n    closed,\n    showCountInCollapseLabel,\n    preferAttributes,\n    softLimit,\n    softLimitLessLabel,\n    softLimitMoreLabel,\n  }) =>\n    html`<facet-button\n      key=\"${key}\"\n      overrideLabel=\"${overrideLabel}\"\n      ?showLabel=\"${showLabel}\"\n      ?showCount=\"${showCount}\"\n      ?showReset=\"${showReset}\"\n      ?resetText=\"${resetText}\"\n      ?collapsible=\"${collapsible}\"\n      ?closed=\"${closed}\"\n      ?showCountInCollapseLabel=\"${showCountInCollapseLabel}\"\n      ?preferAttributes=\"${preferAttributes}\"\n      ?softLimit=\"${softLimit}\"\n      ?softLimitLessLabel=\"${softLimitLessLabel}\"\n      ?softLimitMoreLabel=\"${softLimitMoreLabel}\"\n    ></facet-button>`,\n  args: {\n    key: 'type',\n    overrideLabel: '',\n    showCount: true,\n    showLabel: true,\n    showReset: true,\n    resetText: '',\n    collapsible: true,\n    closed: true,\n    showCountInCollapseLabel: true,\n    preferAttributes: false,\n    softLimit: 0,\n    softLimitLessLabel: 'Show Less',\n    softLimitMoreLabel: 'Show More',\n  },\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "meta",
            "module": "src/facet-button/facet-button.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Primary",
          "declaration": {
            "name": "Primary",
            "module": "src/facet-button/facet-button.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Collapsible",
          "declaration": {
            "name": "Collapsible",
            "module": "src/facet-button/facet-button.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/facet-button/facet-button.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A facet button element.",
          "name": "FacetButton",
          "members": [
            {
              "kind": "method",
              "name": "_getOptions",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "parameters": [
                {
                  "name": "children",
                  "default": "undefined",
                  "type": {
                    "text": "undefined | ResultsType[]"
                  }
                }
              ],
              "description": "Returns the html for the facet's options."
            },
            {
              "kind": "field",
              "name": "key",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The machine name of the facet to render options for.",
              "attribute": "key",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "overrideLabel",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Replace the default facet label with this text.",
              "attribute": "overrideLabel",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "showLabel",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "If the facet's label should be shown.",
              "attribute": "showLabel",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "showCount",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "If counts should be shown next to facet options.",
              "attribute": "showCount",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "showReset",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "If a reset button should be shown for this facet.",
              "attribute": "showReset",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "resetText",
              "default": "`Reset (@count)`",
              "description": "The label to use for the reset/clear facet selection button. `@count` can be used as a token that will be replaced with the number of selected options.",
              "attribute": "resetText",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "collapsible",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Make the facet options collapsible.",
              "attribute": "collapsible",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "closed",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Default a collapsible facet to closed.",
              "attribute": "closed",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "showCountInCollapseLabel",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Show the applied options count in a collapsible facet label.",
              "attribute": "showCountInCollapseLabel",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "preferAttributes",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "When set settings for this facet from the api are ignored.",
              "attribute": "preferAttributes",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "urlAlias",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The key used for this facet in the url and api calls.",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "softLimit",
              "type": {
                "text": "number | undefined"
              },
              "description": "The initial number of top level options to display.",
              "attribute": "softLimit",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "softLimitLessLabel",
              "type": {
                "text": "string | undefined"
              },
              "description": "The label to 'Show Less' options.",
              "attribute": "softLimitLessLabel",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "softLimitMoreLabel",
              "type": {
                "text": "string | undefined"
              },
              "description": "The label to 'Show More' options.",
              "attribute": "softLimitMoreLabel",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "optionsOpen",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "If a collapsible facet is open or closed.",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "facetConfigLoaded",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "facet",
              "type": {
                "text": "SearchFacetsType | undefined"
              },
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "showMoreOpen",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_configOrAttribute",
              "parameters": [
                {
                  "name": "config",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "attribute",
                  "type": {
                    "text": "any"
                  }
                }
              ],
              "description": "Get the correct value for a property based on config and attributes.",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_getOptionId",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_getFacetData",
              "return": {
                "type": {
                  "text": "SearchFacetsType"
                }
              },
              "description": "Get the facet value and configuration for the given key.",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_getLabelElement",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "description": "Returns the html for the facet's label.",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_getCollapsibleLabelElement",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "description": "Returns the html for the facet's label.",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_getSoftLimitElement",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "description": "Returns the html for the button to toggle the soft limit.",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "wrapCollapsible",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "parameters": [
                {
                  "name": "label",
                  "type": {
                    "text": "TemplateResult"
                  }
                },
                {
                  "name": "options",
                  "type": {
                    "text": "TemplateResult"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_getResetElement",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "description": "Returns the html for the facet reset button.",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "shouldRender",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "BaseFacetElement",
            "module": "/src/BaseFacetElement"
          },
          "tagName": "facet-button",
          "customElement": true,
          "attributes": [
            {
              "name": "key",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The machine name of the facet to render options for.",
              "fieldName": "key",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "name": "overrideLabel",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Replace the default facet label with this text.",
              "fieldName": "overrideLabel",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "name": "showLabel",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "If the facet's label should be shown.",
              "fieldName": "showLabel",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "name": "showCount",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "If counts should be shown next to facet options.",
              "fieldName": "showCount",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "name": "showReset",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "If a reset button should be shown for this facet.",
              "fieldName": "showReset",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "name": "resetText",
              "default": "`Reset (@count)`",
              "description": "The label to use for the reset/clear facet selection button. `@count` can be used as a token that will be replaced with the number of selected options.",
              "fieldName": "resetText",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "name": "collapsible",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Make the facet options collapsible.",
              "fieldName": "collapsible",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "name": "closed",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Default a collapsible facet to closed.",
              "fieldName": "closed",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "name": "showCountInCollapseLabel",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Show the applied options count in a collapsible facet label.",
              "fieldName": "showCountInCollapseLabel",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "name": "preferAttributes",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "When set settings for this facet from the api are ignored.",
              "fieldName": "preferAttributes",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "name": "softLimit",
              "type": {
                "text": "number | undefined"
              },
              "description": "The initial number of top level options to display.",
              "fieldName": "softLimit",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "name": "softLimitLessLabel",
              "type": {
                "text": "string | undefined"
              },
              "description": "The label to 'Show Less' options.",
              "fieldName": "softLimitLessLabel",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "name": "softLimitMoreLabel",
              "type": {
                "text": "string | undefined"
              },
              "description": "The label to 'Show More' options.",
              "fieldName": "softLimitMoreLabel",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FacetButton",
          "declaration": {
            "name": "FacetButton",
            "module": "src/facet-button/facet-button.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "facet-button",
          "declaration": {
            "name": "FacetButton",
            "module": "src/facet-button/facet-button.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/facet-dropdown/facet-dropdown.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "meta",
          "type": {
            "text": "Meta"
          },
          "default": "{\n  title: 'Facets/facet-dropdown',\n  tags: ['autodocs'],\n  component: 'facet-dropdown',\n  decorators: [\n    (story) =>\n      html`\n        <search-root url=\"/mock/api/search/mock-index\" defaultPerPage=\"10\">\n          ${story()}\n        </search-root>\n      `,\n  ],\n}"
        },
        {
          "kind": "variable",
          "name": "Primary",
          "type": {
            "text": "Story"
          },
          "default": "{\n  render: ({\n    selectLabel,\n    key,\n    overrideLabel,\n    showCount,\n    showLabel,\n    showReset,\n    resetText,\n    collapsible,\n    closed,\n    showCountInCollapseLabel,\n    preferAttributes,\n  }) =>\n    html`<facet-dropdown\n      selectLabel=\"${selectLabel}\"\n      key=\"${key}\"\n      overrideLabel=\"${overrideLabel}\"\n      ?showLabel=\"${showLabel}\"\n      ?showCount=\"${showCount}\"\n      ?showReset=\"${showReset}\"\n      ?resetText=\"${resetText}\"\n      ?collapsible=\"${collapsible}\"\n      ?closed=\"${closed}\"\n      ?showCountInCollapseLabel=\"${showCountInCollapseLabel}\"\n      ?preferAttributes=\"${preferAttributes}\"\n    ></facet-dropdown>`,\n  args: {\n    selectLabel: 'Select an option',\n    key: 'type',\n    overrideLabel: '',\n    showCount: true,\n    showLabel: true,\n    showReset: true,\n    resetText: '',\n    collapsible: false,\n    closed: false,\n    showCountInCollapseLabel: false,\n    preferAttributes: false,\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "Collapsible",
          "type": {
            "text": "Story"
          },
          "default": "{\n  render: ({\n    selectLabel,\n    key,\n    overrideLabel,\n    showCount,\n    showLabel,\n    showReset,\n    resetText,\n    collapsible,\n    closed,\n    showCountInCollapseLabel,\n    preferAttributes,\n  }) =>\n    html`<facet-dropdown\n      selectLabel=\"${selectLabel}\"\n      key=\"${key}\"\n      overrideLabel=\"${overrideLabel}\"\n      ?showLabel=\"${showLabel}\"\n      ?showCount=\"${showCount}\"\n      ?showReset=\"${showReset}\"\n      ?resetText=\"${resetText}\"\n      ?collapsible=\"${collapsible}\"\n      ?closed=\"${closed}\"\n      ?showCountInCollapseLabel=\"${showCountInCollapseLabel}\"\n      ?preferAttributes=\"${preferAttributes}\"\n    ></facet-dropdown>`,\n  args: {\n    selectLabel: 'Select an option',\n    key: 'type',\n    overrideLabel: '',\n    showCount: true,\n    showLabel: true,\n    showReset: true,\n    resetText: '',\n    collapsible: true,\n    closed: true,\n    showCountInCollapseLabel: true,\n    preferAttributes: false,\n  },\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "meta",
            "module": "src/facet-dropdown/facet-dropdown.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Primary",
          "declaration": {
            "name": "Primary",
            "module": "src/facet-dropdown/facet-dropdown.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Collapsible",
          "declaration": {
            "name": "Collapsible",
            "module": "src/facet-dropdown/facet-dropdown.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/facet-dropdown/facet-dropdown.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A facet dropdown element.",
          "name": "FacetDropdown",
          "members": [
            {
              "kind": "field",
              "name": "selectLabel",
              "type": {
                "text": "string"
              },
              "default": "'Choose an option'",
              "description": "The label to show inside the select when no option is selected.",
              "attribute": "selectLabel"
            },
            {
              "kind": "method",
              "name": "applyFacet",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "clearApplied",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "inheritdoc"
            },
            {
              "kind": "method",
              "name": "_getLabelElementSelect",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "description": "Returns the html for the facet's label."
            },
            {
              "kind": "method",
              "name": "_getOptionElement",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "parameters": [
                {
                  "name": "option",
                  "type": {
                    "text": "ResultsType"
                  },
                  "description": "The facet result to render an option for."
                }
              ],
              "description": "Render a single facet option."
            },
            {
              "kind": "method",
              "name": "_getAllOptionsElements",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "description": "Get all the facet option elements."
            },
            {
              "kind": "method",
              "name": "_getSelectElement",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "description": "Get the select element field."
            },
            {
              "kind": "field",
              "name": "key",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The machine name of the facet to render options for.",
              "attribute": "key",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "overrideLabel",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Replace the default facet label with this text.",
              "attribute": "overrideLabel",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "showLabel",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "If the facet's label should be shown.",
              "attribute": "showLabel",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "showCount",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "If counts should be shown next to facet options.",
              "attribute": "showCount",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "showReset",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "If a reset button should be shown for this facet.",
              "attribute": "showReset",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "resetText",
              "default": "`Reset (@count)`",
              "description": "The label to use for the reset/clear facet selection button. `@count` can be used as a token that will be replaced with the number of selected options.",
              "attribute": "resetText",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "collapsible",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Make the facet options collapsible.",
              "attribute": "collapsible",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "closed",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Default a collapsible facet to closed.",
              "attribute": "closed",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "showCountInCollapseLabel",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Show the applied options count in a collapsible facet label.",
              "attribute": "showCountInCollapseLabel",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "preferAttributes",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "When set settings for this facet from the api are ignored.",
              "attribute": "preferAttributes",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "urlAlias",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The key used for this facet in the url and api calls.",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "softLimit",
              "type": {
                "text": "number | undefined"
              },
              "description": "The initial number of top level options to display.",
              "attribute": "softLimit",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "softLimitLessLabel",
              "type": {
                "text": "string | undefined"
              },
              "description": "The label to 'Show Less' options.",
              "attribute": "softLimitLessLabel",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "softLimitMoreLabel",
              "type": {
                "text": "string | undefined"
              },
              "description": "The label to 'Show More' options.",
              "attribute": "softLimitMoreLabel",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "optionsOpen",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "If a collapsible facet is open or closed.",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "facetConfigLoaded",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "facet",
              "type": {
                "text": "SearchFacetsType | undefined"
              },
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "showMoreOpen",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_configOrAttribute",
              "parameters": [
                {
                  "name": "config",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "attribute",
                  "type": {
                    "text": "any"
                  }
                }
              ],
              "description": "Get the correct value for a property based on config and attributes.",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_getOptionId",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_getFacetData",
              "return": {
                "type": {
                  "text": "SearchFacetsType"
                }
              },
              "description": "Get the facet value and configuration for the given key.",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_getLabelElement",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "description": "Returns the html for the facet's label.",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_getCollapsibleLabelElement",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "description": "Returns the html for the facet's label.",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_getSoftLimitElement",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "description": "Returns the html for the button to toggle the soft limit.",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "wrapCollapsible",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "parameters": [
                {
                  "name": "label",
                  "type": {
                    "text": "TemplateResult"
                  }
                },
                {
                  "name": "options",
                  "type": {
                    "text": "TemplateResult"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_getResetElement",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "description": "Returns the html for the facet reset button.",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "shouldRender",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "selectLabel",
              "type": {
                "text": "string"
              },
              "default": "'Choose an option'",
              "description": "The label to show inside the select when no option is selected.",
              "fieldName": "selectLabel"
            },
            {
              "name": "key",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The machine name of the facet to render options for.",
              "fieldName": "key",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "name": "overrideLabel",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Replace the default facet label with this text.",
              "fieldName": "overrideLabel",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "name": "showLabel",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "If the facet's label should be shown.",
              "fieldName": "showLabel",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "name": "showCount",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "If counts should be shown next to facet options.",
              "fieldName": "showCount",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "name": "showReset",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "If a reset button should be shown for this facet.",
              "fieldName": "showReset",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "name": "resetText",
              "default": "`Reset (@count)`",
              "description": "The label to use for the reset/clear facet selection button. `@count` can be used as a token that will be replaced with the number of selected options.",
              "fieldName": "resetText",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "name": "collapsible",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Make the facet options collapsible.",
              "fieldName": "collapsible",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "name": "closed",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Default a collapsible facet to closed.",
              "fieldName": "closed",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "name": "showCountInCollapseLabel",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Show the applied options count in a collapsible facet label.",
              "fieldName": "showCountInCollapseLabel",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "name": "preferAttributes",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "When set settings for this facet from the api are ignored.",
              "fieldName": "preferAttributes",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "name": "softLimit",
              "type": {
                "text": "number | undefined"
              },
              "description": "The initial number of top level options to display.",
              "fieldName": "softLimit",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "name": "softLimitLessLabel",
              "type": {
                "text": "string | undefined"
              },
              "description": "The label to 'Show Less' options.",
              "fieldName": "softLimitLessLabel",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "name": "softLimitMoreLabel",
              "type": {
                "text": "string | undefined"
              },
              "description": "The label to 'Show More' options.",
              "fieldName": "softLimitMoreLabel",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "BaseFacetElement",
            "module": "/src/BaseFacetElement"
          },
          "tagName": "facet-dropdown",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FacetDropdown",
          "declaration": {
            "name": "FacetDropdown",
            "module": "src/facet-dropdown/facet-dropdown.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "facet-dropdown",
          "declaration": {
            "name": "FacetDropdown",
            "module": "src/facet-dropdown/facet-dropdown.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/facet-dropdown-html/facet-dropdown-html.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "meta",
          "type": {
            "text": "Meta"
          },
          "default": "{\n  title: 'Facets/facet-dropdown-html',\n  tags: ['autodocs'],\n  component: 'facet-dropdown-html',\n  decorators: [\n    (story) =>\n      html`\n        <search-root url=\"/mock/api/search/mock-index\" defaultPerPage=\"10\">\n          ${story()}\n        </search-root>\n      `,\n  ],\n}"
        },
        {
          "kind": "variable",
          "name": "Primary",
          "type": {
            "text": "Story"
          },
          "default": "{\n  render: ({\n    htmlSelectLabel,\n    required,\n    multipleSelect,\n    key,\n    overrideLabel,\n    showCount,\n    showLabel,\n    showReset,\n    resetText,\n    collapsible,\n    closed,\n    showCountInCollapseLabel,\n    preferAttributes,\n  }) =>\n    html`<facet-dropdown-html\n      ?htmlSelectLabel=\"${htmlSelectLabel}\"\n      ?required=\"${required}\"\n      ?multipleSelect=\"${multipleSelect}\"\n      key=\"${key}\"\n      overrideLabel=\"${overrideLabel}\"\n      ?showLabel=\"${showLabel}\"\n      ?showCount=\"${showCount}\"\n      ?showReset=\"${showReset}\"\n      ?resetText=\"${resetText}\"\n      ?collapsible=\"${collapsible}\"\n      ?closed=\"${closed}\"\n      ?showCountInCollapseLabel=\"${showCountInCollapseLabel}\"\n      ?preferAttributes=\"${preferAttributes}\"\n    ></facet-dropdown-html>`,\n  args: {\n    htmlSelectLabel: '',\n    required: false,\n    multipleSelect: false,\n    key: 'type',\n    overrideLabel: '',\n    showCount: true,\n    showLabel: true,\n    showReset: true,\n    resetText: '',\n    collapsible: false,\n    closed: false,\n    showCountInCollapseLabel: false,\n    preferAttributes: false,\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "Collapsible",
          "type": {
            "text": "Story"
          },
          "default": "{\n  render: ({\n    htmlSelectLabel,\n    required,\n    multipleSelect,\n    key,\n    overrideLabel,\n    showCount,\n    showLabel,\n    showReset,\n    resetText,\n    collapsible,\n    closed,\n    showCountInCollapseLabel,\n    preferAttributes,\n  }) =>\n    html`<facet-dropdown-html\n      ?htmlSelectLabel=\"${htmlSelectLabel}\"\n      ?required=\"${required}\"\n      ?multipleSelect=\"${multipleSelect}\"\n      key=\"${key}\"\n      overrideLabel=\"${overrideLabel}\"\n      ?showLabel=\"${showLabel}\"\n      ?showCount=\"${showCount}\"\n      ?showReset=\"${showReset}\"\n      ?resetText=\"${resetText}\"\n      ?collapsible=\"${collapsible}\"\n      ?closed=\"${closed}\"\n      ?showCountInCollapseLabel=\"${showCountInCollapseLabel}\"\n      ?preferAttributes=\"${preferAttributes}\"\n    ></facet-dropdown-html>`,\n  args: {\n    htmlSelectLabel: '',\n    required: false,\n    multipleSelect: false,\n    key: 'type',\n    overrideLabel: '',\n    showCount: true,\n    showLabel: true,\n    showReset: true,\n    resetText: '',\n    collapsible: true,\n    closed: true,\n    showCountInCollapseLabel: true,\n    preferAttributes: false,\n  },\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "meta",
            "module": "src/facet-dropdown-html/facet-dropdown-html.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Primary",
          "declaration": {
            "name": "Primary",
            "module": "src/facet-dropdown-html/facet-dropdown-html.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Collapsible",
          "declaration": {
            "name": "Collapsible",
            "module": "src/facet-dropdown-html/facet-dropdown-html.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/facet-dropdown-html/facet-dropdown-html.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A themeable and accessible HTML facet dropdown. Parts of this component may still change.\nBased on https://www.w3.org/WAI/ARIA/apg/patterns/combobox/examples/combobox-select-only/",
          "name": "FacetDropdownHtml",
          "members": [
            {
              "kind": "method",
              "name": "applyFacet",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "_clearApplied",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getHtmlLabel",
              "return": {
                "type": {
                  "text": "string | TemplateResult"
                }
              },
              "description": "HTML helper function *",
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getOptionKey",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "option",
                  "type": {
                    "text": "ResultsType"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getOptionValue",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "option",
                  "type": {
                    "text": "ResultsType"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getOptionLabel",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "option",
                  "type": {
                    "text": "ResultsType"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getAllOptions",
              "return": {
                "type": {
                  "text": "ResultsType[]"
                }
              },
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "isOptionSelected",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "option",
                  "type": {
                    "text": "ResultsType"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "hasSelectedOptions",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getHtmlSelectLabel",
              "return": {
                "type": {
                  "text": "string | TemplateResult"
                }
              },
              "description": "Get the select field label.",
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "optionMouseDown",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "MouseEvent"
                  }
                },
                {
                  "name": "option",
                  "type": {
                    "text": "ResultsType"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "clearSelection",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "applySelection",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "_event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getSelectedOptions",
              "return": {
                "type": {
                  "text": "unknown[]"
                }
              },
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "filterOptions",
              "return": {
                "type": {
                  "text": "ResultsType[]"
                }
              },
              "parameters": [
                {
                  "name": "searchString",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "htmlSelectLabel",
              "type": {
                "text": "string"
              },
              "default": "'Choose an option'",
              "description": "The label to display in the input box.",
              "attribute": "htmlSelectLabel",
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "multipleSelect",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "If a user can select multiple options.",
              "attribute": "multipleSelect",
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "dropdownOpen",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "If the dropdown is open.",
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicates if the user must select a option.",
              "attribute": "required",
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "focusedOption",
              "type": {
                "text": "HTMLElement | null"
              },
              "default": "null",
              "description": "Private: The current option that is focused.",
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "focusOnOpen",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "description": "Private: If focus should be applied to the focusedOption when the dropdown is next opened.",
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "searchTimeout",
              "type": {
                "text": "number | undefined"
              },
              "privacy": "private",
              "description": "Private: The type search timeout.",
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "searchTerm",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "default": "''",
              "description": "Private: The type search string.",
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "inputRef",
              "privacy": "private",
              "description": "Private: A ref to the element that displays the current value.",
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "listboxRef",
              "privacy": "private",
              "description": "Private: A Ref to the listbox element containing the available options.",
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectActions",
              "type": {
                "text": "object"
              },
              "privacy": "private",
              "default": "{\n      Close: 0,\n      CloseSelect: 1,\n      First: 2,\n      Last: 3,\n      Next: 4,\n      Open: 5,\n      PageDown: 6,\n      PageUp: 7,\n      Previous: 8,\n      Select: 9,\n      Type: 10,\n    }",
              "description": "Private: A mapping of actions to the applicable key input code.",
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Map<string, any>"
                  }
                }
              ],
              "description": "Ensure the focusElement is focused when the dropdown is opened.",
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getOptionId",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "option",
                  "type": {
                    "text": "unknown"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_getHtmlLabelElement",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "description": "The label element for the field.",
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_getOptionElement",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "parameters": [
                {
                  "name": "option",
                  "type": {
                    "text": "unknown"
                  },
                  "description": "The option data to render."
                }
              ],
              "description": "Render a single dropdown option.",
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_getAllOptionsElements",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "description": "Get all the option elements.",
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_getHtmlSelectLabelElement",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "description": "Get the select field label element.",
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_getHtmlSelectElement",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "description": "Get the select field element.",
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "close",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Close the dropdown.",
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_getActionFromKey",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ],
              "description": "Map a key press to an action.",
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "onSelectKeyDown",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ],
              "description": "Map a key press to an action and update element.",
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "toggleDropdown",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Toggle the dropdown open or closed.",
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_typeSearch",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "letter",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Search available options based on the entered string.",
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_searchOptions",
              "return": {
                "type": {
                  "text": "string | undefined"
                }
              },
              "parameters": [
                {
                  "name": "searchTerm",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Search the options by the given search term. If the search term repeats the same letter\nit will cycle through options starting with that letter.",
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_getNextOption",
              "parameters": [
                {
                  "name": "action",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "Get the next option to focus on based on the given action.",
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_getSearchTerm",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "char",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Get the search term input",
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_elementInView",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "id",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Determine if an DOM element is visible on the screen.",
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_isScrollable",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "description": "Determine if the options listbox is scrollable.",
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_maintainScrollVisibility",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "id",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Scroll to the given element.",
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_setOptionFocus",
              "parameters": [
                {
                  "name": "id",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Focus on an option in the listbox and remove focus from all other options.",
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "key",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The machine name of the facet to render options for.",
              "attribute": "key",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "overrideLabel",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Replace the default facet label with this text.",
              "attribute": "overrideLabel",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "showLabel",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "If the facet's label should be shown.",
              "attribute": "showLabel",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "showCount",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "If counts should be shown next to facet options.",
              "attribute": "showCount",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "showReset",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "If a reset button should be shown for this facet.",
              "attribute": "showReset",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "resetText",
              "default": "`Reset (@count)`",
              "description": "The label to use for the reset/clear facet selection button. `@count` can be used as a token that will be replaced with the number of selected options.",
              "attribute": "resetText",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "collapsible",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Make the facet options collapsible.",
              "attribute": "collapsible",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "closed",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Default a collapsible facet to closed.",
              "attribute": "closed",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "showCountInCollapseLabel",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Show the applied options count in a collapsible facet label.",
              "attribute": "showCountInCollapseLabel",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "preferAttributes",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "When set settings for this facet from the api are ignored.",
              "attribute": "preferAttributes",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "urlAlias",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The key used for this facet in the url and api calls.",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "softLimit",
              "type": {
                "text": "number | undefined"
              },
              "description": "The initial number of top level options to display.",
              "attribute": "softLimit",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "softLimitLessLabel",
              "type": {
                "text": "string | undefined"
              },
              "description": "The label to 'Show Less' options.",
              "attribute": "softLimitLessLabel",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "softLimitMoreLabel",
              "type": {
                "text": "string | undefined"
              },
              "description": "The label to 'Show More' options.",
              "attribute": "softLimitMoreLabel",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "optionsOpen",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "If a collapsible facet is open or closed.",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "facetConfigLoaded",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "facet",
              "type": {
                "text": "SearchFacetsType | undefined"
              },
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "showMoreOpen",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_configOrAttribute",
              "parameters": [
                {
                  "name": "config",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "attribute",
                  "type": {
                    "text": "any"
                  }
                }
              ],
              "description": "Get the correct value for a property based on config and attributes.",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_getOptionId",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_getFacetData",
              "return": {
                "type": {
                  "text": "SearchFacetsType"
                }
              },
              "description": "Get the facet value and configuration for the given key.",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_getLabelElement",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "description": "Returns the html for the facet's label.",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_getCollapsibleLabelElement",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "description": "Returns the html for the facet's label.",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_getSoftLimitElement",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "description": "Returns the html for the button to toggle the soft limit.",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "wrapCollapsible",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "parameters": [
                {
                  "name": "label",
                  "type": {
                    "text": "TemplateResult"
                  }
                },
                {
                  "name": "options",
                  "type": {
                    "text": "TemplateResult"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_getResetElement",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "description": "Returns the html for the facet reset button.",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "shouldRender",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "DropdownMixin",
              "module": "/src/BaseDropdownElement"
            }
          ],
          "superclass": {
            "name": "BaseFacetElement",
            "module": "/src/BaseFacetElement"
          },
          "tagName": "facet-dropdown-html",
          "customElement": true,
          "attributes": [
            {
              "name": "htmlSelectLabel",
              "type": {
                "text": "string"
              },
              "default": "'Choose an option'",
              "description": "The label to display in the input box.",
              "fieldName": "htmlSelectLabel",
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "name": "multipleSelect",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "If a user can select multiple options.",
              "fieldName": "multipleSelect",
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicates if the user must select a option.",
              "fieldName": "required",
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "name": "key",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The machine name of the facet to render options for.",
              "fieldName": "key",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "name": "overrideLabel",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Replace the default facet label with this text.",
              "fieldName": "overrideLabel",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "name": "showLabel",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "If the facet's label should be shown.",
              "fieldName": "showLabel",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "name": "showCount",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "If counts should be shown next to facet options.",
              "fieldName": "showCount",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "name": "showReset",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "If a reset button should be shown for this facet.",
              "fieldName": "showReset",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "name": "resetText",
              "default": "`Reset (@count)`",
              "description": "The label to use for the reset/clear facet selection button. `@count` can be used as a token that will be replaced with the number of selected options.",
              "fieldName": "resetText",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "name": "collapsible",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Make the facet options collapsible.",
              "fieldName": "collapsible",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "name": "closed",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Default a collapsible facet to closed.",
              "fieldName": "closed",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "name": "showCountInCollapseLabel",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Show the applied options count in a collapsible facet label.",
              "fieldName": "showCountInCollapseLabel",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "name": "preferAttributes",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "When set settings for this facet from the api are ignored.",
              "fieldName": "preferAttributes",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "name": "softLimit",
              "type": {
                "text": "number | undefined"
              },
              "description": "The initial number of top level options to display.",
              "fieldName": "softLimit",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "name": "softLimitLessLabel",
              "type": {
                "text": "string | undefined"
              },
              "description": "The label to 'Show Less' options.",
              "fieldName": "softLimitLessLabel",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "name": "softLimitMoreLabel",
              "type": {
                "text": "string | undefined"
              },
              "description": "The label to 'Show More' options.",
              "fieldName": "softLimitMoreLabel",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FacetDropdownHtml",
          "declaration": {
            "name": "FacetDropdownHtml",
            "module": "src/facet-dropdown-html/facet-dropdown-html.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "facet-dropdown-html",
          "declaration": {
            "name": "FacetDropdownHtml",
            "module": "src/facet-dropdown-html/facet-dropdown-html.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/facet-checkbox/facet-checkbox.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "meta",
          "type": {
            "text": "Meta"
          },
          "default": "{\n  title: 'Facets/facet-checkbox',\n  tags: ['autodocs'],\n  component: 'facet-checkbox',\n  decorators: [\n    (story) =>\n      html`\n        <search-root url=\"/mock/api/search/mock-index\" defaultPerPage=\"10\">\n          ${story()}\n        </search-root>\n      `,\n  ],\n}"
        },
        {
          "kind": "variable",
          "name": "Checkboxes",
          "type": {
            "text": "Story"
          },
          "default": "{\n  render: ({\n    useRadios,\n    key,\n    overrideLabel,\n    showCount,\n    showLabel,\n    showReset,\n    resetText,\n    collapsible,\n    closed,\n    showCountInCollapseLabel,\n    preferAttributes,\n    softLimit,\n    softLimitLessLabel,\n    softLimitMoreLabel,\n  }) =>\n    html`<facet-checkbox\n      ?useRadios=\"${useRadios}\"\n      key=\"${key}\"\n      overrideLabel=\"${overrideLabel}\"\n      ?showLabel=\"${showLabel}\"\n      ?showCount=\"${showCount}\"\n      ?showReset=\"${showReset}\"\n      ?resetText=\"${resetText}\"\n      ?collapsible=\"${collapsible}\"\n      ?closed=\"${closed}\"\n      ?showCountInCollapseLabel=\"${showCountInCollapseLabel}\"\n      ?preferAttributes=\"${preferAttributes}\"\n      ?softLimit=\"${softLimit}\"\n      ?softLimitLessLabel=\"${softLimitLessLabel}\"\n      ?softLimitMoreLabel=\"${softLimitMoreLabel}\"\n    ></facet-checkbox>`,\n  args: {\n    useRadios: false,\n    key: 'type',\n    showCount: true,\n    overrideLabel: '',\n    showLabel: true,\n    showReset: true,\n    resetText: '',\n    collapsible: false,\n    closed: false,\n    showCountInCollapseLabel: false,\n    preferAttributes: false,\n    softLimit: 0,\n    softLimitLessLabel: 'Show Less',\n    softLimitMoreLabel: 'Show More',\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "Radios",
          "type": {
            "text": "Story"
          },
          "default": "{\n  render: ({\n    useRadios,\n    key,\n    overrideLabel,\n    showCount,\n    showLabel,\n    showReset,\n    resetText,\n    collapsible,\n    closed,\n    showCountInCollapseLabel,\n    preferAttributes,\n    softLimit,\n    softLimitLessLabel,\n    softLimitMoreLabel,\n  }) =>\n    html`<facet-checkbox\n      ?useRadios=\"${useRadios}\"\n      key=\"${key}\"\n      overrideLabel=\"${overrideLabel}\"\n      ?showLabel=\"${showLabel}\"\n      ?showCount=\"${showCount}\"\n      ?showReset=\"${showReset}\"\n      ?resetText=\"${resetText}\"\n      ?collapsible=\"${collapsible}\"\n      ?closed=\"${closed}\"\n      ?showCountInCollapseLabel=\"${showCountInCollapseLabel}\"\n      ?preferAttributes=\"${preferAttributes}\"\n      ?softLimit=\"${softLimit}\"\n      ?softLimitLessLabel=\"${softLimitLessLabel}\"\n      ?softLimitMoreLabel=\"${softLimitMoreLabel}\"\n    ></facet-checkbox>`,\n  args: {\n    useRadios: true,\n    key: 'type',\n    showCount: true,\n    overrideLabel: '',\n    showLabel: true,\n    showReset: true,\n    resetText: '',\n    collapsible: false,\n    closed: false,\n    showCountInCollapseLabel: false,\n    preferAttributes: false,\n    softLimit: 0,\n    softLimitLessLabel: 'Show Less',\n    softLimitMoreLabel: 'Show More',\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "Collapsible",
          "type": {
            "text": "Story"
          },
          "default": "{\n  render: ({\n    useRadios,\n    key,\n    overrideLabel,\n    showCount,\n    showLabel,\n    showReset,\n    resetText,\n    collapsible,\n    closed,\n    showCountInCollapseLabel,\n    preferAttributes,\n    softLimit,\n    softLimitLessLabel,\n    softLimitMoreLabel,\n  }) =>\n    html`<facet-checkbox\n      ?useRadios=\"${useRadios}\"\n      key=\"${key}\"\n      overrideLabel=\"${overrideLabel}\"\n      ?showLabel=\"${showLabel}\"\n      ?showCount=\"${showCount}\"\n      ?showReset=\"${showReset}\"\n      ?resetText=\"${resetText}\"\n      ?collapsible=\"${collapsible}\"\n      ?closed=\"${closed}\"\n      ?showCountInCollapseLabel=\"${showCountInCollapseLabel}\"\n      ?preferAttributes=\"${preferAttributes}\"\n      ?softLimit=\"${softLimit}\"\n      ?softLimitLessLabel=\"${softLimitLessLabel}\"\n      ?softLimitMoreLabel=\"${softLimitMoreLabel}\"\n    ></facet-checkbox>`,\n  args: {\n    useRadios: false,\n    key: 'type',\n    showCount: true,\n    overrideLabel: '',\n    showLabel: true,\n    showReset: true,\n    resetText: '',\n    collapsible: true,\n    closed: true,\n    showCountInCollapseLabel: true,\n    preferAttributes: false,\n    softLimit: 0,\n    softLimitLessLabel: 'Show Less',\n    softLimitMoreLabel: 'Show More',\n  },\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "meta",
            "module": "src/facet-checkbox/facet-checkbox.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Checkboxes",
          "declaration": {
            "name": "Checkboxes",
            "module": "src/facet-checkbox/facet-checkbox.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Radios",
          "declaration": {
            "name": "Radios",
            "module": "src/facet-checkbox/facet-checkbox.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Collapsible",
          "declaration": {
            "name": "Collapsible",
            "module": "src/facet-checkbox/facet-checkbox.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/facet-checkbox/facet-checkbox.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A facet checkbox element.",
          "name": "FacetCheckbox",
          "members": [
            {
              "kind": "field",
              "name": "useRadios",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Use radio inputs instead of checkboxes. Also ensures only one option can be chosen at a time.",
              "attribute": "useRadios"
            },
            {
              "kind": "method",
              "name": "applyFacet",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "clearApplied",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_getOptions",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "parameters": [
                {
                  "name": "children",
                  "default": "undefined",
                  "type": {
                    "text": "undefined | ResultsType[]"
                  }
                }
              ],
              "description": "Returns the html for the facet's options."
            },
            {
              "kind": "field",
              "name": "key",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The machine name of the facet to render options for.",
              "attribute": "key",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "overrideLabel",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Replace the default facet label with this text.",
              "attribute": "overrideLabel",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "showLabel",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "If the facet's label should be shown.",
              "attribute": "showLabel",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "showCount",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "If counts should be shown next to facet options.",
              "attribute": "showCount",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "showReset",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "If a reset button should be shown for this facet.",
              "attribute": "showReset",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "resetText",
              "default": "`Reset (@count)`",
              "description": "The label to use for the reset/clear facet selection button. `@count` can be used as a token that will be replaced with the number of selected options.",
              "attribute": "resetText",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "collapsible",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Make the facet options collapsible.",
              "attribute": "collapsible",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "closed",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Default a collapsible facet to closed.",
              "attribute": "closed",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "showCountInCollapseLabel",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Show the applied options count in a collapsible facet label.",
              "attribute": "showCountInCollapseLabel",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "preferAttributes",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "When set settings for this facet from the api are ignored.",
              "attribute": "preferAttributes",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "urlAlias",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The key used for this facet in the url and api calls.",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "softLimit",
              "type": {
                "text": "number | undefined"
              },
              "description": "The initial number of top level options to display.",
              "attribute": "softLimit",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "softLimitLessLabel",
              "type": {
                "text": "string | undefined"
              },
              "description": "The label to 'Show Less' options.",
              "attribute": "softLimitLessLabel",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "softLimitMoreLabel",
              "type": {
                "text": "string | undefined"
              },
              "description": "The label to 'Show More' options.",
              "attribute": "softLimitMoreLabel",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "optionsOpen",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "If a collapsible facet is open or closed.",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "facetConfigLoaded",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "facet",
              "type": {
                "text": "SearchFacetsType | undefined"
              },
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "showMoreOpen",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_configOrAttribute",
              "parameters": [
                {
                  "name": "config",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "attribute",
                  "type": {
                    "text": "any"
                  }
                }
              ],
              "description": "Get the correct value for a property based on config and attributes.",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_getOptionId",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_getFacetData",
              "return": {
                "type": {
                  "text": "SearchFacetsType"
                }
              },
              "description": "Get the facet value and configuration for the given key.",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_getLabelElement",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "description": "Returns the html for the facet's label.",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_getCollapsibleLabelElement",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "description": "Returns the html for the facet's label.",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_getSoftLimitElement",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "description": "Returns the html for the button to toggle the soft limit.",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "wrapCollapsible",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "parameters": [
                {
                  "name": "label",
                  "type": {
                    "text": "TemplateResult"
                  }
                },
                {
                  "name": "options",
                  "type": {
                    "text": "TemplateResult"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_getResetElement",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "description": "Returns the html for the facet reset button.",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "shouldRender",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "useRadios",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Use radio inputs instead of checkboxes. Also ensures only one option can be chosen at a time.",
              "fieldName": "useRadios"
            },
            {
              "name": "key",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The machine name of the facet to render options for.",
              "fieldName": "key",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "name": "overrideLabel",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Replace the default facet label with this text.",
              "fieldName": "overrideLabel",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "name": "showLabel",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "If the facet's label should be shown.",
              "fieldName": "showLabel",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "name": "showCount",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "If counts should be shown next to facet options.",
              "fieldName": "showCount",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "name": "showReset",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "If a reset button should be shown for this facet.",
              "fieldName": "showReset",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "name": "resetText",
              "default": "`Reset (@count)`",
              "description": "The label to use for the reset/clear facet selection button. `@count` can be used as a token that will be replaced with the number of selected options.",
              "fieldName": "resetText",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "name": "collapsible",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Make the facet options collapsible.",
              "fieldName": "collapsible",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "name": "closed",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Default a collapsible facet to closed.",
              "fieldName": "closed",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "name": "showCountInCollapseLabel",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Show the applied options count in a collapsible facet label.",
              "fieldName": "showCountInCollapseLabel",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "name": "preferAttributes",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "When set settings for this facet from the api are ignored.",
              "fieldName": "preferAttributes",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "name": "softLimit",
              "type": {
                "text": "number | undefined"
              },
              "description": "The initial number of top level options to display.",
              "fieldName": "softLimit",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "name": "softLimitLessLabel",
              "type": {
                "text": "string | undefined"
              },
              "description": "The label to 'Show Less' options.",
              "fieldName": "softLimitLessLabel",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            },
            {
              "name": "softLimitMoreLabel",
              "type": {
                "text": "string | undefined"
              },
              "description": "The label to 'Show More' options.",
              "fieldName": "softLimitMoreLabel",
              "inheritedFrom": {
                "name": "BaseFacetElement",
                "module": "src/BaseFacetElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "BaseFacetElement",
            "module": "/src/BaseFacetElement"
          },
          "tagName": "facet-checkbox",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FacetCheckbox",
          "declaration": {
            "name": "FacetCheckbox",
            "module": "src/facet-checkbox/facet-checkbox.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "facet-checkbox",
          "declaration": {
            "name": "FacetCheckbox",
            "module": "src/facet-checkbox/facet-checkbox.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/search-box/search-box.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "meta",
          "type": {
            "text": "Meta"
          },
          "default": "{\n  title: 'Components/search-box',\n  tags: ['autodocs'],\n  component: 'search-box',\n}"
        },
        {
          "kind": "variable",
          "name": "Primary",
          "type": {
            "text": "Story"
          },
          "default": "{\n  render: ({url, submitText, ariaLabelText, placeHolderText}) =>\n    html`<search-box\n      url=\"${url}\"\n      submitText=\"${submitText}\"\n      ariaLabelText=\"${ariaLabelText}\"\n      placeHolderText=\"${placeHolderText}\"\n    ></search-box>`,\n  args: {\n    url: '#',\n    submitText: 'Search',\n    ariaLabelText: 'Search',\n    placeHolderText: 'Search',\n  },\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "meta",
            "module": "src/search-box/search-box.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Primary",
          "declaration": {
            "name": "Primary",
            "module": "src/search-box/search-box.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/search-box/search-box.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A simple search box that can be placed in the header or other parts of a site to allow a user to search and be redirected to a search page.",
          "name": "SearchBox",
          "members": [
            {
              "kind": "field",
              "name": "url",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The absolute or relative url of the page to redirect the search query to.",
              "attribute": "url"
            },
            {
              "kind": "field",
              "name": "submitText",
              "type": {
                "text": "string"
              },
              "default": "'Search'",
              "description": "The text for the submit button.",
              "attribute": "submitText"
            },
            {
              "kind": "field",
              "name": "ariaLabelText",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The aria label text for the input field.",
              "attribute": "ariaLabelText"
            },
            {
              "kind": "field",
              "name": "placeHolderText",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The placeholder text for the input field.",
              "attribute": "placeHolderText"
            },
            {
              "kind": "method",
              "name": "createRenderRoot",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "HTMLElement | DocumentFragment"
                }
              }
            },
            {
              "kind": "method",
              "name": "_submit",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "SubmitEvent"
                  },
                  "description": "The form submit event."
                }
              ],
              "description": "Handles redirecting the user to the correct page on form submission."
            }
          ],
          "attributes": [
            {
              "name": "url",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The absolute or relative url of the page to redirect the search query to.",
              "fieldName": "url"
            },
            {
              "name": "submitText",
              "type": {
                "text": "string"
              },
              "default": "'Search'",
              "description": "The text for the submit button.",
              "fieldName": "submitText"
            },
            {
              "name": "ariaLabelText",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The aria label text for the input field.",
              "fieldName": "ariaLabelText"
            },
            {
              "name": "placeHolderText",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The placeholder text for the input field.",
              "fieldName": "placeHolderText"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "search-box",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SearchBox",
          "declaration": {
            "name": "SearchBox",
            "module": "src/search-box/search-box.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "search-box",
          "declaration": {
            "name": "SearchBox",
            "module": "src/search-box/search-box.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/search-applied-facets/search-applied-facets.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "meta",
          "type": {
            "text": "Meta"
          },
          "default": "{\n  title: 'Facets/search-applied-facets',\n  tags: ['autodocs'],\n  component: 'search-applied-facets',\n  decorators: [\n    (story) =>\n      html`\n        <search-root\n          url=\"/mock/api/search/mock-index?f[0]=type:page\"\n          defaultPerPage=\"10\"\n        >\n          ${story()}\n        </search-root>\n      `,\n  ],\n  parameters: {\n    query: {\n      'f:type': 'page',\n    },\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "Primary",
          "type": {
            "text": "Story"
          },
          "default": "{\n  render: ({\n    removeText,\n    resetText,\n    showReset,\n    showIndividual,\n  }) => html` <search-applied-facets\n    removeText=\"${removeText}\"\n    resetText=\"${resetText}\"\n    ?showReset=\"${showReset}\"\n    ?showIndividual=\"${showIndividual}\"\n  ></search-applied-facets>`,\n  args: {\n    removeText: '',\n    resetText: '',\n    showReset: true,\n    showIndividual: true,\n  },\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "meta",
            "module": "src/search-applied-facets/search-applied-facets.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Primary",
          "declaration": {
            "name": "Primary",
            "module": "src/search-applied-facets/search-applied-facets.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/search-applied-facets/search-applied-facets.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "An element that shows the applied facets and allows for one or all of them to be removed.",
          "name": "SearchAppliedFacets",
          "members": [
            {
              "kind": "field",
              "name": "removeText",
              "type": {
                "text": "string"
              },
              "default": "'Remove @value'",
              "description": "The label to use for individual facet buttons. `@value` can be used as a token that will be replaced with each facet's value.",
              "attribute": "removeText"
            },
            {
              "kind": "field",
              "name": "resetText",
              "type": {
                "text": "string"
              },
              "default": "'Reset (@count)'",
              "description": "The label to use for the reset/clear all button. `@count` can be used as a token that will be replaced with the number of applied facets.",
              "attribute": "resetText"
            },
            {
              "kind": "field",
              "name": "showReset",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Show the facet reset button.",
              "attribute": "showReset"
            },
            {
              "kind": "field",
              "name": "showIndividual",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Show individual facet remove buttons.",
              "attribute": "showIndividual"
            },
            {
              "kind": "method",
              "name": "_getApplied",
              "return": {
                "type": {
                  "text": "FacetValue[]"
                }
              },
              "description": "Get all the applied facets from the current context's query."
            },
            {
              "kind": "method",
              "name": "_getResetElement",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "description": "Get the reset button element."
            },
            {
              "kind": "method",
              "name": "_getIndividualFacets",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "parameters": [
                {
                  "name": "applied",
                  "type": {
                    "text": "FacetValue[]"
                  },
                  "description": "An array of applied facets."
                }
              ],
              "description": "Get the individual facet buttons."
            }
          ],
          "attributes": [
            {
              "name": "removeText",
              "type": {
                "text": "string"
              },
              "default": "'Remove @value'",
              "description": "The label to use for individual facet buttons. `@value` can be used as a token that will be replaced with each facet's value.",
              "fieldName": "removeText"
            },
            {
              "name": "resetText",
              "type": {
                "text": "string"
              },
              "default": "'Reset (@count)'",
              "description": "The label to use for the reset/clear all button. `@count` can be used as a token that will be replaced with the number of applied facets.",
              "fieldName": "resetText"
            },
            {
              "name": "showReset",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Show the facet reset button.",
              "fieldName": "showReset"
            },
            {
              "name": "showIndividual",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Show individual facet remove buttons.",
              "fieldName": "showIndividual"
            }
          ],
          "superclass": {
            "name": "BaseSearchElement",
            "module": "/src/BaseSearchElement"
          },
          "tagName": "search-applied-facets",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SearchAppliedFacets",
          "declaration": {
            "name": "SearchAppliedFacets",
            "module": "src/search-applied-facets/search-applied-facets.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "search-applied-facets",
          "declaration": {
            "name": "SearchAppliedFacets",
            "module": "src/search-applied-facets/search-applied-facets.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/search-dialog-pane/search-dialog-pane.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "meta",
          "type": {
            "text": "Meta"
          },
          "default": "{\n  title: 'Components/search-dialog-pane',\n  tags: ['autodocs'],\n  component: 'search-sort',\n  decorators: [\n    (story) =>\n      html`\n        <search-root\n          url=\"/mock/api/search/mock-index\"\n          dialogBreakpoint=\"800\"\n          defaultPerPage=\"10\"\n        >\n          ${story()}\n        </search-root>\n      `,\n  ],\n}"
        },
        {
          "kind": "variable",
          "name": "Primary",
          "type": {
            "text": "Story"
          },
          "default": "{\n  render: ({closeText, closePosition, modal}) =>\n    html`<search-dialog-pane\n      closeText=\"${closeText}\"\n      closePosition=\"${closePosition}\"\n      ?modal=\"${modal}\"\n      ><h1>Some pane content</h1></search-dialog-pane\n    >`,\n  args: {\n    closeText: 'Close',\n    closePosition: 'both',\n    modal: false,\n  },\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "meta",
            "module": "src/search-dialog-pane/search-dialog-pane.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Primary",
          "declaration": {
            "name": "Primary",
            "module": "src/search-dialog-pane/search-dialog-pane.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/search-dialog-pane/search-dialog-pane.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A dropdown element to choose how to sort the search results.",
          "name": "SearchDialogPane",
          "members": [
            {
              "kind": "field",
              "name": "closeText",
              "type": {
                "text": "string"
              },
              "default": "'Close'",
              "description": "The label for the close button in the dialog.",
              "attribute": "closeText"
            },
            {
              "kind": "field",
              "name": "closePosition",
              "type": {
                "text": "'top' | 'bottom' | 'none' | 'both'"
              },
              "default": "'top'",
              "description": "The position of the close button within the dialog.",
              "attribute": "closePosition"
            },
            {
              "kind": "field",
              "name": "modal",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "If the dialog should be a modal.",
              "attribute": "modal"
            },
            {
              "kind": "field",
              "name": "useDialog",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "method",
              "name": "_handleResize",
              "description": "Listen to window resizing to determine if the pane should a dialog or not."
            },
            {
              "kind": "method",
              "name": "_toggleDialog",
              "privacy": "public",
              "parameters": [
                {
                  "name": "dialog",
                  "type": {
                    "text": "HTMLDialogElement"
                  }
                },
                {
                  "name": "state",
                  "type": {
                    "text": "'open' | 'close'"
                  }
                }
              ],
              "description": "Open or close the dialog."
            },
            {
              "kind": "method",
              "name": "_closeDialog",
              "description": "Close the dialog."
            }
          ],
          "attributes": [
            {
              "name": "closeText",
              "type": {
                "text": "string"
              },
              "default": "'Close'",
              "description": "The label for the close button in the dialog.",
              "fieldName": "closeText"
            },
            {
              "name": "closePosition",
              "type": {
                "text": "'top' | 'bottom' | 'none' | 'both'"
              },
              "default": "'top'",
              "description": "The position of the close button within the dialog.",
              "fieldName": "closePosition"
            },
            {
              "name": "modal",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "If the dialog should be a modal.",
              "fieldName": "modal"
            }
          ],
          "superclass": {
            "name": "BaseSearchElement",
            "module": "/src/BaseSearchElement"
          },
          "tagName": "search-dialog-pane",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SearchDialogPane",
          "declaration": {
            "name": "SearchDialogPane",
            "module": "src/search-dialog-pane/search-dialog-pane.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "search-dialog-pane",
          "declaration": {
            "name": "SearchDialogPane",
            "module": "src/search-dialog-pane/search-dialog-pane.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/search-dialog-toggle/search-dialog-toggle.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "meta",
          "type": {
            "text": "Meta"
          },
          "default": "{\n  title: 'Components/search-dialog-toggle',\n  tags: ['autodocs'],\n  component: 'search-sort',\n  decorators: [\n    (story) =>\n      html`\n        <search-root\n          url=\"/mock/api/search/mock-index\"\n          dialogBreakpoint=\"800\"\n          defaultPerPage=\"10\"\n        >\n          ${story()}\n        </search-root>\n      `,\n  ],\n}"
        },
        {
          "kind": "variable",
          "name": "Primary",
          "type": {
            "text": "Story"
          },
          "default": "{\n  render: ({dialogOpenText, dialogCloseText, showAppliedCount}) =>\n    html`<search-dialog-toggle\n      dialogOpenText=\"${dialogOpenText}\"\n      dialogCloseText=\"${dialogCloseText}\"\n      ?showAppliedCount=\"${showAppliedCount}\"\n    ></search-dialog-toggle>`,\n  args: {\n    dialogOpenText: 'Filters',\n    dialogCloseText: 'Close',\n    showAppliedCount: false,\n  },\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "meta",
            "module": "src/search-dialog-toggle/search-dialog-toggle.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Primary",
          "declaration": {
            "name": "Primary",
            "module": "src/search-dialog-toggle/search-dialog-toggle.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/search-dialog-toggle/search-dialog-toggle.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A toggle button to control the display of the search-dialog-pane component.",
          "name": "SearchDialogToggle",
          "members": [
            {
              "kind": "field",
              "name": "aboveBreakpointText",
              "type": {
                "text": "string"
              },
              "default": "'Filters'",
              "description": "The label to display when the pane is not a toggle.",
              "attribute": "aboveBreakpointText"
            },
            {
              "kind": "field",
              "name": "dialogOpenText",
              "type": {
                "text": "string"
              },
              "default": "'Filters'",
              "description": "The label to display when the pane is closed.",
              "attribute": "dialogOpenText"
            },
            {
              "kind": "field",
              "name": "dialogCloseText",
              "type": {
                "text": "string"
              },
              "default": "'Close'",
              "description": "The label to display when the pane is open.",
              "attribute": "dialogCloseText"
            },
            {
              "kind": "field",
              "name": "showAppliedCount",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "If the label should include the count of currently applied facets.",
              "attribute": "showAppliedCount"
            },
            {
              "kind": "field",
              "name": "showButton",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "method",
              "name": "_handleResize",
              "description": "Listen to window resizing to determine if the dialog should be a toggle or not."
            },
            {
              "kind": "method",
              "name": "_getLabelText",
              "description": "Get the text to display."
            }
          ],
          "attributes": [
            {
              "name": "aboveBreakpointText",
              "type": {
                "text": "string"
              },
              "default": "'Filters'",
              "description": "The label to display when the pane is not a toggle.",
              "fieldName": "aboveBreakpointText"
            },
            {
              "name": "dialogOpenText",
              "type": {
                "text": "string"
              },
              "default": "'Filters'",
              "description": "The label to display when the pane is closed.",
              "fieldName": "dialogOpenText"
            },
            {
              "name": "dialogCloseText",
              "type": {
                "text": "string"
              },
              "default": "'Close'",
              "description": "The label to display when the pane is open.",
              "fieldName": "dialogCloseText"
            },
            {
              "name": "showAppliedCount",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "If the label should include the count of currently applied facets.",
              "fieldName": "showAppliedCount"
            }
          ],
          "superclass": {
            "name": "BaseSearchElement",
            "module": "/src/BaseSearchElement"
          },
          "tagName": "search-dialog-toggle",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SearchDialogToggle",
          "declaration": {
            "name": "SearchDialogToggle",
            "module": "src/search-dialog-toggle/search-dialog-toggle.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "search-dialog-toggle",
          "declaration": {
            "name": "SearchDialogToggle",
            "module": "src/search-dialog-toggle/search-dialog-toggle.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/search-input/search-input.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "meta",
          "type": {
            "text": "Meta"
          },
          "default": "{\n  title: 'Components/search-input',\n  tags: ['autodocs'],\n  component: 'search-input',\n  decorators: [\n    (story) =>\n      html`\n        <search-root url=\"/mock/api/search/mock-index\" defaultPerPage=\"10\">\n          ${story()}\n        </search-root>\n      `,\n  ],\n}"
        },
        {
          "kind": "variable",
          "name": "Primary",
          "type": {
            "text": "Story"
          },
          "default": "{\n  render: ({placeHolderText, labelText, clearText}) =>\n    html`<search-input\n      placeHolderText=\"${placeHolderText}\"\n      labelText=\"${labelText}\"\n      clearText=\"${clearText}\"\n    ></search-input>`,\n  args: {\n    placeHolderText: 'Search',\n    labelText: 'Search',\n    clearText: 'Remove',\n  },\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "meta",
            "module": "src/search-input/search-input.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Primary",
          "declaration": {
            "name": "Primary",
            "module": "src/search-input/search-input.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/search-input/search-input.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A search input that can be placed on a search page to allow a user to search fulltext fields from an index.",
          "name": "SearchInput",
          "members": [
            {
              "kind": "field",
              "name": "placeHolderText",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The placeholder text for the input field.",
              "attribute": "placeHolderText"
            },
            {
              "kind": "field",
              "name": "labelText",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The text for the submit button.",
              "attribute": "labelText"
            },
            {
              "kind": "field",
              "name": "clearText",
              "type": {
                "text": "string"
              },
              "default": "'Remove'",
              "description": "The text for the clear input button.",
              "attribute": "clearText"
            },
            {
              "kind": "method",
              "name": "_querySearch",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "SubmitEvent"
                  },
                  "description": "The form submit event."
                }
              ],
              "description": "Handles replacing the current query with a new query containing only the new keyword input."
            },
            {
              "kind": "method",
              "name": "_clearSearch"
            }
          ],
          "attributes": [
            {
              "name": "placeHolderText",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The placeholder text for the input field.",
              "fieldName": "placeHolderText"
            },
            {
              "name": "labelText",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The text for the submit button.",
              "fieldName": "labelText"
            },
            {
              "name": "clearText",
              "type": {
                "text": "string"
              },
              "default": "'Remove'",
              "description": "The text for the clear input button.",
              "fieldName": "clearText"
            }
          ],
          "superclass": {
            "name": "BaseSearchElement",
            "module": "/src/BaseSearchElement"
          },
          "tagName": "search-input",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SearchInput",
          "declaration": {
            "name": "SearchInput",
            "module": "src/search-input/search-input.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "search-input",
          "declaration": {
            "name": "SearchInput",
            "module": "src/search-input/search-input.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/search-no-results-message/search-no-results-message.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "meta",
          "type": {
            "text": "Meta"
          },
          "default": "{\n  title: 'Components/search-no-results-message',\n  tags: ['autodocs'],\n  component: 'search-no-results-message',\n}"
        },
        {
          "kind": "variable",
          "name": "NoSearchResults",
          "type": {
            "text": "Story"
          },
          "default": "{\n  render: ({child}) =>\n    html`<search-root url=${MockNoResults.url} defaultPerPage=\"10\"\n      ><search-no-results-message\n        >${unsafeHTML(child)}</search-no-results-message\n      ></search-root\n    >`,\n  args: {\n    child: '<h2>There are no search results</h2>',\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "WithSearchResults",
          "type": {
            "text": "Story"
          },
          "default": "{\n  render: ({child}) =>\n    html`<search-root url=${MockData.url} defaultPerPage=\"10\"\n      ><search-no-results-message\n        >${unsafeHTML(child)}</search-no-results-message\n      ></search-root\n    >`,\n  args: {\n    child: '<h2>There are no search results</h2>',\n  },\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "meta",
            "module": "src/search-no-results-message/search-no-results-message.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "NoSearchResults",
          "declaration": {
            "name": "NoSearchResults",
            "module": "src/search-no-results-message/search-no-results-message.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "WithSearchResults",
          "declaration": {
            "name": "WithSearchResults",
            "module": "src/search-no-results-message/search-no-results-message.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/search-no-results-message/search-no-results-message.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A container that only displays its children when the search returns no results.",
          "name": "SearchNoResultsMessage",
          "members": [
            {
              "kind": "method",
              "name": "createRenderRoot",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "HTMLElement | DocumentFragment"
                }
              }
            }
          ],
          "superclass": {
            "name": "BaseSearchElement",
            "module": "/src/BaseSearchElement"
          },
          "tagName": "search-no-results-message",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SearchNoResultsMessage",
          "declaration": {
            "name": "SearchNoResultsMessage",
            "module": "src/search-no-results-message/search-no-results-message.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "search-no-results-message",
          "declaration": {
            "name": "SearchNoResultsMessage",
            "module": "src/search-no-results-message/search-no-results-message.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/search-result-element-default/search-result-element-default.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "meta",
          "type": {
            "text": "Meta"
          },
          "default": "{\n  title: 'Components/search-result-element-default',\n  tags: ['autodocs'],\n  component: 'search-result-element-default',\n  decorators: [\n    (story) =>\n      html`\n        <search-root url=\"/mock/api/search/mock-index\" defaultPerPage=\"10\">\n          ${story()}\n        </search-root>\n      `,\n  ],\n}"
        },
        {
          "kind": "variable",
          "name": "Primary",
          "type": {
            "text": "Story"
          },
          "default": "{\n  render: ({data}) =>\n    html`<search-result-element-default\n      data=\"${data}\"\n    ></search-result-element-default>`,\n  args: {\n    data: JSON.stringify(MockData.data.search_results[0]),\n  },\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "meta",
            "module": "src/search-result-element-default/search-result-element-default.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Primary",
          "declaration": {
            "name": "Primary",
            "module": "src/search-result-element-default/search-result-element-default.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/search-result-element-default/search-result-element-default.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A default result render element that shows the raw JSON for each result in a collapsible details element.",
          "name": "SearchResultElementDefault",
          "members": [
            {
              "kind": "field",
              "name": "data",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "description": "The result data.",
              "attribute": "data"
            }
          ],
          "attributes": [
            {
              "name": "data",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "description": "The result data.",
              "fieldName": "data"
            }
          ],
          "superclass": {
            "name": "BaseSearchElement",
            "module": "/src/BaseSearchElement"
          },
          "tagName": "search-result-element-default",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SearchResultElementDefault",
          "declaration": {
            "name": "SearchResultElementDefault",
            "module": "src/search-result-element-default/search-result-element-default.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "search-result-element-default",
          "declaration": {
            "name": "SearchResultElementDefault",
            "module": "src/search-result-element-default/search-result-element-default.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/search-result-element-rendered/search-result-element-rendered.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "meta",
          "type": {
            "text": "Meta"
          },
          "default": "{\n  title: 'Components/search-result-element-rendered',\n  tags: ['autodocs'],\n  component: 'search-result-element-rendered',\n  decorators: [\n    (story) =>\n      html`\n        <search-root url=\"/mock/api/search/mock-index\" defaultPerPage=\"10\">\n          ${story()}\n        </search-root>\n      `,\n  ],\n}"
        },
        {
          "kind": "variable",
          "name": "Primary",
          "type": {
            "text": "Story"
          },
          "default": "{\n  render: ({data, settings}) =>\n    html`<search-result-element-rendered\n      data=\"${data}\"\n      settings=\"${settings}\"\n    ></search-result-element-rendered>`,\n  args: {\n    data: JSON.stringify(MockData.data.search_results[0]),\n    settings: JSON.stringify({field: 'rendered_item'}),\n  },\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "meta",
            "module": "src/search-result-element-rendered/search-result-element-rendered.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Primary",
          "declaration": {
            "name": "Primary",
            "module": "src/search-result-element-rendered/search-result-element-rendered.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/search-result-element-rendered/search-result-element-rendered.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A result render element that renders an HTML field from the result.",
          "name": "SearchResultElementRendered",
          "members": [
            {
              "kind": "field",
              "name": "settings",
              "type": {
                "text": "{\n    field?: string;\n    [key: string]: any;\n  }"
              },
              "default": "{}",
              "description": "The settings for this element type. This should contain a `key` property with the name of the field to render HTML from.",
              "attribute": "settings"
            },
            {
              "kind": "field",
              "name": "data",
              "type": {
                "text": "{[key: string]: any}"
              },
              "default": "{}",
              "description": "The result data.",
              "attribute": "data"
            }
          ],
          "attributes": [
            {
              "name": "settings",
              "type": {
                "text": "{\n    field?: string;\n    [key: string]: any;\n  }"
              },
              "default": "{}",
              "description": "The settings for this element type. This should contain a `key` property with the name of the field to render HTML from.",
              "fieldName": "settings"
            },
            {
              "name": "data",
              "type": {
                "text": "{[key: string]: any}"
              },
              "default": "{}",
              "description": "The result data.",
              "fieldName": "data"
            }
          ],
          "superclass": {
            "name": "BaseSearchElement",
            "module": "/src/BaseSearchElement"
          },
          "tagName": "search-result-element-rendered",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SearchResultElementRendered",
          "declaration": {
            "name": "SearchResultElementRendered",
            "module": "src/search-result-element-rendered/search-result-element-rendered.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "search-result-element-rendered",
          "declaration": {
            "name": "SearchResultElementRendered",
            "module": "src/search-result-element-rendered/search-result-element-rendered.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/search-result-summary/search-result-summary.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "meta",
          "type": {
            "text": "Meta"
          },
          "default": "{\n  title: 'Components/search-result-summary',\n  tags: ['autodocs'],\n  component: 'search-result-summary',\n  decorators: [\n    (story) =>\n      html`\n        <search-root url=\"/mock/api/search/mock-index\" defaultPerPage=\"10\">\n          ${story()}\n        </search-root>\n      `,\n  ],\n}"
        },
        {
          "kind": "variable",
          "name": "Primary",
          "type": {
            "text": "Story"
          },
          "default": "{\n  render: ({summaryText}) =>\n    html`<search-result-summary\n      summaryText=\"${summaryText}\"\n    ></search-result-summary>`,\n  args: {\n    summaryText: '@start - @end of @total',\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "WithTime",
          "type": {
            "text": "Story"
          },
          "default": "{\n  render: ({summaryText}) =>\n    html`<search-result-summary\n      summaryText=\"${summaryText}\"\n    ></search-result-summary>`,\n  args: {\n    summaryText: 'Found @total results in @times',\n  },\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "meta",
            "module": "src/search-result-summary/search-result-summary.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Primary",
          "declaration": {
            "name": "Primary",
            "module": "src/search-result-summary/search-result-summary.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "WithTime",
          "declaration": {
            "name": "WithTime",
            "module": "src/search-result-summary/search-result-summary.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/search-result-summary/search-result-summary.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Displays the start, end, total, searchQuery, or time taken for the current search page.",
          "name": "SearchResultSummary",
          "members": [
            {
              "kind": "field",
              "name": "summaryText",
              "type": {
                "text": "string"
              },
              "default": "'@start - @end of @total'",
              "description": "The text to display. `@start`,`@end`,`@total`,`@searchQuery`,`@time`(in seconds) tokens are available and will be replaced with the values from the search.",
              "attribute": "summaryText"
            },
            {
              "kind": "method",
              "name": "_getNumbers",
              "return": {
                "type": {
                  "text": "SearchResultsCounts"
                }
              },
              "description": "Returns the start, end, and total numbers for the current search page."
            },
            {
              "kind": "method",
              "name": "_getSummaryElement",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "description": "Get the summary element."
            }
          ],
          "attributes": [
            {
              "name": "summaryText",
              "type": {
                "text": "string"
              },
              "default": "'@start - @end of @total'",
              "description": "The text to display. `@start`,`@end`,`@total`,`@searchQuery`,`@time`(in seconds) tokens are available and will be replaced with the values from the search.",
              "fieldName": "summaryText"
            }
          ],
          "superclass": {
            "name": "BaseSearchElement",
            "module": "/src/BaseSearchElement"
          },
          "tagName": "search-result-summary",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SearchResultSummary",
          "declaration": {
            "name": "SearchResultSummary",
            "module": "src/search-result-summary/search-result-summary.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "search-result-summary",
          "declaration": {
            "name": "SearchResultSummary",
            "module": "src/search-result-summary/search-result-summary.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/search-results/search-results.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "meta",
          "type": {
            "text": "Meta"
          },
          "default": "{\n  title: 'Components/search-results',\n  tags: ['autodocs'],\n  component: 'search-results',\n  decorators: [\n    (story) =>\n      html`\n        <search-root url=\"/mock/api/search/mock-index\" defaultPerPage=\"10\">\n          ${story()}\n        </search-root>\n      `,\n  ],\n}"
        },
        {
          "kind": "variable",
          "name": "Primary",
          "type": {
            "text": "Story"
          },
          "default": "{\n  render: ({resultField, mappings}) => html` <search-results\n    ?resultField=\"${resultField}\"\n    ?mappings=\"${mappings}\"\n  ></search-results>`,\n  args: {\n    resultField: '',\n    mappings: '',\n  },\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "meta",
            "module": "src/search-results/search-results.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Primary",
          "declaration": {
            "name": "Primary",
            "module": "src/search-results/search-results.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/search-results/search-results.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A container for the search results. Handles rendering each result in its correct element.",
          "name": "SearchResults",
          "members": [
            {
              "kind": "field",
              "name": "resultField",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The field from the index to use to map a result to an element.",
              "attribute": "resultField"
            },
            {
              "kind": "field",
              "name": "mappings",
              "type": {
                "text": "SearchResultMappingType[]"
              },
              "default": "[]",
              "description": "An array of objects that contain the element, keys, and settings for results. I.e. [{\"element\":\"search-result-element-rendered\",\"keys\":[\"article\",\"page\"],\"settings\":{\"key\":\"rendered_result\"}}]. 'default' can be used as a fallback for unmapped results. When using the display switcher keys can be appended with the display id i.e `-grid` to make mapping specific to a display type.",
              "attribute": "mappings"
            },
            {
              "kind": "field",
              "name": "configLoaded",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "processedMappings",
              "type": {
                "text": "ProcessedMappings"
              },
              "default": "{}"
            },
            {
              "kind": "method",
              "name": "_mapResult",
              "return": {
                "type": {
                  "text": "ProcessedMapping | undefined"
                }
              },
              "parameters": [
                {
                  "name": "result",
                  "type": {
                    "text": "SearchResultType"
                  }
                }
              ],
              "description": "Get the element type and settings for the given result."
            },
            {
              "kind": "method",
              "name": "_getResults",
              "return": {
                "type": {
                  "text": "TemplateResult | null"
                }
              },
              "description": "Get the result elements correctly mapped to the right element type."
            }
          ],
          "attributes": [
            {
              "name": "resultField",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The field from the index to use to map a result to an element.",
              "fieldName": "resultField"
            },
            {
              "name": "mappings",
              "type": {
                "text": "SearchResultMappingType[]"
              },
              "default": "[]",
              "description": "An array of objects that contain the element, keys, and settings for results. I.e. [{\"element\":\"search-result-element-rendered\",\"keys\":[\"article\",\"page\"],\"settings\":{\"key\":\"rendered_result\"}}]. 'default' can be used as a fallback for unmapped results. When using the display switcher keys can be appended with the display id i.e `-grid` to make mapping specific to a display type.",
              "fieldName": "mappings"
            }
          ],
          "superclass": {
            "name": "BaseSearchElement",
            "module": "/src/BaseSearchElement"
          },
          "tagName": "search-results",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SearchResults",
          "declaration": {
            "name": "SearchResults",
            "module": "src/search-results/search-results.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "search-results",
          "declaration": {
            "name": "SearchResults",
            "module": "src/search-results/search-results.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/search-results-per-page/search-results-per-page.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "meta",
          "type": {
            "text": "Meta"
          },
          "default": "{\n  title: 'Components/search-results-per-page',\n  tags: ['autodocs'],\n  component: 'search-results-per-page',\n  decorators: [\n    (story) =>\n      html`\n        <search-root url=\"/mock/api/search/mock-index\" defaultPerPage=\"10\">\n          ${story()}\n        </search-root>\n      `,\n  ],\n}"
        },
        {
          "kind": "variable",
          "name": "Select",
          "type": {
            "text": "Story"
          },
          "default": "{\n  render: ({type, labelText, options}) =>\n    html`<search-results-per-page\n      type=\"${type}\"\n      labelText=\"${labelText}\"\n      options=\"${options}\"\n    ></search-results-per-page>`,\n  args: {\n    type: 'select',\n    labelText: 'Per page',\n    options: JSON.stringify([\n      {key: '10', label: '10'},\n      {key: '20', label: '20'},\n      {key: '50', label: '50'},\n    ]),\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "List",
          "type": {
            "text": "Story"
          },
          "default": "{\n  render: ({type, labelText, options}) =>\n    html`<search-results-per-page\n      type=\"${type}\"\n      labelText=\"${labelText}\"\n      options=\"${options}\"\n    ></search-results-per-page>`,\n  args: {\n    type: 'list',\n    labelText: 'Per page',\n    options: JSON.stringify([\n      {key: '10', label: '10'},\n      {key: '20', label: '20'},\n      {key: '50', label: '50'},\n    ]),\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "HTML",
          "type": {
            "text": "Story"
          },
          "default": "{\n  render: ({type, labelText, options}) =>\n    html`<search-results-per-page\n      type=\"${type}\"\n      labelText=\"${labelText}\"\n      options=\"${options}\"\n    ></search-results-per-page>`,\n  args: {\n    type: 'html',\n    labelText: 'Per page',\n    options: JSON.stringify([\n      {key: '10', label: '10'},\n      {key: '20', label: '20'},\n      {key: '50', label: '50'},\n    ]),\n  },\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "meta",
            "module": "src/search-results-per-page/search-results-per-page.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Select",
          "declaration": {
            "name": "Select",
            "module": "src/search-results-per-page/search-results-per-page.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "List",
          "declaration": {
            "name": "List",
            "module": "src/search-results-per-page/search-results-per-page.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "HTML",
          "declaration": {
            "name": "HTML",
            "module": "src/search-results-per-page/search-results-per-page.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/search-results-per-page/search-results-per-page.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A element to choose how many results per page to display.",
          "name": "SearchResultsPerPage",
          "members": [
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Indicates if the user must select a option.",
              "attribute": "required",
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "'select' | 'list' | 'html'"
              },
              "default": "'select'",
              "description": "HTML element to use when rendering options.",
              "attribute": "type"
            },
            {
              "kind": "field",
              "name": "labelText",
              "type": {
                "text": "string"
              },
              "default": "'Per page'",
              "description": "The label text to use for the select field.",
              "attribute": "labelText"
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "SimpleValue[]"
              },
              "default": "[]",
              "description": "An array of available options to display structured like {\"label\": \"Example\", \"value\": \"10\"}.",
              "attribute": "options"
            },
            {
              "kind": "field",
              "name": "indexConfigLoaded",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "method",
              "name": "_queryPerPage",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "limit",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "description": "Update the current query with a new page limit and reset the current page."
            },
            {
              "kind": "method",
              "name": "_getSelected",
              "return": {
                "type": {
                  "text": "SimpleValue | undefined"
                }
              },
              "description": "Get the currently selected page limit."
            },
            {
              "kind": "method",
              "name": "_getSelectOption",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "description": "Get the element for all available options."
            },
            {
              "kind": "method",
              "name": "_getListOption",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "description": "Get the element for all available options."
            },
            {
              "kind": "method",
              "name": "_getSelect",
              "description": "Get the elements for a vanilla select field."
            },
            {
              "kind": "method",
              "name": "_getList",
              "description": "Get the elements for a list field."
            },
            {
              "kind": "method",
              "name": "_getHtml",
              "description": "Get the elements for a html select field."
            },
            {
              "kind": "method",
              "name": "getHtmlLabel",
              "return": {
                "type": {
                  "text": "string | TemplateResult"
                }
              },
              "description": "HTML helper function *",
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getOptionKey",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "option",
                  "type": {
                    "text": "SimpleValue"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getOptionValue",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "option",
                  "type": {
                    "text": "SimpleValue"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getOptionLabel",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "option",
                  "type": {
                    "text": "SimpleValue"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getAllOptions",
              "return": {
                "type": {
                  "text": "SimpleValue[]"
                }
              },
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "isOptionSelected",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "option",
                  "type": {
                    "text": "SimpleValue"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "hasSelectedOptions",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getHtmlSelectLabel",
              "return": {
                "type": {
                  "text": "string | TemplateResult"
                }
              },
              "description": "Get the select field label.",
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "optionMouseDown",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "MouseEvent"
                  }
                },
                {
                  "name": "option",
                  "type": {
                    "text": "SimpleValue"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "applySelection",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "_event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getSelectedOptions",
              "return": {
                "type": {
                  "text": "SimpleValue[]"
                }
              },
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "filterOptions",
              "return": {
                "type": {
                  "text": "SimpleValue[]"
                }
              },
              "parameters": [
                {
                  "name": "searchString",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "htmlSelectLabel",
              "type": {
                "text": "string"
              },
              "default": "'Choose an option'",
              "description": "The label to display in the input box.",
              "attribute": "htmlSelectLabel",
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "multipleSelect",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "If a user can select multiple options.",
              "attribute": "multipleSelect",
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "dropdownOpen",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "If the dropdown is open.",
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "focusedOption",
              "type": {
                "text": "HTMLElement | null"
              },
              "default": "null",
              "description": "Private: The current option that is focused.",
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "focusOnOpen",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "description": "Private: If focus should be applied to the focusedOption when the dropdown is next opened.",
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "searchTimeout",
              "type": {
                "text": "number | undefined"
              },
              "privacy": "private",
              "description": "Private: The type search timeout.",
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "searchTerm",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "default": "''",
              "description": "Private: The type search string.",
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "inputRef",
              "privacy": "private",
              "description": "Private: A ref to the element that displays the current value.",
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "listboxRef",
              "privacy": "private",
              "description": "Private: A Ref to the listbox element containing the available options.",
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectActions",
              "type": {
                "text": "object"
              },
              "privacy": "private",
              "default": "{\n      Close: 0,\n      CloseSelect: 1,\n      First: 2,\n      Last: 3,\n      Next: 4,\n      Open: 5,\n      PageDown: 6,\n      PageUp: 7,\n      Previous: 8,\n      Select: 9,\n      Type: 10,\n    }",
              "description": "Private: A mapping of actions to the applicable key input code.",
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Map<string, any>"
                  }
                }
              ],
              "description": "Ensure the focusElement is focused when the dropdown is opened.",
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getOptionId",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "option",
                  "type": {
                    "text": "unknown"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "clearSelection",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_getHtmlLabelElement",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "description": "The label element for the field.",
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_getOptionElement",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "parameters": [
                {
                  "name": "option",
                  "type": {
                    "text": "unknown"
                  },
                  "description": "The option data to render."
                }
              ],
              "description": "Render a single dropdown option.",
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_getAllOptionsElements",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "description": "Get all the option elements.",
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_getHtmlSelectLabelElement",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "description": "Get the select field label element.",
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_getHtmlSelectElement",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "description": "Get the select field element.",
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "close",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Close the dropdown.",
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_getActionFromKey",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ],
              "description": "Map a key press to an action.",
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "onSelectKeyDown",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ],
              "description": "Map a key press to an action and update element.",
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "toggleDropdown",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Toggle the dropdown open or closed.",
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_typeSearch",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "letter",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Search available options based on the entered string.",
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_searchOptions",
              "return": {
                "type": {
                  "text": "string | undefined"
                }
              },
              "parameters": [
                {
                  "name": "searchTerm",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Search the options by the given search term. If the search term repeats the same letter\nit will cycle through options starting with that letter.",
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_getNextOption",
              "parameters": [
                {
                  "name": "action",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "Get the next option to focus on based on the given action.",
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_getSearchTerm",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "char",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Get the search term input",
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_elementInView",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "id",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Determine if an DOM element is visible on the screen.",
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_isScrollable",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "description": "Determine if the options listbox is scrollable.",
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_maintainScrollVisibility",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "id",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Scroll to the given element.",
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_setOptionFocus",
              "parameters": [
                {
                  "name": "id",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Focus on an option in the listbox and remove focus from all other options.",
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "type",
              "type": {
                "text": "'select' | 'list' | 'html'"
              },
              "default": "'select'",
              "description": "HTML element to use when rendering options.",
              "fieldName": "type"
            },
            {
              "name": "labelText",
              "type": {
                "text": "string"
              },
              "default": "'Per page'",
              "description": "The label text to use for the select field.",
              "fieldName": "labelText"
            },
            {
              "name": "options",
              "type": {
                "text": "SimpleValue[]"
              },
              "default": "[]",
              "description": "An array of available options to display structured like {\"label\": \"Example\", \"value\": \"10\"}.",
              "fieldName": "options"
            },
            {
              "name": "htmlSelectLabel",
              "type": {
                "text": "string"
              },
              "default": "'Choose an option'",
              "description": "The label to display in the input box.",
              "fieldName": "htmlSelectLabel",
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "name": "multipleSelect",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "If a user can select multiple options.",
              "fieldName": "multipleSelect",
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicates if the user must select a option.",
              "fieldName": "required",
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "DropdownMixin",
              "module": "/src/BaseDropdownElement"
            }
          ],
          "superclass": {
            "name": "BaseSearchElement",
            "module": "/src/BaseSearchElement"
          },
          "tagName": "search-results-per-page",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SearchResultsPerPage",
          "declaration": {
            "name": "SearchResultsPerPage",
            "module": "src/search-results-per-page/search-results-per-page.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "search-results-per-page",
          "declaration": {
            "name": "SearchResultsPerPage",
            "module": "src/search-results-per-page/search-results-per-page.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/search-results-switcher/search-results-switcher.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "meta",
          "type": {
            "text": "Meta"
          },
          "default": "{\n  title: 'Components/search-results-switcher',\n  tags: ['autodocs'],\n  component: 'search-results-switcher',\n  decorators: [\n    (story) =>\n      html`\n        <search-root url=\"/mock/api/search/mock-index\" defaultPerPage=\"10\">\n          ${story()}\n        </search-root>\n      `,\n  ],\n}"
        },
        {
          "kind": "variable",
          "name": "Primary",
          "type": {
            "text": "Story"
          },
          "default": "{\n  render: ({options}) =>\n    html`<search-results-switcher\n      options=${options}\n    ></search-results-switcher>`,\n  args: {\n    options: JSON.stringify([\n      {\n        key: 'list',\n        label: 'List',\n      },\n      {\n        key: 'grid',\n        label: 'Grid',\n      },\n    ]),\n  },\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "meta",
            "module": "src/search-results-switcher/search-results-switcher.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Primary",
          "declaration": {
            "name": "Primary",
            "module": "src/search-results-switcher/search-results-switcher.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/search-results-switcher/search-results-switcher.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Switch how the results render.",
          "name": "SearchResultsSwitcher",
          "members": [
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "SimpleValue[]"
              },
              "default": "[]",
              "description": "An array of objects containing a key and label for each available display I.e. [{\"key\":\"list\",\"label\":\"List\"},{\"key\":\"grid\",\"label\":\"Grid\"}].",
              "attribute": "options"
            },
            {
              "kind": "field",
              "name": "indexConfigLoaded",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "method",
              "name": "_getOptionElement",
              "return": {
                "type": {
                  "text": "string | TemplateResult"
                }
              },
              "parameters": [
                {
                  "name": "option",
                  "type": {
                    "text": "SimpleValue"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_getAllOptions",
              "return": {
                "type": {
                  "text": "string | TemplateResult"
                }
              }
            }
          ],
          "attributes": [
            {
              "name": "options",
              "type": {
                "text": "SimpleValue[]"
              },
              "default": "[]",
              "description": "An array of objects containing a key and label for each available display I.e. [{\"key\":\"list\",\"label\":\"List\"},{\"key\":\"grid\",\"label\":\"Grid\"}].",
              "fieldName": "options"
            }
          ],
          "superclass": {
            "name": "BaseSearchElement",
            "module": "/src/BaseSearchElement"
          },
          "tagName": "search-results-switcher",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SearchResultsSwitcher",
          "declaration": {
            "name": "SearchResultsSwitcher",
            "module": "src/search-results-switcher/search-results-switcher.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "search-results-switcher",
          "declaration": {
            "name": "SearchResultsSwitcher",
            "module": "src/search-results-switcher/search-results-switcher.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/search-root/search-root.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "meta",
          "type": {
            "text": "Meta"
          },
          "default": "{\n  title: 'Components/search-root',\n  tags: ['autodocs'],\n  component: 'search-root',\n}"
        },
        {
          "kind": "variable",
          "name": "Primary",
          "type": {
            "text": "Story"
          },
          "default": "{\n  render: ({\n    url,\n    additionalParams,\n    defaultPerPage,\n    defaultResultDisplay,\n    noPageUrlUpdate,\n  }) =>\n    html`<search-root\n      url=\"${url}\"\n      ?additionalParams=\"${additionalParams}\"\n      ?defaultPerPage=\"${defaultPerPage}\"\n      ?defaultResultDisplay=\"${defaultResultDisplay}\"\n      ?noPageUrlUpdate=\"${noPageUrlUpdate}\"\n    ></search-root>`,\n  args: {\n    url: '/mock/api/search/mock-index',\n    additionalParams: '',\n    defaultPerPage: 10,\n    defaultResultDisplay: '',\n    noPageUrlUpdate: false,\n  },\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "meta",
            "module": "src/search-root/search-root.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Primary",
          "declaration": {
            "name": "Primary",
            "module": "src/search-root/search-root.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/search-root/search-root.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The root container for a component based search experience. All search components on the search page must be a child of this component to work correctly.",
          "name": "SearchRoot",
          "members": [
            {
              "kind": "field",
              "name": "context",
              "type": {
                "text": "SearchContext"
              },
              "default": "{\n    url: '',\n    query: new URLSearchParams(window.location.search),\n    responseReady: false,\n    defaultPerPage: '10',\n    updateUrl: true,\n    resultDisplay: 'list',\n    additionalParams: '',\n    dialogOpen: false,\n    dialogBreakpoint: 0,\n    thirdPartySettings: {},\n  }",
              "description": "The current search context."
            },
            {
              "kind": "field",
              "name": "url",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The decoupled search api endpoint to query for results. Search query params added to this url will be used for the initial search if no search query params are present in the page url, they will also be added to the page url on search load, and can be removed by components.",
              "attribute": "url"
            },
            {
              "kind": "field",
              "name": "additionalParams",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "A valid search query parameter string starting with '?'. These parameters will be added to all searches but will not be added to the page url.",
              "attribute": "additionalParams"
            },
            {
              "kind": "field",
              "name": "defaultPerPage",
              "type": {
                "text": "string"
              },
              "default": "'10'",
              "description": "The default number of results to show per page.",
              "attribute": "defaultPerPage"
            },
            {
              "kind": "field",
              "name": "defaultResultDisplay",
              "type": {
                "text": "'list' | 'grid' | string"
              },
              "default": "'list'",
              "description": "The default result display.",
              "attribute": "defaultResultDisplay"
            },
            {
              "kind": "field",
              "name": "noPageUrlUpdate",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "When set the page url is not updated with search query parameters.",
              "attribute": "noPageUrlUpdate"
            },
            {
              "kind": "field",
              "name": "dialogBreakpoint",
              "type": {
                "text": "number"
              },
              "default": "-1",
              "description": "The maximum screen width where the search-dialog-pane/button will act as a toggle. Set -1 to always apply.",
              "attribute": "dialogBreakpoint"
            },
            {
              "kind": "field",
              "name": "root",
              "type": {
                "text": "ContextRoot"
              },
              "default": "new ContextRoot()",
              "description": "The current context root."
            },
            {
              "kind": "method",
              "name": "createRenderRoot",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "HTMLElement | DocumentFragment"
                }
              },
              "description": "Override the base Lit render root to disable shadow dom."
            }
          ],
          "attributes": [
            {
              "name": "url",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The decoupled search api endpoint to query for results. Search query params added to this url will be used for the initial search if no search query params are present in the page url, they will also be added to the page url on search load, and can be removed by components.",
              "fieldName": "url"
            },
            {
              "name": "additionalParams",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "A valid search query parameter string starting with '?'. These parameters will be added to all searches but will not be added to the page url.",
              "fieldName": "additionalParams"
            },
            {
              "name": "defaultPerPage",
              "type": {
                "text": "string"
              },
              "default": "'10'",
              "description": "The default number of results to show per page.",
              "fieldName": "defaultPerPage"
            },
            {
              "name": "defaultResultDisplay",
              "type": {
                "text": "'list' | 'grid' | string"
              },
              "default": "'list'",
              "description": "The default result display.",
              "fieldName": "defaultResultDisplay"
            },
            {
              "name": "noPageUrlUpdate",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "When set the page url is not updated with search query parameters.",
              "fieldName": "noPageUrlUpdate"
            },
            {
              "name": "dialogBreakpoint",
              "type": {
                "text": "number"
              },
              "default": "-1",
              "description": "The maximum screen width where the search-dialog-pane/button will act as a toggle. Set -1 to always apply.",
              "fieldName": "dialogBreakpoint"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "search-root",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SearchRoot",
          "declaration": {
            "name": "SearchRoot",
            "module": "src/search-root/search-root.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "search-root",
          "declaration": {
            "name": "SearchRoot",
            "module": "src/search-root/search-root.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/search-simple-pager/search-simple-pager.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "meta",
          "type": {
            "text": "Meta"
          },
          "default": "{\n  title: 'Components/search-simple-pager',\n  tags: ['autodocs'],\n  component: 'search-simple-pager',\n  decorators: [\n    (story) =>\n      html`\n        <search-root url=\"/mock/api/search/mock-index\" defaultPerPage=\"10\">\n          ${story()}\n        </search-root>\n      `,\n  ],\n}"
        },
        {
          "kind": "variable",
          "name": "Simple",
          "type": {
            "text": "Story"
          },
          "default": "{\n  render: ({\n    pagesToDisplay,\n    firstLastPagesToDisplay,\n    prevLabel,\n    nextLabel,\n    firstLabel,\n    lastLabel,\n    showNextPrev,\n    showFirstLast,\n  }) =>\n    html`<search-simple-pager\n      pagesToDisplay=\"${pagesToDisplay}\"\n      ?firstLastPagesToDisplay=\"${firstLastPagesToDisplay}\"\n      prevLabel=\"${prevLabel}\"\n      nextLabel=\"${nextLabel}\"\n      firstLabel=\"${firstLabel}\"\n      lastLabel=\"${lastLabel}\"\n      ?showNextPrev=${showNextPrev}\n      ?showFirstLast=${showFirstLast}\n    ></search-simple-pager>`,\n  args: {\n    pagesToDisplay: 0,\n    firstLastPagesToDisplay: 0,\n    prevLabel: '<',\n    nextLabel: '>',\n    firstLabel: 'First',\n    lastLabel: 'Last',\n    showNextPrev: true,\n    showFirstLast: false,\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "Everything",
          "type": {
            "text": "Story"
          },
          "default": "{\n  render: ({\n    pagesToDisplay,\n    firstLastPagesToDisplay,\n    prevLabel,\n    nextLabel,\n    firstLabel,\n    lastLabel,\n    showNextPrev,\n    showFirstLast,\n  }) =>\n    html`<search-simple-pager\n      pagesToDisplay=\"${pagesToDisplay}\"\n      ?firstLastPagesToDisplay=\"${firstLastPagesToDisplay}\"\n      prevLabel=\"${prevLabel}\"\n      nextLabel=\"${nextLabel}\"\n      firstLabel=\"${firstLabel}\"\n      lastLabel=\"${lastLabel}\"\n      ?showNextPrev=${showNextPrev}\n      ?showFirstLast=${showFirstLast}\n    ></search-simple-pager>`,\n  args: {\n    pagesToDisplay: 2,\n    firstLastPagesToDisplay: 0,\n    prevLabel: '<',\n    nextLabel: '>',\n    firstLabel: 'First',\n    lastLabel: 'Last',\n    showNextPrev: true,\n    showFirstLast: true,\n  },\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "meta",
            "module": "src/search-simple-pager/search-simple-pager.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Simple",
          "declaration": {
            "name": "Simple",
            "module": "src/search-simple-pager/search-simple-pager.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Everything",
          "declaration": {
            "name": "Everything",
            "module": "src/search-simple-pager/search-simple-pager.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/search-simple-pager/search-simple-pager.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A simple search pager that can display the current page, previous and next pages, previous and next buttons, first and last page buttons.",
          "name": "SearchSimplePager",
          "members": [
            {
              "kind": "field",
              "name": "prevLabel",
              "type": {
                "text": "string"
              },
              "default": "'<'",
              "description": "The text to display for the previous button.",
              "attribute": "prevLabel"
            },
            {
              "kind": "field",
              "name": "nextLabel",
              "type": {
                "text": "string"
              },
              "default": "'>'",
              "description": "The text to display for the next button.",
              "attribute": "nextLabel"
            },
            {
              "kind": "field",
              "name": "showNextPrev",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "If the next and previous buttons should be shown.",
              "attribute": "showNextPrev"
            },
            {
              "kind": "field",
              "name": "showFirstLast",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "If the first and last buttons should be shown",
              "attribute": "showFirstLast"
            },
            {
              "kind": "field",
              "name": "firstLabel",
              "type": {
                "text": "string"
              },
              "default": "'First page'",
              "description": "The text to display for the first page button.",
              "attribute": "firstLabel"
            },
            {
              "kind": "field",
              "name": "lastLabel",
              "type": {
                "text": "string"
              },
              "default": "'Last page'",
              "description": "The text to display for the last page button.",
              "attribute": "lastLabel"
            },
            {
              "kind": "field",
              "name": "pagesToDisplay",
              "type": {
                "text": "number | undefined"
              },
              "default": "undefined",
              "description": "Number of pages to display on either side of the current page.",
              "attribute": "pagesToDisplay"
            },
            {
              "kind": "field",
              "name": "firstLastPagesToDisplay",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "Number of pages to display to the left/right of the first/last page if different then pagesToDisplay.",
              "attribute": "firstLastPagesToDisplay"
            },
            {
              "kind": "method",
              "name": "_changePage",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "newPage",
                  "type": {
                    "text": "number"
                  },
                  "description": "The page to go to."
                }
              ],
              "description": "Update the current query with a new page"
            },
            {
              "kind": "method",
              "name": "_getCurrentPageElement",
              "description": "Get the element to display the current page."
            },
            {
              "kind": "method",
              "name": "_getWrappingPagesElements",
              "return": {
                "type": {
                  "text": "{\n    prev: TemplateResult[];\n    next: TemplateResult[];\n  }"
                }
              },
              "description": "Get pages to display before and after the current page."
            },
            {
              "kind": "method",
              "name": "_getWrappingButtonElements",
              "return": {
                "type": {
                  "text": "{\n    prev: TemplateResult;\n    next: TemplateResult;\n    first: TemplateResult;\n    last: TemplateResult;\n  }"
                }
              },
              "description": "Get the next, previous, first, last button elements."
            }
          ],
          "attributes": [
            {
              "name": "prevLabel",
              "type": {
                "text": "string"
              },
              "default": "'<'",
              "description": "The text to display for the previous button.",
              "fieldName": "prevLabel"
            },
            {
              "name": "nextLabel",
              "type": {
                "text": "string"
              },
              "default": "'>'",
              "description": "The text to display for the next button.",
              "fieldName": "nextLabel"
            },
            {
              "name": "showNextPrev",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "If the next and previous buttons should be shown.",
              "fieldName": "showNextPrev"
            },
            {
              "name": "showFirstLast",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "If the first and last buttons should be shown",
              "fieldName": "showFirstLast"
            },
            {
              "name": "firstLabel",
              "type": {
                "text": "string"
              },
              "default": "'First page'",
              "description": "The text to display for the first page button.",
              "fieldName": "firstLabel"
            },
            {
              "name": "lastLabel",
              "type": {
                "text": "string"
              },
              "default": "'Last page'",
              "description": "The text to display for the last page button.",
              "fieldName": "lastLabel"
            },
            {
              "name": "pagesToDisplay",
              "type": {
                "text": "number | undefined"
              },
              "default": "undefined",
              "description": "Number of pages to display on either side of the current page.",
              "resolveInitializer": {
                "module": "src/search-simple-pager/search-simple-pager.ts"
              },
              "fieldName": "pagesToDisplay"
            },
            {
              "name": "firstLastPagesToDisplay",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "Number of pages to display to the left/right of the first/last page if different then pagesToDisplay.",
              "fieldName": "firstLastPagesToDisplay"
            }
          ],
          "superclass": {
            "name": "BaseSearchElement",
            "module": "/src/BaseSearchElement"
          },
          "tagName": "search-simple-pager",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SearchSimplePager",
          "declaration": {
            "name": "SearchSimplePager",
            "module": "src/search-simple-pager/search-simple-pager.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "search-simple-pager",
          "declaration": {
            "name": "SearchSimplePager",
            "module": "src/search-simple-pager/search-simple-pager.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/search-sort/search-sort.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "meta",
          "type": {
            "text": "Meta"
          },
          "default": "{\n  title: 'Components/search-sort',\n  tags: ['autodocs'],\n  component: 'search-sort',\n  decorators: [\n    (story) =>\n      html`\n        <search-root url=\"/mock/api/search/mock-index\" defaultPerPage=\"10\">\n          ${story()}\n        </search-root>\n      `,\n  ],\n}"
        },
        {
          "kind": "variable",
          "name": "Select",
          "type": {
            "text": "Story"
          },
          "default": "{\n  render: ({type, labelText, sorts}) =>\n    html`<search-sort\n      type=\"${type}\"\n      labelText=\"${labelText}\"\n      sorts=\"${sorts}\"\n    ></search-sort>`,\n  args: {\n    type: 'select',\n    labelText: 'Sort',\n    sorts: JSON.stringify([\n      {key: 'search_api_relevance', label: 'Relevance', order: 'desc'},\n      {key: 'title', label: 'A-Z', order: 'asc'},\n      {key: 'title', label: 'Z-A', order: 'desc'},\n    ]),\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "List",
          "type": {
            "text": "Story"
          },
          "default": "{\n  render: ({type, labelText, sorts}) =>\n    html`<search-sort\n      type=\"${type}\"\n      labelText=\"${labelText}\"\n      sorts=\"${sorts}\"\n    ></search-sort>`,\n  args: {\n    type: 'list',\n    labelText: 'Sort',\n    sorts: JSON.stringify([\n      {key: 'search_api_relevance', label: 'Relevance', order: 'desc'},\n      {key: 'title', label: 'A-Z', order: 'asc'},\n      {key: 'title', label: 'Z-A', order: 'desc'},\n    ]),\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "HTML",
          "type": {
            "text": "Story"
          },
          "default": "{\n  render: ({type, labelText, sorts}) =>\n    html`<search-sort\n      type=\"${type}\"\n      labelText=\"${labelText}\"\n      sorts=\"${sorts}\"\n    ></search-sort>`,\n  args: {\n    type: 'html',\n    labelText: 'Sort',\n    sorts: JSON.stringify([\n      {key: 'search_api_relevance', label: 'Relevance', order: 'desc'},\n      {key: 'title', label: 'A-Z', order: 'asc'},\n      {key: 'title', label: 'Z-A', order: 'desc'},\n    ]),\n  },\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "meta",
            "module": "src/search-sort/search-sort.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Select",
          "declaration": {
            "name": "Select",
            "module": "src/search-sort/search-sort.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "List",
          "declaration": {
            "name": "List",
            "module": "src/search-sort/search-sort.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "HTML",
          "declaration": {
            "name": "HTML",
            "module": "src/search-sort/search-sort.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/search-sort/search-sort.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A dropdown element to choose how to sort the search results.",
          "name": "SearchSort",
          "members": [
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Indicates if the user must select a option.",
              "attribute": "required",
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "'select' | 'list' | 'html'"
              },
              "default": "'select'",
              "description": "HTML element to use when rendering options.",
              "attribute": "type"
            },
            {
              "kind": "field",
              "name": "labelText",
              "type": {
                "text": "string"
              },
              "default": "'Sort'",
              "description": "The label to display for the sort select field.",
              "attribute": "labelText"
            },
            {
              "kind": "field",
              "name": "sorts",
              "type": {
                "text": "SortOption[]"
              },
              "default": "[]",
              "description": "An array of available options to display structured like {\"key\": \"example_field\", \"label\": \"Example\", \"order\": \"asc or desc\"}.",
              "attribute": "sorts"
            },
            {
              "kind": "field",
              "name": "indexConfigLoaded",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "method",
              "name": "_querySort",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "sortKey",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "sortOrder",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Update the current query with a new sort order."
            },
            {
              "kind": "method",
              "name": "_getSelected",
              "return": {
                "type": {
                  "text": "SortOption | undefined"
                }
              },
              "description": "Get the currently selected sort option."
            },
            {
              "kind": "method",
              "name": "_getSelectOptions",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "description": "Get the element for all available sort options."
            },
            {
              "kind": "method",
              "name": "_getListOptions",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "description": "Get the element for all available sort options."
            },
            {
              "kind": "method",
              "name": "_getSelect",
              "description": "Get the elements for a vanilla select field."
            },
            {
              "kind": "method",
              "name": "_getList",
              "description": "Get the elements for a list field."
            },
            {
              "kind": "method",
              "name": "_getHtml",
              "description": "Get the elements for a html select field."
            },
            {
              "kind": "method",
              "name": "getHtmlLabel",
              "return": {
                "type": {
                  "text": "string | TemplateResult"
                }
              },
              "description": "HTML helper function *",
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getOptionKey",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "option",
                  "type": {
                    "text": "SortOption"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getOptionValue",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "option",
                  "type": {
                    "text": "SortOption"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getOptionLabel",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "option",
                  "type": {
                    "text": "SortOption"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getAllOptions",
              "return": {
                "type": {
                  "text": "SortOption[]"
                }
              },
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "isOptionSelected",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "option",
                  "type": {
                    "text": "SortOption"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "hasSelectedOptions",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getHtmlSelectLabel",
              "return": {
                "type": {
                  "text": "string | TemplateResult"
                }
              },
              "description": "Get the select field label.",
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "optionMouseDown",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "MouseEvent"
                  }
                },
                {
                  "name": "option",
                  "type": {
                    "text": "SortOption"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "applySelection",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "_event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getSelectedOptions",
              "return": {
                "type": {
                  "text": "SortOption[]"
                }
              },
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "filterOptions",
              "return": {
                "type": {
                  "text": "SortOption[]"
                }
              },
              "parameters": [
                {
                  "name": "searchString",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "htmlSelectLabel",
              "type": {
                "text": "string"
              },
              "default": "'Choose an option'",
              "description": "The label to display in the input box.",
              "attribute": "htmlSelectLabel",
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "multipleSelect",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "If a user can select multiple options.",
              "attribute": "multipleSelect",
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "dropdownOpen",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "If the dropdown is open.",
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "focusedOption",
              "type": {
                "text": "HTMLElement | null"
              },
              "default": "null",
              "description": "Private: The current option that is focused.",
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "focusOnOpen",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "description": "Private: If focus should be applied to the focusedOption when the dropdown is next opened.",
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "searchTimeout",
              "type": {
                "text": "number | undefined"
              },
              "privacy": "private",
              "description": "Private: The type search timeout.",
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "searchTerm",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "default": "''",
              "description": "Private: The type search string.",
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "inputRef",
              "privacy": "private",
              "description": "Private: A ref to the element that displays the current value.",
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "listboxRef",
              "privacy": "private",
              "description": "Private: A Ref to the listbox element containing the available options.",
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectActions",
              "type": {
                "text": "object"
              },
              "privacy": "private",
              "default": "{\n      Close: 0,\n      CloseSelect: 1,\n      First: 2,\n      Last: 3,\n      Next: 4,\n      Open: 5,\n      PageDown: 6,\n      PageUp: 7,\n      Previous: 8,\n      Select: 9,\n      Type: 10,\n    }",
              "description": "Private: A mapping of actions to the applicable key input code.",
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Map<string, any>"
                  }
                }
              ],
              "description": "Ensure the focusElement is focused when the dropdown is opened.",
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "getOptionId",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "option",
                  "type": {
                    "text": "unknown"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "clearSelection",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_getHtmlLabelElement",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "description": "The label element for the field.",
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_getOptionElement",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "parameters": [
                {
                  "name": "option",
                  "type": {
                    "text": "unknown"
                  },
                  "description": "The option data to render."
                }
              ],
              "description": "Render a single dropdown option.",
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_getAllOptionsElements",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "description": "Get all the option elements.",
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_getHtmlSelectLabelElement",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "description": "Get the select field label element.",
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_getHtmlSelectElement",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "description": "Get the select field element.",
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "close",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Close the dropdown.",
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_getActionFromKey",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ],
              "description": "Map a key press to an action.",
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "onSelectKeyDown",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ],
              "description": "Map a key press to an action and update element.",
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "toggleDropdown",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Toggle the dropdown open or closed.",
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_typeSearch",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "letter",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Search available options based on the entered string.",
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_searchOptions",
              "return": {
                "type": {
                  "text": "string | undefined"
                }
              },
              "parameters": [
                {
                  "name": "searchTerm",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Search the options by the given search term. If the search term repeats the same letter\nit will cycle through options starting with that letter.",
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_getNextOption",
              "parameters": [
                {
                  "name": "action",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "Get the next option to focus on based on the given action.",
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_getSearchTerm",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "char",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Get the search term input",
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_elementInView",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "id",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Determine if an DOM element is visible on the screen.",
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_isScrollable",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "description": "Determine if the options listbox is scrollable.",
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_maintainScrollVisibility",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "id",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Scroll to the given element.",
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_setOptionFocus",
              "parameters": [
                {
                  "name": "id",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Focus on an option in the listbox and remove focus from all other options.",
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "type",
              "type": {
                "text": "'select' | 'list' | 'html'"
              },
              "default": "'select'",
              "description": "HTML element to use when rendering options.",
              "fieldName": "type"
            },
            {
              "name": "labelText",
              "type": {
                "text": "string"
              },
              "default": "'Sort'",
              "description": "The label to display for the sort select field.",
              "fieldName": "labelText"
            },
            {
              "name": "sorts",
              "type": {
                "text": "SortOption[]"
              },
              "default": "[]",
              "description": "An array of available options to display structured like {\"key\": \"example_field\", \"label\": \"Example\", \"order\": \"asc or desc\"}.",
              "fieldName": "sorts"
            },
            {
              "name": "htmlSelectLabel",
              "type": {
                "text": "string"
              },
              "default": "'Choose an option'",
              "description": "The label to display in the input box.",
              "fieldName": "htmlSelectLabel",
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "name": "multipleSelect",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "If a user can select multiple options.",
              "fieldName": "multipleSelect",
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            },
            {
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicates if the user must select a option.",
              "fieldName": "required",
              "inheritedFrom": {
                "name": "DropdownMixin",
                "module": "src/BaseDropdownElement.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "DropdownMixin",
              "module": "/src/BaseDropdownElement"
            }
          ],
          "superclass": {
            "name": "BaseSearchElement",
            "module": "/src/BaseSearchElement"
          },
          "tagName": "search-sort",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SearchSort",
          "declaration": {
            "name": "SearchSort",
            "module": "src/search-sort/search-sort.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "search-sort",
          "declaration": {
            "name": "SearchSort",
            "module": "src/search-sort/search-sort.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/stories/page.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "meta",
          "type": {
            "text": "Meta"
          },
          "default": "{\n  title: 'Example/Page',\n  component: 'example-page',\n  tags: ['autodocs'],\n}"
        },
        {
          "kind": "variable",
          "name": "Primary",
          "type": {
            "text": "Story"
          },
          "default": "{\n  render: ({placeHolderText, labelText, clearText}) => html` <search-root\n    url=${MockData.url}\n    defaultPerPage=\"10\"\n  >\n    <div style=\"display: flex; flex-direction: column\">\n      <div style=\"display: flex; flex-direction: row\">\n        <div style=\"width: 25%\">\n          <div style=\"margin-bottom: 1rem\">\n            <search-result-summary></search-result-summary>\n          </div>\n          <facet-checkbox showLabel key=\"type\"></facet-checkbox>\n          <facet-dropdown showLabel key=\"type\"></facet-dropdown>\n        </div>\n        <div style=\"width: 75%\">\n          <div style=\"width: 100%\">\n            <div\n              style=\"display: flex; flex-direction: row; justify-content: space-between\"\n            >\n              <search-input\n                labelText=\"Search\"\n                placeHolderText=\"Search\"\n              ></search-input>\n              <search-sort></search-sort>\n              <search-results-per-page></search-results-per-page>\n              <search-results-switcher></search-results-switcher>\n            </div>\n            <div>\n              <search-applied-facets\n                showReset\n                showIndividual\n              ></search-applied-facets>\n            </div>\n          </div>\n          <search-results></search-results>\n          <search-no-results-message>\n            <div>There are no results.</div>\n          </search-no-results-message>\n          <search-simple-pager\n            prevLabel=\"<\"\n            nextLabel=\">\"\n          ></search-simple-pager>\n        </div>\n      </div>\n    </div>\n  </search-root>`,\n  args: {\n    placeHolderText: 'Search',\n    labelText: 'Search',\n    clearText: 'Remove',\n  },\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "meta",
            "module": "src/stories/page.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Primary",
          "declaration": {
            "name": "Primary",
            "module": "src/stories/page.stories.ts"
          }
        }
      ]
    }
  ]
}
